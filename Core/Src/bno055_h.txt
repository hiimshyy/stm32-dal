/*
 * bno055.h
 *
 *  Created on: Sep 22, 2025
 *      Author: tiensy
 */

#ifndef INC_BNO055_H_
#define INC_BNO055_H_

#include "stm32f1xx_hal.h"
#include <stdint.h>
#include <stdbool.h>

// BNO055 I2C Address
#define BNO055_I2C_ADDR_LOW     0x28
#define BNO055_I2C_ADDR_HIGH    0x29
#define BNO055_I2C_ADDR         BNO055_I2C_ADDR_HIGH

// BNO055 Register Addresses
#define BNO055_CHIP_ID_ADDR                 0x00
#define BNO055_ACCEL_REV_ID_ADDR            0x01
#define BNO055_MAG_REV_ID_ADDR              0x02
#define BNO055_GYRO_REV_ID_ADDR             0x03
#define BNO055_SW_REV_ID_LSB_ADDR           0x04
#define BNO055_SW_REV_ID_MSB_ADDR           0x05
#define BNO055_BL_REV_ID_ADDR               0x06

// Data registers
#define BNO055_ACCEL_DATA_X_LSB_ADDR        0x08
#define BNO055_ACCEL_DATA_X_MSB_ADDR        0x09
#define BNO055_ACCEL_DATA_Y_LSB_ADDR        0x0A
#define BNO055_ACCEL_DATA_Y_MSB_ADDR        0x0B
#define BNO055_ACCEL_DATA_Z_LSB_ADDR        0x0C
#define BNO055_ACCEL_DATA_Z_MSB_ADDR        0x0D

#define BNO055_MAG_DATA_X_LSB_ADDR          0x0E
#define BNO055_MAG_DATA_X_MSB_ADDR          0x0F
#define BNO055_MAG_DATA_Y_LSB_ADDR          0x10
#define BNO055_MAG_DATA_Y_MSB_ADDR          0x11
#define BNO055_MAG_DATA_Z_LSB_ADDR          0x12
#define BNO055_MAG_DATA_Z_MSB_ADDR          0x13

#define BNO055_GYRO_DATA_X_LSB_ADDR         0x14
#define BNO055_GYRO_DATA_X_MSB_ADDR         0x15
#define BNO055_GYRO_DATA_Y_LSB_ADDR         0x16
#define BNO055_GYRO_DATA_Y_MSB_ADDR         0x17
#define BNO055_GYRO_DATA_Z_LSB_ADDR         0x18
#define BNO055_GYRO_DATA_Z_MSB_ADDR         0x19

#define BNO055_EULER_H_LSB_ADDR             0x1A
#define BNO055_EULER_H_MSB_ADDR             0x1B
#define BNO055_EULER_R_LSB_ADDR             0x1C
#define BNO055_EULER_R_MSB_ADDR             0x1D
#define BNO055_EULER_P_LSB_ADDR             0x1E
#define BNO055_EULER_P_MSB_ADDR             0x1F

#define BNO055_QUATERNION_DATA_W_LSB_ADDR   0x20
#define BNO055_QUATERNION_DATA_W_MSB_ADDR   0x21
#define BNO055_QUATERNION_DATA_X_LSB_ADDR   0x22
#define BNO055_QUATERNION_DATA_X_MSB_ADDR   0x23
#define BNO055_QUATERNION_DATA_Y_LSB_ADDR   0x24
#define BNO055_QUATERNION_DATA_Y_MSB_ADDR   0x25
#define BNO055_QUATERNION_DATA_Z_LSB_ADDR   0x26
#define BNO055_QUATERNION_DATA_Z_MSB_ADDR   0x27

#define BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR 0x28
#define BNO055_LINEAR_ACCEL_DATA_X_MSB_ADDR 0x29
#define BNO055_LINEAR_ACCEL_DATA_Y_LSB_ADDR 0x2A
#define BNO055_LINEAR_ACCEL_DATA_Y_MSB_ADDR 0x2B
#define BNO055_LINEAR_ACCEL_DATA_Z_LSB_ADDR 0x2C
#define BNO055_LINEAR_ACCEL_DATA_Z_MSB_ADDR 0x2D

#define BNO055_GRAVITY_DATA_X_LSB_ADDR      0x2E
#define BNO055_GRAVITY_DATA_X_MSB_ADDR      0x2F
#define BNO055_GRAVITY_DATA_Y_LSB_ADDR      0x30
#define BNO055_GRAVITY_DATA_Y_MSB_ADDR      0x31
#define BNO055_GRAVITY_DATA_Z_LSB_ADDR      0x32
#define BNO055_GRAVITY_DATA_Z_MSB_ADDR      0x33

// Status registers
#define BNO055_TEMP_ADDR                    0x34
#define BNO055_CALIB_STAT_ADDR              0x35
#define BNO055_SELFTEST_RESULT_ADDR         0x36
#define BNO055_INTR_STAT_ADDR               0x37
#define BNO055_SYS_CLK_STAT_ADDR            0x38
#define BNO055_SYS_STAT_ADDR                0x39
#define BNO055_SYS_ERR_ADDR                 0x3A

// Configuration registers
#define BNO055_UNIT_SEL_ADDR                0x3B
#define BNO055_DATA_SELECT_ADDR             0x3C
#define BNO055_OPR_MODE_ADDR                0x3D
#define BNO055_PWR_MODE_ADDR                0x3E
#define BNO055_SYS_TRIGGER_ADDR             0x3F

// Operation modes
#define BNO055_OPERATION_MODE_CONFIG        0x00
#define BNO055_OPERATION_MODE_ACCONLY       0x01
#define BNO055_OPERATION_MODE_MAGONLY       0x02
#define BNO055_OPERATION_MODE_GYRONLY       0x03
#define BNO055_OPERATION_MODE_ACCMAG        0x04
#define BNO055_OPERATION_MODE_ACCGYRO       0x05
#define BNO055_OPERATION_MODE_MAGGYRO       0x06
#define BNO055_OPERATION_MODE_AMG           0x07
#define BNO055_OPERATION_MODE_IMUPLUS       0x08
#define BNO055_OPERATION_MODE_COMPASS       0x09
#define BNO055_OPERATION_MODE_M4G           0x0A
#define BNO055_OPERATION_MODE_NDOF_FMC_OFF  0x0B
#define BNO055_OPERATION_MODE_NDOF          0x0C

// Power modes
#define BNO055_POWER_MODE_NORMAL            0x00
#define BNO055_POWER_MODE_LOWPOWER          0x01
#define BNO055_POWER_MODE_SUSPEND           0x02

// BNO055 ID
#define BNO055_ID                           0xA0

// Status
typedef enum {
    BNO055_STATUS_OK = 0,
    BNO055_STATUS_ERROR,
    BNO055_STATUS_TIMEOUT,
    BNO055_STATUS_COMM_ERROR,
    BNO055_STATUS_NOT_INITIALIZED
} BNO055_Status_t;

// Vector data structure
typedef struct {
    int16_t x;
    int16_t y;
    int16_t z;
} BNO055_Vector_t;

// Euler angles structure
typedef struct {
    float heading;  // Yaw (Z-axis rotation)
    float roll;     // Roll (X-axis rotation)  
    float pitch;    // Pitch (Y-axis rotation)
} BNO055_Euler_t;

// Quaternion structure
typedef struct {
    float w;
    float x;
    float y;
    float z;
} BNO055_Quaternion_t;

// Calibration status structure
typedef struct {
    uint8_t system;
    uint8_t gyro;
    uint8_t accel;
    uint8_t mag;
} BNO055_CalibStatus_t;

// BNO055 handle structure
typedef struct {
    I2C_HandleTypeDef *hi2c;
    uint8_t address;
    uint8_t operation_mode;
    bool initialized;
    BNO055_Status_t status;
    uint8_t error_code;
    
    // Sensor data
    BNO055_Vector_t accel;
    BNO055_Vector_t gyro;
    BNO055_Vector_t mag;
    BNO055_Euler_t euler;
    BNO055_Quaternion_t quaternion;
    BNO055_Vector_t linear_accel;
    BNO055_CalibStatus_t calib_status;
    int8_t temperature;
    
    // Timing
    uint32_t last_read_time;
} BNO055_Handle_t;

// Function prototypes
BNO055_Status_t BNO055_Init(BNO055_Handle_t *hbno055, I2C_HandleTypeDef *hi2c);
BNO055_Status_t BNO055_SetOperationMode(BNO055_Handle_t *hbno055, uint8_t mode);
BNO055_Status_t BNO055_SetPowerMode(BNO055_Handle_t *hbno055, uint8_t mode);
BNO055_Status_t BNO055_ReadID(BNO055_Handle_t *hbno055, uint8_t *id);
BNO055_Status_t BNO055_ReadRevInfo(BNO055_Handle_t *hbno055);

// Data reading functions
BNO055_Status_t BNO055_ReadAccel(BNO055_Handle_t *hbno055);
BNO055_Status_t BNO055_ReadGyro(BNO055_Handle_t *hbno055);
BNO055_Status_t BNO055_ReadMag(BNO055_Handle_t *hbno055);
BNO055_Status_t BNO055_ReadEuler(BNO055_Handle_t *hbno055);
BNO055_Status_t BNO055_ReadQuaternion(BNO055_Handle_t *hbno055);
BNO055_Status_t BNO055_ReadLinearAccel(BNO055_Handle_t *hbno055);
BNO055_Status_t BNO055_ReadAllSensors(BNO055_Handle_t *hbno055);

// Status functions
BNO055_Status_t BNO055_ReadCalibStatus(BNO055_Handle_t *hbno055);
BNO055_Status_t BNO055_ReadTemperature(BNO055_Handle_t *hbno055);
BNO055_Status_t BNO055_ReadSystemStatus(BNO055_Handle_t *hbno055, uint8_t *sys_stat, uint8_t *sys_err);
bool BNO055_IsCalibrated(BNO055_Handle_t *hbno055);

// Data access functions
BNO055_Vector_t* BNO055_GetAccel(BNO055_Handle_t *hbno055);
BNO055_Vector_t* BNO055_GetGyro(BNO055_Handle_t *hbno055);
BNO055_Vector_t* BNO055_GetMag(BNO055_Handle_t *hbno055);
BNO055_Euler_t* BNO055_GetEuler(BNO055_Handle_t *hbno055);
BNO055_Quaternion_t* BNO055_GetQuaternion(BNO055_Handle_t *hbno055);
BNO055_Vector_t* BNO055_GetLinearAccel(BNO055_Handle_t *hbno055);
BNO055_CalibStatus_t* BNO055_GetCalibStatus(BNO055_Handle_t *hbno055);
int8_t BNO055_GetTemperature(BNO055_Handle_t *hbno055);

BNO055_Status_t BNO055_GetStatus(BNO055_Handle_t *hbno055);
uint8_t BNO055_GetErrorCode(BNO055_Handle_t *hbno055);

// Low level functions
BNO055_Status_t BNO055_WriteRegister(BNO055_Handle_t *hbno055, uint8_t reg, uint8_t value);
BNO055_Status_t BNO055_ReadRegister(BNO055_Handle_t *hbno055, uint8_t reg, uint8_t *value);
BNO055_Status_t BNO055_ReadRegisters(BNO055_Handle_t *hbno055, uint8_t reg, uint8_t *data, uint8_t len);

#endif /* INC_BNO055_H_ */
