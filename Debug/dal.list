
dal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08009d04  08009d04  0000ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2bc  0800a2bc  0000c060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a2bc  0800a2bc  0000b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2c4  0800a2c4  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2c4  0800a2c4  0000b2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2c8  0800a2c8  0000b2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a2cc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002edc  20000060  0800a32c  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f3c  0800a32c  0000cf3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001731c  00000000  00000000  0000c089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ea  00000000  00000000  000233a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00026a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc0  00000000  00000000  00027ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195f9  00000000  00000000  00028ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176e8  00000000  00000000  00042499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091341  00000000  00000000  00059b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eaec2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  000eaf08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000f09e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08009cec 	.word	0x08009cec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08009cec 	.word	0x08009cec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <BNO055_Init>:

/**
 * @brief Initialize BNO055 sensor
 */
BNO055_Status_t BNO055_Init(BNO055_Handle_t *hbno055, I2C_HandleTypeDef *hi2c)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
    if (!hbno055 || !hi2c) return BNO055_STATUS_ERROR;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <BNO055_Init+0x16>
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <BNO055_Init+0x1a>
 8000632:	2301      	movs	r3, #1
 8000634:	e0bc      	b.n	80007b0 <BNO055_Init+0x194>
    
    // Initialize handle
    hbno055->hi2c = hi2c;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	601a      	str	r2, [r3, #0]
    hbno055->address = BNO055_I2C_ADDR;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2228      	movs	r2, #40	@ 0x28
 8000640:	711a      	strb	r2, [r3, #4]
    hbno055->initialized = false;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	719a      	strb	r2, [r3, #6]
    hbno055->status = BNO055_STATUS_OK;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	71da      	strb	r2, [r3, #7]
    hbno055->error_code = 0;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	721a      	strb	r2, [r3, #8]
    hbno055->operation_mode = BNO055_OPERATION_MODE_CONFIG;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	715a      	strb	r2, [r3, #5]
    
    // Clear sensor data
    memset(&hbno055->accel, 0, sizeof(BNO055_Vector_t));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	330a      	adds	r3, #10
 800065e:	2206      	movs	r2, #6
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f008 feb4 	bl	80093d0 <memset>
    memset(&hbno055->gyro, 0, sizeof(BNO055_Vector_t));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3310      	adds	r3, #16
 800066c:	2206      	movs	r2, #6
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f008 fead 	bl	80093d0 <memset>
    memset(&hbno055->mag, 0, sizeof(BNO055_Vector_t));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3316      	adds	r3, #22
 800067a:	2206      	movs	r2, #6
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f008 fea6 	bl	80093d0 <memset>
    memset(&hbno055->euler, 0, sizeof(BNO055_Euler_t));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	331c      	adds	r3, #28
 8000688:	220c      	movs	r2, #12
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f008 fe9f 	bl	80093d0 <memset>
    memset(&hbno055->quaternion, 0, sizeof(BNO055_Quaternion_t));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3328      	adds	r3, #40	@ 0x28
 8000696:	2210      	movs	r2, #16
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f008 fe98 	bl	80093d0 <memset>
    memset(&hbno055->linear_accel, 0, sizeof(BNO055_Vector_t));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3338      	adds	r3, #56	@ 0x38
 80006a4:	2206      	movs	r2, #6
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f008 fe91 	bl	80093d0 <memset>
    memset(&hbno055->calib_status, 0, sizeof(BNO055_CalibStatus_t));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	333e      	adds	r3, #62	@ 0x3e
 80006b2:	2204      	movs	r2, #4
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f008 fe8a 	bl	80093d0 <memset>
    
    // Check communication
    uint8_t chip_id;
    if (BNO055_ReadID(hbno055, &chip_id) != BNO055_STATUS_OK) {
 80006bc:	f107 030b 	add.w	r3, r7, #11
 80006c0:	4619      	mov	r1, r3
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f8af 	bl	8000826 <BNO055_ReadID>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d004      	beq.n	80006d8 <BNO055_Init+0xbc>
        hbno055->status = BNO055_STATUS_COMM_ERROR;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2203      	movs	r2, #3
 80006d2:	71da      	strb	r2, [r3, #7]
        return BNO055_STATUS_COMM_ERROR;
 80006d4:	2303      	movs	r3, #3
 80006d6:	e06b      	b.n	80007b0 <BNO055_Init+0x194>
    }
    
    if (chip_id != BNO055_ID) {
 80006d8:	7afb      	ldrb	r3, [r7, #11]
 80006da:	2ba0      	cmp	r3, #160	@ 0xa0
 80006dc:	d007      	beq.n	80006ee <BNO055_Init+0xd2>
        hbno055->status = BNO055_STATUS_ERROR;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	71da      	strb	r2, [r3, #7]
        hbno055->error_code = chip_id;
 80006e4:	7afa      	ldrb	r2, [r7, #11]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	721a      	strb	r2, [r3, #8]
        return BNO055_STATUS_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e060      	b.n	80007b0 <BNO055_Init+0x194>
    }
    
    // Set to config mode
    if (BNO055_SetOperationMode(hbno055, BNO055_OPERATION_MODE_CONFIG) != BNO055_STATUS_OK) {
 80006ee:	2100      	movs	r1, #0
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 f861 	bl	80007b8 <BNO055_SetOperationMode>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <BNO055_Init+0xe4>
        return BNO055_STATUS_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	e057      	b.n	80007b0 <BNO055_Init+0x194>
    }
    
    // Reset system
    if (BNO055_WriteRegister(hbno055, BNO055_SYS_TRIGGER_ADDR, 0x20) != BNO055_STATUS_OK) {
 8000700:	2220      	movs	r2, #32
 8000702:	213f      	movs	r1, #63	@ 0x3f
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 fb80 	bl	8000e0a <BNO055_WriteRegister>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <BNO055_Init+0xf8>
        return BNO055_STATUS_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	e04d      	b.n	80007b0 <BNO055_Init+0x194>
    }
    
    // Wait for reset
    HAL_Delay(650);
 8000714:	f240 208a 	movw	r0, #650	@ 0x28a
 8000718:	f002 fd64 	bl	80031e4 <HAL_Delay>
    
    // Wait for chip to be ready
    uint8_t sys_stat, sys_err;
    uint32_t timeout = HAL_GetTick() + 1000;
 800071c:	f002 fd58 	bl	80031d0 <HAL_GetTick>
 8000720:	4603      	mov	r3, r0
 8000722:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000726:	60fb      	str	r3, [r7, #12]
    do {
        if (BNO055_ReadSystemStatus(hbno055, &sys_stat, &sys_err) != BNO055_STATUS_OK) {
 8000728:	f107 0209 	add.w	r2, r7, #9
 800072c:	f107 030a 	add.w	r3, r7, #10
 8000730:	4619      	mov	r1, r3
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 faef 	bl	8000d16 <BNO055_ReadSystemStatus>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <BNO055_Init+0x126>
            return BNO055_STATUS_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e036      	b.n	80007b0 <BNO055_Init+0x194>
        }
        HAL_Delay(10);
 8000742:	200a      	movs	r0, #10
 8000744:	f002 fd4e 	bl	80031e4 <HAL_Delay>
    } while (sys_stat != 0x01 && HAL_GetTick() < timeout);
 8000748:	7abb      	ldrb	r3, [r7, #10]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d005      	beq.n	800075a <BNO055_Init+0x13e>
 800074e:	f002 fd3f 	bl	80031d0 <HAL_GetTick>
 8000752:	4602      	mov	r2, r0
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4293      	cmp	r3, r2
 8000758:	d8e6      	bhi.n	8000728 <BNO055_Init+0x10c>
    
    if (sys_stat != 0x01) {
 800075a:	7abb      	ldrb	r3, [r7, #10]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d004      	beq.n	800076a <BNO055_Init+0x14e>
        hbno055->status = BNO055_STATUS_TIMEOUT;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2202      	movs	r2, #2
 8000764:	71da      	strb	r2, [r3, #7]
        return BNO055_STATUS_TIMEOUT;
 8000766:	2302      	movs	r3, #2
 8000768:	e022      	b.n	80007b0 <BNO055_Init+0x194>
    }
    
    // Set normal power mode
    if (BNO055_SetPowerMode(hbno055, BNO055_POWER_MODE_NORMAL) != BNO055_STATUS_OK) {
 800076a:	2100      	movs	r1, #0
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f844 	bl	80007fa <BNO055_SetPowerMode>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <BNO055_Init+0x160>
        return BNO055_STATUS_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	e019      	b.n	80007b0 <BNO055_Init+0x194>
    }
    
    // Set units (m/s², °/s, °C, degrees)
    if (BNO055_WriteRegister(hbno055, BNO055_UNIT_SEL_ADDR, 0x00) != BNO055_STATUS_OK) {
 800077c:	2200      	movs	r2, #0
 800077e:	213b      	movs	r1, #59	@ 0x3b
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fb42 	bl	8000e0a <BNO055_WriteRegister>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <BNO055_Init+0x174>
        return BNO055_STATUS_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e00f      	b.n	80007b0 <BNO055_Init+0x194>
    }
    
    // Set to NDOF mode (9DOF fusion)
    if (BNO055_SetOperationMode(hbno055, BNO055_OPERATION_MODE_NDOF) != BNO055_STATUS_OK) {
 8000790:	210c      	movs	r1, #12
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f810 	bl	80007b8 <BNO055_SetOperationMode>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <BNO055_Init+0x186>
        return BNO055_STATUS_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e006      	b.n	80007b0 <BNO055_Init+0x194>
    }
    
    hbno055->initialized = true;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	719a      	strb	r2, [r3, #6]
    hbno055->status = BNO055_STATUS_OK;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	71da      	strb	r2, [r3, #7]
    return BNO055_STATUS_OK;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <BNO055_SetOperationMode>:

/**
 * @brief Set operation mode
 */
BNO055_Status_t BNO055_SetOperationMode(BNO055_Handle_t *hbno055, uint8_t mode)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
    if (!hbno055) return BNO055_STATUS_ERROR;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <BNO055_SetOperationMode+0x16>
 80007ca:	2301      	movs	r3, #1
 80007cc:	e011      	b.n	80007f2 <BNO055_SetOperationMode+0x3a>
    
    if (BNO055_WriteRegister(hbno055, BNO055_OPR_MODE_ADDR, mode) != BNO055_STATUS_OK) {
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	461a      	mov	r2, r3
 80007d2:	213d      	movs	r1, #61	@ 0x3d
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 fb18 	bl	8000e0a <BNO055_WriteRegister>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <BNO055_SetOperationMode+0x2c>
        return BNO055_STATUS_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e006      	b.n	80007f2 <BNO055_SetOperationMode+0x3a>
    }
    
    hbno055->operation_mode = mode;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	78fa      	ldrb	r2, [r7, #3]
 80007e8:	715a      	strb	r2, [r3, #5]
    HAL_Delay(BNO055_MODE_SWITCH_DELAY);
 80007ea:	201e      	movs	r0, #30
 80007ec:	f002 fcfa 	bl	80031e4 <HAL_Delay>
    
    return BNO055_STATUS_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <BNO055_SetPowerMode>:

/**
 * @brief Set power mode
 */
BNO055_Status_t BNO055_SetPowerMode(BNO055_Handle_t *hbno055, uint8_t mode)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	460b      	mov	r3, r1
 8000804:	70fb      	strb	r3, [r7, #3]
    if (!hbno055) return BNO055_STATUS_ERROR;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <BNO055_SetPowerMode+0x16>
 800080c:	2301      	movs	r3, #1
 800080e:	e006      	b.n	800081e <BNO055_SetPowerMode+0x24>
    
    return BNO055_WriteRegister(hbno055, BNO055_PWR_MODE_ADDR, mode);
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	461a      	mov	r2, r3
 8000814:	213e      	movs	r1, #62	@ 0x3e
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 faf7 	bl	8000e0a <BNO055_WriteRegister>
 800081c:	4603      	mov	r3, r0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <BNO055_ReadID>:

/**
 * @brief Read chip ID
 */
BNO055_Status_t BNO055_ReadID(BNO055_Handle_t *hbno055, uint8_t *id)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
    if (!hbno055 || !id) return BNO055_STATUS_ERROR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <BNO055_ReadID+0x16>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <BNO055_ReadID+0x1a>
 800083c:	2301      	movs	r3, #1
 800083e:	e005      	b.n	800084c <BNO055_ReadID+0x26>
    
    return BNO055_ReadRegister(hbno055, BNO055_CHIP_ID_ADDR, id);
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	2100      	movs	r1, #0
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 fb0c 	bl	8000e62 <BNO055_ReadRegister>
 800084a:	4603      	mov	r3, r0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <BNO055_ReadAccel>:

/**
 * @brief Read accelerometer data
 */
BNO055_Status_t BNO055_ReadAccel(BNO055_Handle_t *hbno055)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    if (!hbno055) return BNO055_STATUS_ERROR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <BNO055_ReadAccel+0x12>
 8000862:	2301      	movs	r3, #1
 8000864:	e02a      	b.n	80008bc <BNO055_ReadAccel+0x68>
    
    uint8_t data[6];
    if (BNO055_ReadRegisters(hbno055, BNO055_ACCEL_DATA_X_LSB_ADDR, data, 6) != BNO055_STATUS_OK) {
 8000866:	f107 0208 	add.w	r2, r7, #8
 800086a:	2306      	movs	r3, #6
 800086c:	2108      	movs	r1, #8
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 fb36 	bl	8000ee0 <BNO055_ReadRegisters>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <BNO055_ReadAccel+0x2a>
        return BNO055_STATUS_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e01e      	b.n	80008bc <BNO055_ReadAccel+0x68>
    }
    
    hbno055->accel.x = (int16_t)((data[1] << 8) | data[0]);
 800087e:	7a7b      	ldrb	r3, [r7, #9]
 8000880:	b21b      	sxth	r3, r3
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b21a      	sxth	r2, r3
 8000886:	7a3b      	ldrb	r3, [r7, #8]
 8000888:	b21b      	sxth	r3, r3
 800088a:	4313      	orrs	r3, r2
 800088c:	b21a      	sxth	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	815a      	strh	r2, [r3, #10]
    hbno055->accel.y = (int16_t)((data[3] << 8) | data[2]);
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	b21b      	sxth	r3, r3
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	b21a      	sxth	r2, r3
 800089a:	7abb      	ldrb	r3, [r7, #10]
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	819a      	strh	r2, [r3, #12]
    hbno055->accel.z = (int16_t)((data[5] << 8) | data[4]);
 80008a6:	7b7b      	ldrb	r3, [r7, #13]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	81da      	strh	r2, [r3, #14]
    
    return BNO055_STATUS_OK;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <BNO055_ReadGyro>:

/**
 * @brief Read gyroscope data
 */
BNO055_Status_t BNO055_ReadGyro(BNO055_Handle_t *hbno055)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    if (!hbno055) return BNO055_STATUS_ERROR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <BNO055_ReadGyro+0x12>
 80008d2:	2301      	movs	r3, #1
 80008d4:	e02a      	b.n	800092c <BNO055_ReadGyro+0x68>
    
    uint8_t data[6];
    if (BNO055_ReadRegisters(hbno055, BNO055_GYRO_DATA_X_LSB_ADDR, data, 6) != BNO055_STATUS_OK) {
 80008d6:	f107 0208 	add.w	r2, r7, #8
 80008da:	2306      	movs	r3, #6
 80008dc:	2114      	movs	r1, #20
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 fafe 	bl	8000ee0 <BNO055_ReadRegisters>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <BNO055_ReadGyro+0x2a>
        return BNO055_STATUS_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e01e      	b.n	800092c <BNO055_ReadGyro+0x68>
    }
    
    hbno055->gyro.x = (int16_t)((data[1] << 8) | data[0]);
 80008ee:	7a7b      	ldrb	r3, [r7, #9]
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	b21a      	sxth	r2, r3
 80008f6:	7a3b      	ldrb	r3, [r7, #8]
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b21a      	sxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	821a      	strh	r2, [r3, #16]
    hbno055->gyro.y = (int16_t)((data[3] << 8) | data[2]);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	b21b      	sxth	r3, r3
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	b21a      	sxth	r2, r3
 800090a:	7abb      	ldrb	r3, [r7, #10]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b21a      	sxth	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	825a      	strh	r2, [r3, #18]
    hbno055->gyro.z = (int16_t)((data[5] << 8) | data[4]);
 8000916:	7b7b      	ldrb	r3, [r7, #13]
 8000918:	b21b      	sxth	r3, r3
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7b3b      	ldrb	r3, [r7, #12]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	829a      	strh	r2, [r3, #20]
    
    return BNO055_STATUS_OK;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <BNO055_ReadMag>:

/**
 * @brief Read magnetometer data
 */
BNO055_Status_t BNO055_ReadMag(BNO055_Handle_t *hbno055)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    if (!hbno055) return BNO055_STATUS_ERROR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <BNO055_ReadMag+0x12>
 8000942:	2301      	movs	r3, #1
 8000944:	e02a      	b.n	800099c <BNO055_ReadMag+0x68>
    
    uint8_t data[6];
    if (BNO055_ReadRegisters(hbno055, BNO055_MAG_DATA_X_LSB_ADDR, data, 6) != BNO055_STATUS_OK) {
 8000946:	f107 0208 	add.w	r2, r7, #8
 800094a:	2306      	movs	r3, #6
 800094c:	210e      	movs	r1, #14
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 fac6 	bl	8000ee0 <BNO055_ReadRegisters>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <BNO055_ReadMag+0x2a>
        return BNO055_STATUS_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e01e      	b.n	800099c <BNO055_ReadMag+0x68>
    }
    
    hbno055->mag.x = (int16_t)((data[1] << 8) | data[0]);
 800095e:	7a7b      	ldrb	r3, [r7, #9]
 8000960:	b21b      	sxth	r3, r3
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	b21a      	sxth	r2, r3
 8000966:	7a3b      	ldrb	r3, [r7, #8]
 8000968:	b21b      	sxth	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b21a      	sxth	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	82da      	strh	r2, [r3, #22]
    hbno055->mag.y = (int16_t)((data[3] << 8) | data[2]);
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	b21b      	sxth	r3, r3
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b21a      	sxth	r2, r3
 800097a:	7abb      	ldrb	r3, [r7, #10]
 800097c:	b21b      	sxth	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b21a      	sxth	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	831a      	strh	r2, [r3, #24]
    hbno055->mag.z = (int16_t)((data[5] << 8) | data[4]);
 8000986:	7b7b      	ldrb	r3, [r7, #13]
 8000988:	b21b      	sxth	r3, r3
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b21a      	sxth	r2, r3
 800098e:	7b3b      	ldrb	r3, [r7, #12]
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b21a      	sxth	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	835a      	strh	r2, [r3, #26]
    
    return BNO055_STATUS_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <BNO055_ReadEuler>:

/**
 * @brief Read Euler angles
 */
BNO055_Status_t BNO055_ReadEuler(BNO055_Handle_t *hbno055)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    if (!hbno055) return BNO055_STATUS_ERROR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <BNO055_ReadEuler+0x12>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e051      	b.n	8000a5a <BNO055_ReadEuler+0xb6>
    
    uint8_t data[6];
    if (BNO055_ReadRegisters(hbno055, BNO055_EULER_H_LSB_ADDR, data, 6) != BNO055_STATUS_OK) {
 80009b6:	f107 020c 	add.w	r2, r7, #12
 80009ba:	2306      	movs	r3, #6
 80009bc:	211a      	movs	r1, #26
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 fa8e 	bl	8000ee0 <BNO055_ReadRegisters>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <BNO055_ReadEuler+0x2a>
        return BNO055_STATUS_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e045      	b.n	8000a5a <BNO055_ReadEuler+0xb6>
    }
    
    int16_t heading = (int16_t)((data[1] << 8) | data[0]);
 80009ce:	7b7b      	ldrb	r3, [r7, #13]
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	7b3b      	ldrb	r3, [r7, #12]
 80009d8:	b21b      	sxth	r3, r3
 80009da:	4313      	orrs	r3, r2
 80009dc:	82fb      	strh	r3, [r7, #22]
    int16_t roll = (int16_t)((data[3] << 8) | data[2]);
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	82bb      	strh	r3, [r7, #20]
    int16_t pitch = (int16_t)((data[5] << 8) | data[4]);
 80009ee:	7c7b      	ldrb	r3, [r7, #17]
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	7c3b      	ldrb	r3, [r7, #16]
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	827b      	strh	r3, [r7, #18]
    
    // Convert to degrees (1 degree = 16 LSB)
    hbno055->euler.heading = heading / 16.0f;
 80009fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc66 	bl	80002d4 <__aeabi_i2f>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fd68 	bl	80004e4 <__aeabi_fdiv>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	61da      	str	r2, [r3, #28]
    hbno055->euler.roll = roll / 16.0f;
 8000a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fc57 	bl	80002d4 <__aeabi_i2f>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fd59 	bl	80004e4 <__aeabi_fdiv>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	621a      	str	r2, [r3, #32]
    hbno055->euler.pitch = pitch / 16.0f;
 8000a3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fc48 	bl	80002d4 <__aeabi_i2f>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fd4a 	bl	80004e4 <__aeabi_fdiv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	625a      	str	r2, [r3, #36]	@ 0x24
    
    return BNO055_STATUS_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <BNO055_ReadQuaternion>:

/**
 * @brief Read quaternion data
 */
BNO055_Status_t BNO055_ReadQuaternion(BNO055_Handle_t *hbno055)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b088      	sub	sp, #32
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
    if (!hbno055) return BNO055_STATUS_ERROR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <BNO055_ReadQuaternion+0x12>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e067      	b.n	8000b44 <BNO055_ReadQuaternion+0xe2>
    
    uint8_t data[8];
    if (BNO055_ReadRegisters(hbno055, BNO055_QUATERNION_DATA_W_LSB_ADDR, data, 8) != BNO055_STATUS_OK) {
 8000a74:	f107 020c 	add.w	r2, r7, #12
 8000a78:	2308      	movs	r3, #8
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 fa2f 	bl	8000ee0 <BNO055_ReadRegisters>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <BNO055_ReadQuaternion+0x2a>
        return BNO055_STATUS_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e05b      	b.n	8000b44 <BNO055_ReadQuaternion+0xe2>
    }
    
    int16_t w = (int16_t)((data[1] << 8) | data[0]);
 8000a8c:	7b7b      	ldrb	r3, [r7, #13]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	7b3b      	ldrb	r3, [r7, #12]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	83fb      	strh	r3, [r7, #30]
    int16_t x = (int16_t)((data[3] << 8) | data[2]);
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	83bb      	strh	r3, [r7, #28]
    int16_t y = (int16_t)((data[5] << 8) | data[4]);
 8000aac:	7c7b      	ldrb	r3, [r7, #17]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	7c3b      	ldrb	r3, [r7, #16]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	837b      	strh	r3, [r7, #26]
    int16_t z = (int16_t)((data[7] << 8) | data[6]);
 8000abc:	7cfb      	ldrb	r3, [r7, #19]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	7cbb      	ldrb	r3, [r7, #18]
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	833b      	strh	r3, [r7, #24]
    
    // Convert to float (1 quaternion = 2^14 LSB)
    const float scale = 1.0f / (1 << 14);
 8000acc:	f04f 5362 	mov.w	r3, #947912704	@ 0x38800000
 8000ad0:	617b      	str	r3, [r7, #20]
    hbno055->quaternion.w = w * scale;
 8000ad2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fbfc 	bl	80002d4 <__aeabi_i2f>
 8000adc:	4603      	mov	r3, r0
 8000ade:	6979      	ldr	r1, [r7, #20]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fc4b 	bl	800037c <__aeabi_fmul>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
    hbno055->quaternion.x = x * scale;
 8000aee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fbee 	bl	80002d4 <__aeabi_i2f>
 8000af8:	4603      	mov	r3, r0
 8000afa:	6979      	ldr	r1, [r7, #20]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fc3d 	bl	800037c <__aeabi_fmul>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hbno055->quaternion.y = y * scale;
 8000b0a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fbe0 	bl	80002d4 <__aeabi_i2f>
 8000b14:	4603      	mov	r3, r0
 8000b16:	6979      	ldr	r1, [r7, #20]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fc2f 	bl	800037c <__aeabi_fmul>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	631a      	str	r2, [r3, #48]	@ 0x30
    hbno055->quaternion.z = z * scale;
 8000b26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fbd2 	bl	80002d4 <__aeabi_i2f>
 8000b30:	4603      	mov	r3, r0
 8000b32:	6979      	ldr	r1, [r7, #20]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fc21 	bl	800037c <__aeabi_fmul>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	635a      	str	r2, [r3, #52]	@ 0x34
    
    return BNO055_STATUS_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <BNO055_ReadLinearAccel>:

/**
 * @brief Read linear acceleration data
 */
BNO055_Status_t BNO055_ReadLinearAccel(BNO055_Handle_t *hbno055)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    if (!hbno055) return BNO055_STATUS_ERROR;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <BNO055_ReadLinearAccel+0x12>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e02a      	b.n	8000bb4 <BNO055_ReadLinearAccel+0x68>
    
    uint8_t data[6];
    if (BNO055_ReadRegisters(hbno055, BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR, data, 6) != BNO055_STATUS_OK) {
 8000b5e:	f107 0208 	add.w	r2, r7, #8
 8000b62:	2306      	movs	r3, #6
 8000b64:	2128      	movs	r1, #40	@ 0x28
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 f9ba 	bl	8000ee0 <BNO055_ReadRegisters>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <BNO055_ReadLinearAccel+0x2a>
        return BNO055_STATUS_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e01e      	b.n	8000bb4 <BNO055_ReadLinearAccel+0x68>
    }
    
    hbno055->linear_accel.x = (int16_t)((data[1] << 8) | data[0]);
 8000b76:	7a7b      	ldrb	r3, [r7, #9]
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	7a3b      	ldrb	r3, [r7, #8]
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	871a      	strh	r2, [r3, #56]	@ 0x38
    hbno055->linear_accel.y = (int16_t)((data[3] << 8) | data[2]);
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	7abb      	ldrb	r3, [r7, #10]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hbno055->linear_accel.z = (int16_t)((data[5] << 8) | data[4]);
 8000b9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	b21a      	sxth	r2, r3
 8000ba6:	7b3b      	ldrb	r3, [r7, #12]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
    
    return BNO055_STATUS_OK;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <BNO055_ReadAllSensors>:

/**
 * @brief Read all sensor data
 */
BNO055_Status_t BNO055_ReadAllSensors(BNO055_Handle_t *hbno055)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    if (!hbno055 || !hbno055->initialized) return BNO055_STATUS_NOT_INITIALIZED;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <BNO055_ReadAllSensors+0x1c>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	799b      	ldrb	r3, [r3, #6]
 8000bce:	f083 0301 	eor.w	r3, r3, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <BNO055_ReadAllSensors+0x20>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e040      	b.n	8000c5e <BNO055_ReadAllSensors+0xa2>
    
    BNO055_Status_t status = BNO055_STATUS_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
    
    // Read all sensor data
    if (BNO055_ReadAccel(hbno055) != BNO055_STATUS_OK) status = BNO055_STATUS_ERROR;
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fe37 	bl	8000854 <BNO055_ReadAccel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <BNO055_ReadAllSensors+0x34>
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
    if (BNO055_ReadGyro(hbno055) != BNO055_STATUS_OK) status = BNO055_STATUS_ERROR;
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fe67 	bl	80008c4 <BNO055_ReadGyro>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <BNO055_ReadAllSensors+0x44>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
    if (BNO055_ReadMag(hbno055) != BNO055_STATUS_OK) status = BNO055_STATUS_ERROR;
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff fe97 	bl	8000934 <BNO055_ReadMag>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <BNO055_ReadAllSensors+0x54>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
    if (BNO055_ReadEuler(hbno055) != BNO055_STATUS_OK) status = BNO055_STATUS_ERROR;
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fec7 	bl	80009a4 <BNO055_ReadEuler>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <BNO055_ReadAllSensors+0x64>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
    if (BNO055_ReadQuaternion(hbno055) != BNO055_STATUS_OK) status = BNO055_STATUS_ERROR;
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff1e 	bl	8000a62 <BNO055_ReadQuaternion>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <BNO055_ReadAllSensors+0x74>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
    if (BNO055_ReadLinearAccel(hbno055) != BNO055_STATUS_OK) status = BNO055_STATUS_ERROR;
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff8b 	bl	8000b4c <BNO055_ReadLinearAccel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <BNO055_ReadAllSensors+0x84>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
    
    // Read calibration status
    BNO055_ReadCalibStatus(hbno055);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f810 	bl	8000c66 <BNO055_ReadCalibStatus>
    
    // Read temperature
    BNO055_ReadTemperature(hbno055);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f846 	bl	8000cd8 <BNO055_ReadTemperature>
    
    hbno055->last_read_time = HAL_GetTick();
 8000c4c:	f002 fac0 	bl	80031d0 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	645a      	str	r2, [r3, #68]	@ 0x44
    hbno055->status = status;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	71da      	strb	r2, [r3, #7]
    
    return status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <BNO055_ReadCalibStatus>:

/**
 * @brief Read calibration status
 */
BNO055_Status_t BNO055_ReadCalibStatus(BNO055_Handle_t *hbno055)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
    if (!hbno055) return BNO055_STATUS_ERROR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <BNO055_ReadCalibStatus+0x12>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e02b      	b.n	8000cd0 <BNO055_ReadCalibStatus+0x6a>
    
    uint8_t calib_data;
    if (BNO055_ReadRegister(hbno055, BNO055_CALIB_STAT_ADDR, &calib_data) != BNO055_STATUS_OK) {
 8000c78:	f107 030f 	add.w	r3, r7, #15
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2135      	movs	r1, #53	@ 0x35
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 f8ee 	bl	8000e62 <BNO055_ReadRegister>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <BNO055_ReadCalibStatus+0x2a>
        return BNO055_STATUS_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e01f      	b.n	8000cd0 <BNO055_ReadCalibStatus+0x6a>
    }
    
    hbno055->calib_status.system = (calib_data >> 6) & 0x03;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	099b      	lsrs	r3, r3, #6
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hbno055->calib_status.gyro = (calib_data >> 4) & 0x03;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    hbno055->calib_status.accel = (calib_data >> 2) & 0x03;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hbno055->calib_status.mag = calib_data & 0x03;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    
    return BNO055_STATUS_OK;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <BNO055_ReadTemperature>:

/**
 * @brief Read temperature
 */
BNO055_Status_t BNO055_ReadTemperature(BNO055_Handle_t *hbno055)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    if (!hbno055) return BNO055_STATUS_ERROR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <BNO055_ReadTemperature+0x12>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e011      	b.n	8000d0e <BNO055_ReadTemperature+0x36>
    
    uint8_t temp_data;
    if (BNO055_ReadRegister(hbno055, BNO055_TEMP_ADDR, &temp_data) != BNO055_STATUS_OK) {
 8000cea:	f107 030f 	add.w	r3, r7, #15
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2134      	movs	r1, #52	@ 0x34
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f8b5 	bl	8000e62 <BNO055_ReadRegister>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <BNO055_ReadTemperature+0x2a>
        return BNO055_STATUS_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e005      	b.n	8000d0e <BNO055_ReadTemperature+0x36>
    }
    
    hbno055->temperature = (int8_t)temp_data;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	b25a      	sxtb	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    return BNO055_STATUS_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <BNO055_ReadSystemStatus>:

/**
 * @brief Read system status
 */
BNO055_Status_t BNO055_ReadSystemStatus(BNO055_Handle_t *hbno055, uint8_t *sys_stat, uint8_t *sys_err)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
    if (!hbno055 || !sys_stat || !sys_err) return BNO055_STATUS_ERROR;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d005      	beq.n	8000d34 <BNO055_ReadSystemStatus+0x1e>
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <BNO055_ReadSystemStatus+0x1e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <BNO055_ReadSystemStatus+0x22>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e014      	b.n	8000d62 <BNO055_ReadSystemStatus+0x4c>
    
    if (BNO055_ReadRegister(hbno055, BNO055_SYS_STAT_ADDR, sys_stat) != BNO055_STATUS_OK) {
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	2139      	movs	r1, #57	@ 0x39
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f000 f890 	bl	8000e62 <BNO055_ReadRegister>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <BNO055_ReadSystemStatus+0x36>
        return BNO055_STATUS_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e00a      	b.n	8000d62 <BNO055_ReadSystemStatus+0x4c>
    }
    
    if (BNO055_ReadRegister(hbno055, BNO055_SYS_ERR_ADDR, sys_err) != BNO055_STATUS_OK) {
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	213a      	movs	r1, #58	@ 0x3a
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f000 f886 	bl	8000e62 <BNO055_ReadRegister>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <BNO055_ReadSystemStatus+0x4a>
        return BNO055_STATUS_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <BNO055_ReadSystemStatus+0x4c>
    }
    
    return BNO055_STATUS_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <BNO055_GetAccel>:
            hbno055->calib_status.mag >= 3);
}

// Data access functions
BNO055_Vector_t* BNO055_GetAccel(BNO055_Handle_t *hbno055)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
    if (!hbno055) return NULL;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <BNO055_GetAccel+0x12>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e001      	b.n	8000d80 <BNO055_GetAccel+0x16>
    return &hbno055->accel;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	330a      	adds	r3, #10
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <BNO055_GetGyro>:

BNO055_Vector_t* BNO055_GetGyro(BNO055_Handle_t *hbno055)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
    if (!hbno055) return NULL;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <BNO055_GetGyro+0x12>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e001      	b.n	8000da0 <BNO055_GetGyro+0x16>
    return &hbno055->gyro;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3310      	adds	r3, #16
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <BNO055_GetMag>:

BNO055_Vector_t* BNO055_GetMag(BNO055_Handle_t *hbno055)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
    if (!hbno055) return NULL;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <BNO055_GetMag+0x12>
 8000db8:	2300      	movs	r3, #0
 8000dba:	e001      	b.n	8000dc0 <BNO055_GetMag+0x16>
    return &hbno055->mag;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3316      	adds	r3, #22
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <BNO055_GetCalibStatus>:
    if (!hbno055) return NULL;
    return &hbno055->linear_accel;
}

BNO055_CalibStatus_t* BNO055_GetCalibStatus(BNO055_Handle_t *hbno055)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    if (!hbno055) return NULL;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <BNO055_GetCalibStatus+0x12>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e001      	b.n	8000de0 <BNO055_GetCalibStatus+0x16>
    return &hbno055->calib_status;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	333e      	adds	r3, #62	@ 0x3e
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <BNO055_GetErrorCode>:
    if (!hbno055) return BNO055_STATUS_ERROR;
    return hbno055->status;
}

uint8_t BNO055_GetErrorCode(BNO055_Handle_t *hbno055)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
    if (!hbno055) return 0xFF;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <BNO055_GetErrorCode+0x12>
 8000df8:	23ff      	movs	r3, #255	@ 0xff
 8000dfa:	e001      	b.n	8000e00 <BNO055_GetErrorCode+0x16>
    return hbno055->error_code;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7a1b      	ldrb	r3, [r3, #8]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <BNO055_WriteRegister>:

/**
 * @brief Write register
 */
BNO055_Status_t BNO055_WriteRegister(BNO055_Handle_t *hbno055, uint8_t reg, uint8_t value)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af02      	add	r7, sp, #8
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	70fb      	strb	r3, [r7, #3]
 8000e16:	4613      	mov	r3, r2
 8000e18:	70bb      	strb	r3, [r7, #2]
    if (!hbno055) return BNO055_STATUS_ERROR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <BNO055_WriteRegister+0x1a>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e01a      	b.n	8000e5a <BNO055_WriteRegister+0x50>
    
    uint8_t data[2] = {reg, value};
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	733b      	strb	r3, [r7, #12]
 8000e28:	78bb      	ldrb	r3, [r7, #2]
 8000e2a:	737b      	strb	r3, [r7, #13]
    
    if (HAL_I2C_Master_Transmit(hbno055->hi2c, hbno055->address << 1, data, 2, BNO055_TIMEOUT_MS) != HAL_OK) {
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	b299      	uxth	r1, r3
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2302      	movs	r3, #2
 8000e44:	f002 fd9e 	bl	8003984 <HAL_I2C_Master_Transmit>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <BNO055_WriteRegister+0x4e>
        hbno055->status = BNO055_STATUS_COMM_ERROR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	71da      	strb	r2, [r3, #7]
        return BNO055_STATUS_COMM_ERROR;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e000      	b.n	8000e5a <BNO055_WriteRegister+0x50>
    }
    
    return BNO055_STATUS_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <BNO055_ReadRegister>:

/**
 * @brief Read single register
 */
BNO055_Status_t BNO055_ReadRegister(BNO055_Handle_t *hbno055, uint8_t reg, uint8_t *value)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af02      	add	r7, sp, #8
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	72fb      	strb	r3, [r7, #11]
    if (!hbno055 || !value) return BNO055_STATUS_ERROR;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <BNO055_ReadRegister+0x1a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <BNO055_ReadRegister+0x1e>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e02b      	b.n	8000ed8 <BNO055_ReadRegister+0x76>
    
    if (HAL_I2C_Master_Transmit(hbno055->hi2c, hbno055->address << 1, &reg, 1, BNO055_TIMEOUT_MS) != HAL_OK) {
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	b299      	uxth	r1, r3
 8000e8c:	f107 020b 	add.w	r2, r7, #11
 8000e90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2301      	movs	r3, #1
 8000e98:	f002 fd74 	bl	8003984 <HAL_I2C_Master_Transmit>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <BNO055_ReadRegister+0x4a>
        hbno055->status = BNO055_STATUS_COMM_ERROR;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	71da      	strb	r2, [r3, #7]
        return BNO055_STATUS_COMM_ERROR;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e015      	b.n	8000ed8 <BNO055_ReadRegister+0x76>
    }
    
    if (HAL_I2C_Master_Receive(hbno055->hi2c, hbno055->address << 1, value, 1, BNO055_TIMEOUT_MS) != HAL_OK) {
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	f002 fe5d 	bl	8003b80 <HAL_I2C_Master_Receive>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <BNO055_ReadRegister+0x74>
        hbno055->status = BNO055_STATUS_COMM_ERROR;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2203      	movs	r2, #3
 8000ed0:	71da      	strb	r2, [r3, #7]
        return BNO055_STATUS_COMM_ERROR;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e000      	b.n	8000ed8 <BNO055_ReadRegister+0x76>
    }
    
    return BNO055_STATUS_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <BNO055_ReadRegisters>:

/**
 * @brief Read multiple registers
 */
BNO055_Status_t BNO055_ReadRegisters(BNO055_Handle_t *hbno055, uint8_t reg, uint8_t *data, uint8_t len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	461a      	mov	r2, r3
 8000eec:	460b      	mov	r3, r1
 8000eee:	72fb      	strb	r3, [r7, #11]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	72bb      	strb	r3, [r7, #10]
    if (!hbno055 || !data || len == 0) return BNO055_STATUS_ERROR;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <BNO055_ReadRegisters+0x26>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <BNO055_ReadRegisters+0x26>
 8000f00:	7abb      	ldrb	r3, [r7, #10]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <BNO055_ReadRegisters+0x2a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e02c      	b.n	8000f64 <BNO055_ReadRegisters+0x84>
    
    if (HAL_I2C_Master_Transmit(hbno055->hi2c, hbno055->address << 1, &reg, 1, BNO055_TIMEOUT_MS) != HAL_OK) {
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	791b      	ldrb	r3, [r3, #4]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	b299      	uxth	r1, r3
 8000f16:	f107 020b 	add.w	r2, r7, #11
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	f002 fd2f 	bl	8003984 <HAL_I2C_Master_Transmit>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <BNO055_ReadRegisters+0x56>
        hbno055->status = BNO055_STATUS_COMM_ERROR;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	71da      	strb	r2, [r3, #7]
        return BNO055_STATUS_COMM_ERROR;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e016      	b.n	8000f64 <BNO055_ReadRegisters+0x84>
    }
    
    if (HAL_I2C_Master_Receive(hbno055->hi2c, hbno055->address << 1, data, len, BNO055_TIMEOUT_MS) != HAL_OK) {
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	791b      	ldrb	r3, [r3, #4]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	b299      	uxth	r1, r3
 8000f42:	7abb      	ldrb	r3, [r7, #10]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f4a:	9200      	str	r2, [sp, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	f002 fe17 	bl	8003b80 <HAL_I2C_Master_Receive>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <BNO055_ReadRegisters+0x82>
        hbno055->status = BNO055_STATUS_COMM_ERROR;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	71da      	strb	r2, [r3, #7]
        return BNO055_STATUS_COMM_ERROR;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e000      	b.n	8000f64 <BNO055_ReadRegisters+0x84>
    }
    
    return BNO055_STATUS_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f002 f8d6 	bl	8003120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f878 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f78:	f000 f93c 	bl	80011f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f7c:	f000 f8b8 	bl	80010f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f80:	f000 f8e4 	bl	800114c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f84:	f000 f90c 	bl	80011a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // Initialize modules
  SystemInit_Modules();
 8000f88:	f000 f962 	bl	8001250 <SystemInit_Modules>
  
  DebugPrint("DAL Module Started\r\n");
 8000f8c:	4821      	ldr	r0, [pc, #132]	@ (8001014 <main+0xa8>)
 8000f8e:	f000 f9e1 	bl	8001354 <DebugPrint>
  DebugPrint("Firmware Version: v1.01\r\n");
 8000f92:	4821      	ldr	r0, [pc, #132]	@ (8001018 <main+0xac>)
 8000f94:	f000 f9de 	bl	8001354 <DebugPrint>
  DebugPrint("Hardware Version: v1.01\r\n");
 8000f98:	4820      	ldr	r0, [pc, #128]	@ (800101c <main+0xb0>)
 8000f9a:	f000 f9db 	bl	8001354 <DebugPrint>
  
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f9e:	f004 fadd 	bl	800555c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Create the mutex(es) */
  dataMutexHandle = osMutexNew(&dataMutex_attributes);
 8000fa2:	481f      	ldr	r0, [pc, #124]	@ (8001020 <main+0xb4>)
 8000fa4:	f004 fce6 	bl	8005974 <osMutexNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a1e      	ldr	r2, [pc, #120]	@ (8001024 <main+0xb8>)
 8000fac:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* Create the semaphore(s) */
  sensorReadySemHandle = osSemaphoreNew(1, 0, &sensorReadySem_attributes);
 8000fae:	4a1e      	ldr	r2, [pc, #120]	@ (8001028 <main+0xbc>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f004 fdec 	bl	8005b90 <osSemaphoreNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a1c      	ldr	r2, [pc, #112]	@ (800102c <main+0xc0>)
 8000fbc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001030 <main+0xc4>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	481c      	ldr	r0, [pc, #112]	@ (8001034 <main+0xc8>)
 8000fc4:	f004 fb12 	bl	80055ec <osThreadNew>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a1b      	ldr	r2, [pc, #108]	@ (8001038 <main+0xcc>)
 8000fcc:	6013      	str	r3, [r2, #0]

  /* creation of modbusTask */
  modbusTaskHandle = osThreadNew(StartModbusTask, NULL, &modbusTask_attributes);
 8000fce:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <main+0xd0>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	481b      	ldr	r0, [pc, #108]	@ (8001040 <main+0xd4>)
 8000fd4:	f004 fb0a 	bl	80055ec <osThreadNew>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <main+0xd8>)
 8000fdc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* Create additional threads */
  sensorTaskHandle = osThreadNew(StartSensorTask, NULL, &sensorTask_attributes);
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <main+0xdc>)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	481a      	ldr	r0, [pc, #104]	@ (800104c <main+0xe0>)
 8000fe4:	f004 fb02 	bl	80055ec <osThreadNew>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a19      	ldr	r2, [pc, #100]	@ (8001050 <main+0xe4>)
 8000fec:	6013      	str	r3, [r2, #0]
  nfcTaskHandle = osThreadNew(StartNfcTask, NULL, &nfcTask_attributes);
 8000fee:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <main+0xe8>)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4819      	ldr	r0, [pc, #100]	@ (8001058 <main+0xec>)
 8000ff4:	f004 fafa 	bl	80055ec <osThreadNew>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a18      	ldr	r2, [pc, #96]	@ (800105c <main+0xf0>)
 8000ffc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* Create the event flags */
  systemEventsHandle = osEventFlagsNew(&systemEvents_attributes);
 8000ffe:	4818      	ldr	r0, [pc, #96]	@ (8001060 <main+0xf4>)
 8001000:	f004 fba1 	bl	8005746 <osEventFlagsNew>
 8001004:	4603      	mov	r3, r0
 8001006:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <main+0xf8>)
 8001008:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800100a:	f004 fac9 	bl	80055a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100e:	bf00      	nop
 8001010:	e7fd      	b.n	800100e <main+0xa2>
 8001012:	bf00      	nop
 8001014:	08009d5c 	.word	0x08009d5c
 8001018:	08009d74 	.word	0x08009d74
 800101c:	08009d90 	.word	0x08009d90
 8001020:	0800a024 	.word	0x0800a024
 8001024:	20001490 	.word	0x20001490
 8001028:	0800a034 	.word	0x0800a034
 800102c:	20001494 	.word	0x20001494
 8001030:	08009f94 	.word	0x08009f94
 8001034:	08001399 	.word	0x08001399
 8001038:	20000160 	.word	0x20000160
 800103c:	08009fb8 	.word	0x08009fb8
 8001040:	08001481 	.word	0x08001481
 8001044:	20000164 	.word	0x20000164
 8001048:	08009fdc 	.word	0x08009fdc
 800104c:	0800158d 	.word	0x0800158d
 8001050:	20000168 	.word	0x20000168
 8001054:	0800a000 	.word	0x0800a000
 8001058:	08001751 	.word	0x08001751
 800105c:	2000016c 	.word	0x2000016c
 8001060:	0800a044 	.word	0x0800a044
 8001064:	20001498 	.word	0x20001498

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b090      	sub	sp, #64	@ 0x40
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	2228      	movs	r2, #40	@ 0x28
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f008 f9aa 	bl	80093d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001092:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010aa:	f107 0318 	add.w	r3, r7, #24
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 fb58 	bl	8004764 <HAL_RCC_OscConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x56>
  {
    Error_Handler();
 80010ba:	f000 fc27 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2302      	movs	r3, #2
 80010c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fdc6 	bl	8004c68 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80010e2:	f000 fc13 	bl	800190c <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3740      	adds	r7, #64	@ 0x40
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_I2C1_Init+0x50>)
 80010f6:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <MX_I2C1_Init+0x54>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_I2C1_Init+0x50>)
 80010fc:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x58>)
 80010fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_I2C1_Init+0x50>)
 800110e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001120:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <MX_I2C1_Init+0x50>)
 800112e:	f002 fae5 	bl	80036fc <HAL_I2C_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001138:	f000 fbe8 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000007c 	.word	0x2000007c
 8001144:	40005400 	.word	0x40005400
 8001148:	000186a0 	.word	0x000186a0

0800114c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <MX_USART1_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_USART1_UART_Init+0x4c>)
 8001184:	f003 fefe 	bl	8004f84 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f000 fbbd 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000d0 	.word	0x200000d0
 800119c:	40013800 	.word	0x40013800

080011a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <MX_USART2_UART_Init+0x50>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d8:	f003 fed4 	bl	8004f84 <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e2:	f000 fb93 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000118 	.word	0x20000118
 80011f0:	40004400 	.word	0x40004400

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b14      	ldr	r3, [pc, #80]	@ (800124c <MX_GPIO_Init+0x58>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a13      	ldr	r2, [pc, #76]	@ (800124c <MX_GPIO_Init+0x58>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <MX_GPIO_Init+0x58>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_GPIO_Init+0x58>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <MX_GPIO_Init+0x58>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <MX_GPIO_Init+0x58>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <MX_GPIO_Init+0x58>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a07      	ldr	r2, [pc, #28]	@ (800124c <MX_GPIO_Init+0x58>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b05      	ldr	r3, [pc, #20]	@ (800124c <MX_GPIO_Init+0x58>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40021000 	.word	0x40021000

08001250 <SystemInit_Modules>:

/**
 * @brief Initialize all modules
 */
void SystemInit_Modules(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    // Initialize BNO055 IMU
    if (BNO055_Init(&hbno055, &hi2c1) == BNO055_STATUS_OK) {
 8001254:	4930      	ldr	r1, [pc, #192]	@ (8001318 <SystemInit_Modules+0xc8>)
 8001256:	4831      	ldr	r0, [pc, #196]	@ (800131c <SystemInit_Modules+0xcc>)
 8001258:	f7ff f9e0 	bl	800061c <BNO055_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <SystemInit_Modules+0x28>
        DebugPrint("BNO055 initialized successfully\r\n");
 8001262:	482f      	ldr	r0, [pc, #188]	@ (8001320 <SystemInit_Modules+0xd0>)
 8001264:	f000 f876 	bl	8001354 <DebugPrint>
        system_status |= 0x01; // IMU OK
 8001268:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <SystemInit_Modules+0xd4>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <SystemInit_Modules+0xd4>)
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e009      	b.n	800128c <SystemInit_Modules+0x3c>
    } else {
        DebugPrint("BNO055 initialization failed\r\n");
 8001278:	482b      	ldr	r0, [pc, #172]	@ (8001328 <SystemInit_Modules+0xd8>)
 800127a:	f000 f86b 	bl	8001354 <DebugPrint>
        system_error |= 0x01; // IMU Error
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <SystemInit_Modules+0xdc>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <SystemInit_Modules+0xdc>)
 800128a:	701a      	strb	r2, [r3, #0]
    }
    
    // Initialize PN532 NFC/RFID
    if (PN532_Init(&hpn532, &hi2c1) == PN532_STATUS_OK) {
 800128c:	4922      	ldr	r1, [pc, #136]	@ (8001318 <SystemInit_Modules+0xc8>)
 800128e:	4828      	ldr	r0, [pc, #160]	@ (8001330 <SystemInit_Modules+0xe0>)
 8001290:	f001 faa4 	bl	80027dc <PN532_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <SystemInit_Modules+0x68>
        PN532_SetMode(&hpn532, PN532_MODE_NFC);
 800129a:	2100      	movs	r1, #0
 800129c:	4824      	ldr	r0, [pc, #144]	@ (8001330 <SystemInit_Modules+0xe0>)
 800129e:	f001 fae7 	bl	8002870 <PN532_SetMode>
        DebugPrint("PN532 initialized successfully\r\n");
 80012a2:	4824      	ldr	r0, [pc, #144]	@ (8001334 <SystemInit_Modules+0xe4>)
 80012a4:	f000 f856 	bl	8001354 <DebugPrint>
        system_status |= 0x02; // NFC OK
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <SystemInit_Modules+0xd4>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <SystemInit_Modules+0xd4>)
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e009      	b.n	80012cc <SystemInit_Modules+0x7c>
    } else {
        DebugPrint("PN532 initialization failed\r\n");
 80012b8:	481f      	ldr	r0, [pc, #124]	@ (8001338 <SystemInit_Modules+0xe8>)
 80012ba:	f000 f84b 	bl	8001354 <DebugPrint>
        system_error |= 0x02; // NFC Error
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <SystemInit_Modules+0xdc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <SystemInit_Modules+0xdc>)
 80012ca:	701a      	strb	r2, [r3, #0]
    }
    
    // Initialize Modbus slave
    if (Modbus_Init(&hmodbus, &huart2, 1) == MODBUS_STATUS_OK) {
 80012cc:	2201      	movs	r2, #1
 80012ce:	491b      	ldr	r1, [pc, #108]	@ (800133c <SystemInit_Modules+0xec>)
 80012d0:	481b      	ldr	r0, [pc, #108]	@ (8001340 <SystemInit_Modules+0xf0>)
 80012d2:	f000 fb21 	bl	8001918 <Modbus_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10a      	bne.n	80012f2 <SystemInit_Modules+0xa2>
        DebugPrint("Modbus slave initialized successfully\r\n");
 80012dc:	4819      	ldr	r0, [pc, #100]	@ (8001344 <SystemInit_Modules+0xf4>)
 80012de:	f000 f839 	bl	8001354 <DebugPrint>
        system_status |= 0x04; // Modbus OK
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <SystemInit_Modules+0xd4>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001324 <SystemInit_Modules+0xd4>)
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	e009      	b.n	8001306 <SystemInit_Modules+0xb6>
    } else {
        DebugPrint("Modbus slave initialization failed\r\n");
 80012f2:	4815      	ldr	r0, [pc, #84]	@ (8001348 <SystemInit_Modules+0xf8>)
 80012f4:	f000 f82e 	bl	8001354 <DebugPrint>
        system_error |= 0x04; // Modbus Error
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <SystemInit_Modules+0xdc>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <SystemInit_Modules+0xdc>)
 8001304:	701a      	strb	r2, [r3, #0]
    }
    
    sensors_initialized = true;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <SystemInit_Modules+0xfc>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
    DebugPrint("All modules initialized\r\n");
 800130c:	4810      	ldr	r0, [pc, #64]	@ (8001350 <SystemInit_Modules+0x100>)
 800130e:	f000 f821 	bl	8001354 <DebugPrint>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000007c 	.word	0x2000007c
 800131c:	20000194 	.word	0x20000194
 8001320:	08009dac 	.word	0x08009dac
 8001324:	2000140c 	.word	0x2000140c
 8001328:	08009dd0 	.word	0x08009dd0
 800132c:	2000140d 	.word	0x2000140d
 8001330:	20000170 	.word	0x20000170
 8001334:	08009df0 	.word	0x08009df0
 8001338:	08009e14 	.word	0x08009e14
 800133c:	20000118 	.word	0x20000118
 8001340:	200001dc 	.word	0x200001dc
 8001344:	08009e34 	.word	0x08009e34
 8001348:	08009e5c 	.word	0x08009e5c
 800134c:	2000140e 	.word	0x2000140e
 8001350:	08009e84 	.word	0x08009e84

08001354 <DebugPrint>:

/**
 * @brief Debug print function
 */
void DebugPrint(const char* format, ...)
{
 8001354:	b40f      	push	{r0, r1, r2, r3}
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	607b      	str	r3, [r7, #4]
    vsnprintf(debug_buffer, sizeof(debug_buffer), format, args);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	2180      	movs	r1, #128	@ 0x80
 8001368:	4809      	ldr	r0, [pc, #36]	@ (8001390 <DebugPrint+0x3c>)
 800136a:	f008 f813 	bl	8009394 <vsniprintf>
    va_end(args);
    
    HAL_UART_Transmit(&huart1, (uint8_t*)debug_buffer, strlen(debug_buffer), 100);
 800136e:	4808      	ldr	r0, [pc, #32]	@ (8001390 <DebugPrint+0x3c>)
 8001370:	f7fe feee 	bl	8000150 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29a      	uxth	r2, r3
 8001378:	2364      	movs	r3, #100	@ 0x64
 800137a:	4905      	ldr	r1, [pc, #20]	@ (8001390 <DebugPrint+0x3c>)
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <DebugPrint+0x40>)
 800137e:	f003 fe51 	bl	8005024 <HAL_UART_Transmit>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800138c:	b004      	add	sp, #16
 800138e:	4770      	bx	lr
 8001390:	20001410 	.word	0x20001410
 8001394:	200000d0 	.word	0x200000d0

08001398 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  // Initialize modules
  SystemInit_Modules();
 80013a0:	f7ff ff56 	bl	8001250 <SystemInit_Modules>
  
  DebugPrint("DAL Module Started (RTOS)\r\n");
 80013a4:	482b      	ldr	r0, [pc, #172]	@ (8001454 <StartDefaultTask+0xbc>)
 80013a6:	f7ff ffd5 	bl	8001354 <DebugPrint>
  DebugPrint("Firmware Version: v1.01\r\n");
 80013aa:	482b      	ldr	r0, [pc, #172]	@ (8001458 <StartDefaultTask+0xc0>)
 80013ac:	f7ff ffd2 	bl	8001354 <DebugPrint>
  DebugPrint("Hardware Version: v1.01\r\n");
 80013b0:	482a      	ldr	r0, [pc, #168]	@ (800145c <StartDefaultTask+0xc4>)
 80013b2:	f7ff ffcf 	bl	8001354 <DebugPrint>
  
  // Signal that initialization is complete
  osEventFlagsSet(systemEventsHandle, EVENT_SENSOR_DATA_READY);
 80013b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <StartDefaultTask+0xc8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fa01 	bl	80057c4 <osEventFlagsSet>
  
  /* Infinite loop */
  for(;;)
  {
    // Monitor system status and handle errors
    uint32_t events = osEventFlagsWait(systemEventsHandle, 
 80013c2:	4b27      	ldr	r3, [pc, #156]	@ (8001460 <StartDefaultTask+0xc8>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ca:	2200      	movs	r2, #0
 80013cc:	2108      	movs	r1, #8
 80013ce:	f004 fa6c 	bl	80058aa <osEventFlagsWait>
 80013d2:	60f8      	str	r0, [r7, #12]
                                      EVENT_SYSTEM_ERROR, 
                                      osFlagsWaitAny, 
                                      1000);
    
    if (events & EVENT_SYSTEM_ERROR) {
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d036      	beq.n	800144c <StartDefaultTask+0xb4>
      DebugPrint("System error detected, attempting recovery...\r\n");
 80013de:	4821      	ldr	r0, [pc, #132]	@ (8001464 <StartDefaultTask+0xcc>)
 80013e0:	f7ff ffb8 	bl	8001354 <DebugPrint>
      
      // Clear error flag
      osEventFlagsClear(systemEventsHandle, EVENT_SYSTEM_ERROR);
 80013e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <StartDefaultTask+0xc8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2108      	movs	r1, #8
 80013ea:	4618      	mov	r0, r3
 80013ec:	f004 fa2c 	bl	8005848 <osEventFlagsClear>
      
      // Attempt to reinitialize failed modules
      if (system_error & 0x01) {
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <StartDefaultTask+0xd0>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d010      	beq.n	800141e <StartDefaultTask+0x86>
        // Reinitialize IMU
        if (BNO055_Init(&hbno055, &hi2c1) == BNO055_STATUS_OK) {
 80013fc:	491b      	ldr	r1, [pc, #108]	@ (800146c <StartDefaultTask+0xd4>)
 80013fe:	481c      	ldr	r0, [pc, #112]	@ (8001470 <StartDefaultTask+0xd8>)
 8001400:	f7ff f90c 	bl	800061c <BNO055_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <StartDefaultTask+0x86>
          system_error &= ~0x01;
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <StartDefaultTask+0xd0>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <StartDefaultTask+0xd0>)
 8001416:	701a      	strb	r2, [r3, #0]
          DebugPrint("IMU recovery successful\r\n");
 8001418:	4816      	ldr	r0, [pc, #88]	@ (8001474 <StartDefaultTask+0xdc>)
 800141a:	f7ff ff9b 	bl	8001354 <DebugPrint>
        }
      }
      
      if (system_error & 0x02) {
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <StartDefaultTask+0xd0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d010      	beq.n	800144c <StartDefaultTask+0xb4>
        // Reinitialize NFC
        if (PN532_Init(&hpn532, &hi2c1) == PN532_STATUS_OK) {
 800142a:	4910      	ldr	r1, [pc, #64]	@ (800146c <StartDefaultTask+0xd4>)
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <StartDefaultTask+0xe0>)
 800142e:	f001 f9d5 	bl	80027dc <PN532_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <StartDefaultTask+0xb4>
          system_error &= ~0x02;
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <StartDefaultTask+0xd0>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	f023 0302 	bic.w	r3, r3, #2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <StartDefaultTask+0xd0>)
 8001444:	701a      	strb	r2, [r3, #0]
          DebugPrint("NFC recovery successful\r\n");
 8001446:	480d      	ldr	r0, [pc, #52]	@ (800147c <StartDefaultTask+0xe4>)
 8001448:	f7ff ff84 	bl	8001354 <DebugPrint>
        }
      }
    }
    
    osDelay(100);
 800144c:	2064      	movs	r0, #100	@ 0x64
 800144e:	f004 f95f 	bl	8005710 <osDelay>
  {
 8001452:	e7b6      	b.n	80013c2 <StartDefaultTask+0x2a>
 8001454:	08009eb4 	.word	0x08009eb4
 8001458:	08009d74 	.word	0x08009d74
 800145c:	08009d90 	.word	0x08009d90
 8001460:	20001498 	.word	0x20001498
 8001464:	08009ed0 	.word	0x08009ed0
 8001468:	2000140d 	.word	0x2000140d
 800146c:	2000007c 	.word	0x2000007c
 8001470:	20000194 	.word	0x20000194
 8001474:	08009f00 	.word	0x08009f00
 8001478:	20000170 	.word	0x20000170
 800147c:	08009f1c 	.word	0x08009f1c

08001480 <StartModbusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModbusTask */
void StartModbusTask(void *argument)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModbusTask */
  // Wait for system initialization
  osEventFlagsWait(systemEventsHandle, EVENT_SENSOR_DATA_READY, osFlagsWaitAny, osWaitForever);
 8001488:	4b38      	ldr	r3, [pc, #224]	@ (800156c <StartModbusTask+0xec>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	2200      	movs	r2, #0
 8001492:	2101      	movs	r1, #1
 8001494:	f004 fa09 	bl	80058aa <osEventFlagsWait>
  
  DebugPrint("Modbus Task Started\r\n");
 8001498:	4835      	ldr	r0, [pc, #212]	@ (8001570 <StartModbusTask+0xf0>)
 800149a:	f7ff ff5b 	bl	8001354 <DebugPrint>
  
  /* Infinite loop */
  for(;;)
  {
    // Wait for Modbus request or timeout
    uint32_t events = osEventFlagsWait(systemEventsHandle, 
 800149e:	4b33      	ldr	r3, [pc, #204]	@ (800156c <StartModbusTask+0xec>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	230a      	movs	r3, #10
 80014a4:	2200      	movs	r2, #0
 80014a6:	2104      	movs	r1, #4
 80014a8:	f004 f9ff 	bl	80058aa <osEventFlagsWait>
 80014ac:	60f8      	str	r0, [r7, #12]
                                      EVENT_MODBUS_REQUEST, 
                                      osFlagsWaitAny, 
                                      10); // 10ms timeout
    
    // Check if Modbus request event was received
    if (events & EVENT_MODBUS_REQUEST) {
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <StartModbusTask+0x44>
      // Clear the event flag
      osEventFlagsClear(systemEventsHandle, EVENT_MODBUS_REQUEST);
 80014b8:	4b2c      	ldr	r3, [pc, #176]	@ (800156c <StartModbusTask+0xec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2104      	movs	r1, #4
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 f9c2 	bl	8005848 <osEventFlagsClear>
    }
    
    // Process Modbus communication
    if (sensors_initialized) {
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <StartModbusTask+0xf4>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d04a      	beq.n	8001562 <StartModbusTask+0xe2>
      // Acquire data mutex before updating system registers
      if (osMutexAcquire(dataMutexHandle, 10) == osOK) {
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <StartModbusTask+0xf8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	210a      	movs	r1, #10
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fad4 	bl	8005a80 <osMutexAcquire>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d141      	bne.n	8001562 <StartModbusTask+0xe2>
        // Update system registers
        Modbus_SetRegisterValue(&hmodbus, REG_SYSTEM_STATUS, system_status);
 80014de:	4b27      	ldr	r3, [pc, #156]	@ (800157c <StartModbusTask+0xfc>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f240 1107 	movw	r1, #263	@ 0x107
 80014e8:	4825      	ldr	r0, [pc, #148]	@ (8001580 <StartModbusTask+0x100>)
 80014ea:	f000 fcdb 	bl	8001ea4 <Modbus_SetRegisterValue>
        Modbus_SetRegisterValue(&hmodbus, REG_SYSTEM_ERROR, system_error);
 80014ee:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <StartModbusTask+0x104>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80014f8:	4821      	ldr	r0, [pc, #132]	@ (8001580 <StartModbusTask+0x100>)
 80014fa:	f000 fcd3 	bl	8001ea4 <Modbus_SetRegisterValue>
        
        // Process Modbus communication
        Modbus_Process(&hmodbus);
 80014fe:	4820      	ldr	r0, [pc, #128]	@ (8001580 <StartModbusTask+0x100>)
 8001500:	f000 fd7f 	bl	8002002 <Modbus_Process>
        
        // Handle special commands
        uint16_t reset_cmd;
        if (Modbus_GetRegisterValue(&hmodbus, REG_RESET_ERROR_CMD, &reset_cmd) == MODBUS_STATUS_OK) {
 8001504:	f107 030a 	add.w	r3, r7, #10
 8001508:	461a      	mov	r2, r3
 800150a:	f240 1109 	movw	r1, #265	@ 0x109
 800150e:	481c      	ldr	r0, [pc, #112]	@ (8001580 <StartModbusTask+0x100>)
 8001510:	f000 fd1e 	bl	8001f50 <Modbus_GetRegisterValue>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d11e      	bne.n	8001558 <StartModbusTask+0xd8>
          if (reset_cmd == 0x0001) {
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d11b      	bne.n	8001558 <StartModbusTask+0xd8>
            // Reset all error flags
            system_error = 0;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <StartModbusTask+0x104>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
            Modbus_SetRegisterValue(&hmodbus, REG_IMU_ERROR, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	210a      	movs	r1, #10
 800152a:	4815      	ldr	r0, [pc, #84]	@ (8001580 <StartModbusTask+0x100>)
 800152c:	f000 fcba 	bl	8001ea4 <Modbus_SetRegisterValue>
            Modbus_SetRegisterValue(&hmodbus, REG_PN532_ERROR, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2123      	movs	r1, #35	@ 0x23
 8001534:	4812      	ldr	r0, [pc, #72]	@ (8001580 <StartModbusTask+0x100>)
 8001536:	f000 fcb5 	bl	8001ea4 <Modbus_SetRegisterValue>
            Modbus_SetRegisterValue(&hmodbus, REG_SYSTEM_ERROR, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8001540:	480f      	ldr	r0, [pc, #60]	@ (8001580 <StartModbusTask+0x100>)
 8001542:	f000 fcaf 	bl	8001ea4 <Modbus_SetRegisterValue>
            Modbus_SetRegisterValue(&hmodbus, REG_RESET_ERROR_CMD, 0); // Clear command
 8001546:	2200      	movs	r2, #0
 8001548:	f240 1109 	movw	r1, #265	@ 0x109
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <StartModbusTask+0x100>)
 800154e:	f000 fca9 	bl	8001ea4 <Modbus_SetRegisterValue>
            
            DebugPrint("Error flags reset\r\n");
 8001552:	480d      	ldr	r0, [pc, #52]	@ (8001588 <StartModbusTask+0x108>)
 8001554:	f7ff fefe 	bl	8001354 <DebugPrint>
          }
        }
        
        osMutexRelease(dataMutexHandle);
 8001558:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <StartModbusTask+0xf8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fada 	bl	8005b16 <osMutexRelease>
      }
    }
    
    osDelay(1); // Small delay to prevent busy waiting
 8001562:	2001      	movs	r0, #1
 8001564:	f004 f8d4 	bl	8005710 <osDelay>
  {
 8001568:	e799      	b.n	800149e <StartModbusTask+0x1e>
 800156a:	bf00      	nop
 800156c:	20001498 	.word	0x20001498
 8001570:	08009f38 	.word	0x08009f38
 8001574:	2000140e 	.word	0x2000140e
 8001578:	20001490 	.word	0x20001490
 800157c:	2000140c 	.word	0x2000140c
 8001580:	200001dc 	.word	0x200001dc
 8001584:	2000140d 	.word	0x2000140d
 8001588:	08009ea0 	.word	0x08009ea0

0800158c <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void *argument)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  // Wait for system initialization
  osEventFlagsWait(systemEventsHandle, EVENT_SENSOR_DATA_READY, osFlagsWaitAny, osWaitForever);
 8001594:	4b67      	ldr	r3, [pc, #412]	@ (8001734 <StartSensorTask+0x1a8>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	2200      	movs	r2, #0
 800159e:	2101      	movs	r1, #1
 80015a0:	f004 f983 	bl	80058aa <osEventFlagsWait>
  
  DebugPrint("Sensor Task Started\r\n");
 80015a4:	4864      	ldr	r0, [pc, #400]	@ (8001738 <StartSensorTask+0x1ac>)
 80015a6:	f7ff fed5 	bl	8001354 <DebugPrint>
  
  /* Infinite loop */
  for(;;)
  {
    if (sensors_initialized) {
 80015aa:	4b64      	ldr	r3, [pc, #400]	@ (800173c <StartSensorTask+0x1b0>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80bc 	beq.w	800172c <StartSensorTask+0x1a0>
      // Acquire data mutex before updating sensor data
      if (osMutexAcquire(dataMutexHandle, 100) == osOK) {
 80015b4:	4b62      	ldr	r3, [pc, #392]	@ (8001740 <StartSensorTask+0x1b4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2164      	movs	r1, #100	@ 0x64
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 fa60 	bl	8005a80 <osMutexAcquire>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 80b2 	bne.w	800172c <StartSensorTask+0x1a0>
        // Read all sensor data from BNO055
        if (BNO055_ReadAllSensors(&hbno055) == BNO055_STATUS_OK) {
 80015c8:	485e      	ldr	r0, [pc, #376]	@ (8001744 <StartSensorTask+0x1b8>)
 80015ca:	f7ff faf7 	bl	8000bbc <BNO055_ReadAllSensors>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f040 8094 	bne.w	80016fe <StartSensorTask+0x172>
          BNO055_Vector_t *accel = BNO055_GetAccel(&hbno055);
 80015d6:	485b      	ldr	r0, [pc, #364]	@ (8001744 <StartSensorTask+0x1b8>)
 80015d8:	f7ff fbc7 	bl	8000d6a <BNO055_GetAccel>
 80015dc:	61f8      	str	r0, [r7, #28]
          BNO055_Vector_t *gyro = BNO055_GetGyro(&hbno055);
 80015de:	4859      	ldr	r0, [pc, #356]	@ (8001744 <StartSensorTask+0x1b8>)
 80015e0:	f7ff fbd3 	bl	8000d8a <BNO055_GetGyro>
 80015e4:	61b8      	str	r0, [r7, #24]
          BNO055_Vector_t *mag = BNO055_GetMag(&hbno055);
 80015e6:	4857      	ldr	r0, [pc, #348]	@ (8001744 <StartSensorTask+0x1b8>)
 80015e8:	f7ff fbdf 	bl	8000daa <BNO055_GetMag>
 80015ec:	6178      	str	r0, [r7, #20]
          
          // Update Modbus registers
          Modbus_SetRegisterValue(&hmodbus, REG_ACCEL_X, (uint16_t)accel->x);
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	2100      	movs	r1, #0
 80015fa:	4853      	ldr	r0, [pc, #332]	@ (8001748 <StartSensorTask+0x1bc>)
 80015fc:	f000 fc52 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_ACCEL_Y, (uint16_t)accel->y);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	2101      	movs	r1, #1
 800160c:	484e      	ldr	r0, [pc, #312]	@ (8001748 <StartSensorTask+0x1bc>)
 800160e:	f000 fc49 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_ACCEL_Z, (uint16_t)accel->z);
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001618:	b29b      	uxth	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	2102      	movs	r1, #2
 800161e:	484a      	ldr	r0, [pc, #296]	@ (8001748 <StartSensorTask+0x1bc>)
 8001620:	f000 fc40 	bl	8001ea4 <Modbus_SetRegisterValue>
          
          Modbus_SetRegisterValue(&hmodbus, REG_GYRO_X, (uint16_t)gyro->x);
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	2103      	movs	r1, #3
 8001630:	4845      	ldr	r0, [pc, #276]	@ (8001748 <StartSensorTask+0x1bc>)
 8001632:	f000 fc37 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_GYRO_Y, (uint16_t)gyro->y);
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800163c:	b29b      	uxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	2104      	movs	r1, #4
 8001642:	4841      	ldr	r0, [pc, #260]	@ (8001748 <StartSensorTask+0x1bc>)
 8001644:	f000 fc2e 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_GYRO_Z, (uint16_t)gyro->z);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	2105      	movs	r1, #5
 8001654:	483c      	ldr	r0, [pc, #240]	@ (8001748 <StartSensorTask+0x1bc>)
 8001656:	f000 fc25 	bl	8001ea4 <Modbus_SetRegisterValue>
          
          Modbus_SetRegisterValue(&hmodbus, REG_MAG_X, (uint16_t)mag->x);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	b29b      	uxth	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	2106      	movs	r1, #6
 8001666:	4838      	ldr	r0, [pc, #224]	@ (8001748 <StartSensorTask+0x1bc>)
 8001668:	f000 fc1c 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_MAG_Y, (uint16_t)mag->y);
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	2107      	movs	r1, #7
 8001678:	4833      	ldr	r0, [pc, #204]	@ (8001748 <StartSensorTask+0x1bc>)
 800167a:	f000 fc13 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_MAG_Z, (uint16_t)mag->z);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	2108      	movs	r1, #8
 800168a:	482f      	ldr	r0, [pc, #188]	@ (8001748 <StartSensorTask+0x1bc>)
 800168c:	f000 fc0a 	bl	8001ea4 <Modbus_SetRegisterValue>
          
          // Update IMU status
          BNO055_CalibStatus_t *calib = BNO055_GetCalibStatus(&hbno055);
 8001690:	482c      	ldr	r0, [pc, #176]	@ (8001744 <StartSensorTask+0x1b8>)
 8001692:	f7ff fb9a 	bl	8000dca <BNO055_GetCalibStatus>
 8001696:	6138      	str	r0, [r7, #16]
          uint16_t imu_status = (calib->system << 6) | (calib->gyro << 4) | 
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b21b      	sxth	r3, r3
 800169e:	019b      	lsls	r3, r3, #6
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21a      	sxth	r2, r3
                               (calib->accel << 2) | calib->mag;
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	789b      	ldrb	r3, [r3, #2]
          uint16_t imu_status = (calib->system << 6) | (calib->gyro << 4) | 
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21a      	sxth	r2, r3
                               (calib->accel << 2) | calib->mag;
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	78db      	ldrb	r3, [r3, #3]
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
          uint16_t imu_status = (calib->system << 6) | (calib->gyro << 4) | 
 80016c8:	81fb      	strh	r3, [r7, #14]
          Modbus_SetRegisterValue(&hmodbus, REG_IMU_STATUS, imu_status);
 80016ca:	89fb      	ldrh	r3, [r7, #14]
 80016cc:	461a      	mov	r2, r3
 80016ce:	2109      	movs	r1, #9
 80016d0:	481d      	ldr	r0, [pc, #116]	@ (8001748 <StartSensorTask+0x1bc>)
 80016d2:	f000 fbe7 	bl	8001ea4 <Modbus_SetRegisterValue>
          
          // Update error status
          uint8_t error_code = BNO055_GetErrorCode(&hbno055);
 80016d6:	481b      	ldr	r0, [pc, #108]	@ (8001744 <StartSensorTask+0x1b8>)
 80016d8:	f7ff fb87 	bl	8000dea <BNO055_GetErrorCode>
 80016dc:	4603      	mov	r3, r0
 80016de:	737b      	strb	r3, [r7, #13]
          Modbus_SetRegisterValue(&hmodbus, REG_IMU_ERROR, error_code);
 80016e0:	7b7b      	ldrb	r3, [r7, #13]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	210a      	movs	r1, #10
 80016e8:	4817      	ldr	r0, [pc, #92]	@ (8001748 <StartSensorTask+0x1bc>)
 80016ea:	f000 fbdb 	bl	8001ea4 <Modbus_SetRegisterValue>
          
          // Clear IMU error flag if successful
          system_error &= ~0x01;
 80016ee:	4b17      	ldr	r3, [pc, #92]	@ (800174c <StartSensorTask+0x1c0>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <StartSensorTask+0x1c0>)
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	e011      	b.n	8001722 <StartSensorTask+0x196>
          
        } else {
          system_error |= 0x01; // IMU communication error
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <StartSensorTask+0x1c0>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <StartSensorTask+0x1c0>)
 800170a:	701a      	strb	r2, [r3, #0]
          Modbus_SetRegisterValue(&hmodbus, REG_IMU_ERROR, 0x01);
 800170c:	2201      	movs	r2, #1
 800170e:	210a      	movs	r1, #10
 8001710:	480d      	ldr	r0, [pc, #52]	@ (8001748 <StartSensorTask+0x1bc>)
 8001712:	f000 fbc7 	bl	8001ea4 <Modbus_SetRegisterValue>
          osEventFlagsSet(systemEventsHandle, EVENT_SYSTEM_ERROR);
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <StartSensorTask+0x1a8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2108      	movs	r1, #8
 800171c:	4618      	mov	r0, r3
 800171e:	f004 f851 	bl	80057c4 <osEventFlagsSet>
        }
        
        osMutexRelease(dataMutexHandle);
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <StartSensorTask+0x1b4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f004 f9f5 	bl	8005b16 <osMutexRelease>
      }
    }
    
    // Read sensor data every 100ms
    osDelay(100);
 800172c:	2064      	movs	r0, #100	@ 0x64
 800172e:	f003 ffef 	bl	8005710 <osDelay>
    if (sensors_initialized) {
 8001732:	e73a      	b.n	80015aa <StartSensorTask+0x1e>
 8001734:	20001498 	.word	0x20001498
 8001738:	08009f50 	.word	0x08009f50
 800173c:	2000140e 	.word	0x2000140e
 8001740:	20001490 	.word	0x20001490
 8001744:	20000194 	.word	0x20000194
 8001748:	200001dc 	.word	0x200001dc
 800174c:	2000140d 	.word	0x2000140d

08001750 <StartNfcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNfcTask */
void StartNfcTask(void *argument)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNfcTask */
  // Wait for system initialization
  osEventFlagsWait(systemEventsHandle, EVENT_SENSOR_DATA_READY, osFlagsWaitAny, osWaitForever);
 8001758:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <StartNfcTask+0x1a0>)
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	2200      	movs	r2, #0
 8001762:	2101      	movs	r1, #1
 8001764:	f004 f8a1 	bl	80058aa <osEventFlagsWait>
  
  DebugPrint("NFC Task Started\r\n");
 8001768:	4862      	ldr	r0, [pc, #392]	@ (80018f4 <StartNfcTask+0x1a4>)
 800176a:	f7ff fdf3 	bl	8001354 <DebugPrint>
  
  /* Infinite loop */
  for(;;)
  {
    if (sensors_initialized) {
 800176e:	4b62      	ldr	r3, [pc, #392]	@ (80018f8 <StartNfcTask+0x1a8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80b7 	beq.w	80018e6 <StartNfcTask+0x196>
      // Acquire data mutex before updating NFC data
      if (osMutexAcquire(dataMutexHandle, 100) == osOK) {
 8001778:	4b60      	ldr	r3, [pc, #384]	@ (80018fc <StartNfcTask+0x1ac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2164      	movs	r1, #100	@ 0x64
 800177e:	4618      	mov	r0, r3
 8001780:	f004 f97e 	bl	8005a80 <osMutexAcquire>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 80ad 	bne.w	80018e6 <StartNfcTask+0x196>
        // Try to read card/tag
        PN532_Status_t status = PN532_ReadCard(&hpn532);
 800178c:	485c      	ldr	r0, [pc, #368]	@ (8001900 <StartNfcTask+0x1b0>)
 800178e:	f001 f90a 	bl	80029a6 <PN532_ReadCard>
 8001792:	4603      	mov	r3, r0
 8001794:	75fb      	strb	r3, [r7, #23]
        
        if (status == PN532_STATUS_OK && PN532_IsCardPresent(&hpn532)) {
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d158      	bne.n	800184e <StartNfcTask+0xfe>
 800179c:	4858      	ldr	r0, [pc, #352]	@ (8001900 <StartNfcTask+0x1b0>)
 800179e:	f001 f984 	bl	8002aaa <PN532_IsCardPresent>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d052      	beq.n	800184e <StartNfcTask+0xfe>
          // Card detected
          uint8_t *uid = PN532_GetCardUID(&hpn532);
 80017a8:	4855      	ldr	r0, [pc, #340]	@ (8001900 <StartNfcTask+0x1b0>)
 80017aa:	f001 f99a 	bl	8002ae2 <PN532_GetCardUID>
 80017ae:	6138      	str	r0, [r7, #16]
          uint8_t card_type = PN532_GetCardType(&hpn532);
 80017b0:	4853      	ldr	r0, [pc, #332]	@ (8001900 <StartNfcTask+0x1b0>)
 80017b2:	f001 f9a6 	bl	8002b02 <PN532_GetCardType>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]
          
          // Update Modbus registers
          // Store first 4 bytes of UID as two 16-bit registers
          uint16_t uid_low = (uid[1] << 8) | uid[0];
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	3301      	adds	r3, #1
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	81bb      	strh	r3, [r7, #12]
          uint16_t uid_high = (uid[3] << 8) | uid[2];
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	3303      	adds	r3, #3
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b21a      	sxth	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	3302      	adds	r3, #2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	817b      	strh	r3, [r7, #10]
          
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_DATA_LOW, uid_low);
 80017ec:	89bb      	ldrh	r3, [r7, #12]
 80017ee:	461a      	mov	r2, r3
 80017f0:	2120      	movs	r1, #32
 80017f2:	4844      	ldr	r0, [pc, #272]	@ (8001904 <StartNfcTask+0x1b4>)
 80017f4:	f000 fb56 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_DATA_HIGH, uid_high);
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	461a      	mov	r2, r3
 80017fc:	2121      	movs	r1, #33	@ 0x21
 80017fe:	4841      	ldr	r0, [pc, #260]	@ (8001904 <StartNfcTask+0x1b4>)
 8001800:	f000 fb50 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_CARD_TYPE, card_type);
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	b29b      	uxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	2124      	movs	r1, #36	@ 0x24
 800180c:	483d      	ldr	r0, [pc, #244]	@ (8001904 <StartNfcTask+0x1b4>)
 800180e:	f000 fb49 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_STATUS, 0x01); // Card present
 8001812:	2201      	movs	r2, #1
 8001814:	2122      	movs	r1, #34	@ 0x22
 8001816:	483b      	ldr	r0, [pc, #236]	@ (8001904 <StartNfcTask+0x1b4>)
 8001818:	f000 fb44 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_ERROR, 0x00); // No error
 800181c:	2200      	movs	r2, #0
 800181e:	2123      	movs	r1, #35	@ 0x23
 8001820:	4838      	ldr	r0, [pc, #224]	@ (8001904 <StartNfcTask+0x1b4>)
 8001822:	f000 fb3f 	bl	8001ea4 <Modbus_SetRegisterValue>
          
          // Store full UID in card UID register (first 2 bytes)
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_CARD_UID, uid_low);
 8001826:	89bb      	ldrh	r3, [r7, #12]
 8001828:	461a      	mov	r2, r3
 800182a:	2125      	movs	r1, #37	@ 0x25
 800182c:	4835      	ldr	r0, [pc, #212]	@ (8001904 <StartNfcTask+0x1b4>)
 800182e:	f000 fb39 	bl	8001ea4 <Modbus_SetRegisterValue>
          
          // Clear NFC error flag
          system_error &= ~0x02;
 8001832:	4b35      	ldr	r3, [pc, #212]	@ (8001908 <StartNfcTask+0x1b8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <StartNfcTask+0x1b8>)
 800183e:	701a      	strb	r2, [r3, #0]
          
          // Set NFC data ready event
          osEventFlagsSet(systemEventsHandle, EVENT_NFC_DATA_READY);
 8001840:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <StartNfcTask+0x1a0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2102      	movs	r1, #2
 8001846:	4618      	mov	r0, r3
 8001848:	f003 ffbc 	bl	80057c4 <osEventFlagsSet>
        if (status == PN532_STATUS_OK && PN532_IsCardPresent(&hpn532)) {
 800184c:	e046      	b.n	80018dc <StartNfcTask+0x18c>
          
        } else if (status == PN532_STATUS_NO_CARD) {
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d125      	bne.n	80018a0 <StartNfcTask+0x150>
          // No card detected
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_DATA_LOW, 0x0000);
 8001854:	2200      	movs	r2, #0
 8001856:	2120      	movs	r1, #32
 8001858:	482a      	ldr	r0, [pc, #168]	@ (8001904 <StartNfcTask+0x1b4>)
 800185a:	f000 fb23 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_DATA_HIGH, 0x0000);
 800185e:	2200      	movs	r2, #0
 8001860:	2121      	movs	r1, #33	@ 0x21
 8001862:	4828      	ldr	r0, [pc, #160]	@ (8001904 <StartNfcTask+0x1b4>)
 8001864:	f000 fb1e 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_CARD_TYPE, 0x00);
 8001868:	2200      	movs	r2, #0
 800186a:	2124      	movs	r1, #36	@ 0x24
 800186c:	4825      	ldr	r0, [pc, #148]	@ (8001904 <StartNfcTask+0x1b4>)
 800186e:	f000 fb19 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_STATUS, 0x00); // No card
 8001872:	2200      	movs	r2, #0
 8001874:	2122      	movs	r1, #34	@ 0x22
 8001876:	4823      	ldr	r0, [pc, #140]	@ (8001904 <StartNfcTask+0x1b4>)
 8001878:	f000 fb14 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_ERROR, 0x00); // No error
 800187c:	2200      	movs	r2, #0
 800187e:	2123      	movs	r1, #35	@ 0x23
 8001880:	4820      	ldr	r0, [pc, #128]	@ (8001904 <StartNfcTask+0x1b4>)
 8001882:	f000 fb0f 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_CARD_UID, 0x0000);
 8001886:	2200      	movs	r2, #0
 8001888:	2125      	movs	r1, #37	@ 0x25
 800188a:	481e      	ldr	r0, [pc, #120]	@ (8001904 <StartNfcTask+0x1b4>)
 800188c:	f000 fb0a 	bl	8001ea4 <Modbus_SetRegisterValue>
          
          // Clear NFC error flag
          system_error &= ~0x02;
 8001890:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <StartNfcTask+0x1b8>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f023 0302 	bic.w	r3, r3, #2
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <StartNfcTask+0x1b8>)
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e01d      	b.n	80018dc <StartNfcTask+0x18c>
          
        } else {
          // Communication error
          system_error |= 0x02; // NFC communication error
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <StartNfcTask+0x1b8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <StartNfcTask+0x1b8>)
 80018ac:	701a      	strb	r2, [r3, #0]
          uint8_t error_code = PN532_GetErrorCode(&hpn532);
 80018ae:	4814      	ldr	r0, [pc, #80]	@ (8001900 <StartNfcTask+0x1b0>)
 80018b0:	f001 f937 	bl	8002b22 <PN532_GetErrorCode>
 80018b4:	4603      	mov	r3, r0
 80018b6:	727b      	strb	r3, [r7, #9]
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_STATUS, 0x00); // No card
 80018b8:	2200      	movs	r2, #0
 80018ba:	2122      	movs	r1, #34	@ 0x22
 80018bc:	4811      	ldr	r0, [pc, #68]	@ (8001904 <StartNfcTask+0x1b4>)
 80018be:	f000 faf1 	bl	8001ea4 <Modbus_SetRegisterValue>
          Modbus_SetRegisterValue(&hmodbus, REG_PN532_ERROR, error_code);
 80018c2:	7a7b      	ldrb	r3, [r7, #9]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	2123      	movs	r1, #35	@ 0x23
 80018ca:	480e      	ldr	r0, [pc, #56]	@ (8001904 <StartNfcTask+0x1b4>)
 80018cc:	f000 faea 	bl	8001ea4 <Modbus_SetRegisterValue>
          osEventFlagsSet(systemEventsHandle, EVENT_SYSTEM_ERROR);
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <StartNfcTask+0x1a0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2108      	movs	r1, #8
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 ff74 	bl	80057c4 <osEventFlagsSet>
        }
        
        osMutexRelease(dataMutexHandle);
 80018dc:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <StartNfcTask+0x1ac>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 f918 	bl	8005b16 <osMutexRelease>
      }
    }
    
    // Read NFC data every 500ms
    osDelay(500);
 80018e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018ea:	f003 ff11 	bl	8005710 <osDelay>
    if (sensors_initialized) {
 80018ee:	e73e      	b.n	800176e <StartNfcTask+0x1e>
 80018f0:	20001498 	.word	0x20001498
 80018f4:	08009f68 	.word	0x08009f68
 80018f8:	2000140e 	.word	0x2000140e
 80018fc:	20001490 	.word	0x20001490
 8001900:	20000170 	.word	0x20000170
 8001904:	200001dc 	.word	0x200001dc
 8001908:	2000140d 	.word	0x2000140d

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <Error_Handler+0x8>

08001918 <Modbus_Init>:

/**
 * @brief Initialize Modbus slave
 */
Modbus_Status_t Modbus_Init(Modbus_Handle_t *hmodbus, UART_HandleTypeDef *huart, uint8_t slave_address)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	4613      	mov	r3, r2
 8001924:	71fb      	strb	r3, [r7, #7]
    if (!hmodbus || !huart) return MODBUS_STATUS_ERROR;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <Modbus_Init+0x1a>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <Modbus_Init+0x1e>
 8001932:	2301      	movs	r3, #1
 8001934:	e085      	b.n	8001a42 <Modbus_Init+0x12a>
    
    // Initialize handle
    hmodbus->huart = huart;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	601a      	str	r2, [r3, #0]
    hmodbus->slave_address = slave_address;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	711a      	strb	r2, [r3, #4]
    hmodbus->baudrate = 115200; // Default
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001948:	609a      	str	r2, [r3, #8]
    hmodbus->parity = 0; // None
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	731a      	strb	r2, [r3, #12]
    hmodbus->stop_bits = 1;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	735a      	strb	r2, [r3, #13]
    
    // Clear buffers
    memset(hmodbus->rx_buffer, 0, sizeof(hmodbus->rx_buffer));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	330e      	adds	r3, #14
 800195a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f007 fd35 	bl	80093d0 <memset>
    memset(hmodbus->tx_buffer, 0, sizeof(hmodbus->tx_buffer));
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800196c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f007 fd2c 	bl	80093d0 <memset>
    hmodbus->rx_length = 0;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
    hmodbus->tx_length = 0;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    
    // Clear registers
    memset(hmodbus->holding_registers, 0, sizeof(hmodbus->holding_registers));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f203 2312 	addw	r3, r3, #530	@ 0x212
 800198e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f007 fd1b 	bl	80093d0 <memset>
    memset(hmodbus->input_registers, 0, sizeof(hmodbus->input_registers));
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f203 4312 	addw	r3, r3, #1042	@ 0x412
 80019a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f007 fd12 	bl	80093d0 <memset>
    memset(hmodbus->register_map, 0, sizeof(hmodbus->register_map));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 80019b2:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f007 fd09 	bl	80093d0 <memset>
    hmodbus->register_count = 0;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c4:	2200      	movs	r2, #0
 80019c6:	f8a3 2214 	strh.w	r2, [r3, #532]	@ 0x214
    
    // Initialize status
    hmodbus->status = MODBUS_STATUS_OK;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
    hmodbus->frame_count = 0;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019dc:	461a      	mov	r2, r3
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
    hmodbus->error_count = 0;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ea:	461a      	mov	r2, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    hmodbus->exception_count = 0;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019f8:	461a      	mov	r2, r3
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
    hmodbus->last_activity_time = 0;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a06:	461a      	mov	r2, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
    
    // Initialize communication state
    hmodbus->frame_ready = false;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
    hmodbus->response_pending = false;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    hmodbus->last_char_time = 0;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c2 322c 	str.w	r3, [r2, #556]	@ 0x22c
    
    // Setup register mapping
    Modbus_RegisterMapping(hmodbus);
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 f808 	bl	8001a4a <Modbus_RegisterMapping>
    
    // Start receiving
    return Modbus_StartReceive(hmodbus);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fb01 	bl	8002042 <Modbus_StartReceive>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <Modbus_RegisterMapping>:

/**
 * @brief Setup register mapping
 */
Modbus_Status_t Modbus_RegisterMapping(Modbus_Handle_t *hmodbus)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af02      	add	r7, sp, #8
 8001a50:	6078      	str	r0, [r7, #4]
    if (!hmodbus) return MODBUS_STATUS_ERROR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <Modbus_RegisterMapping+0x12>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e1a4      	b.n	8001da6 <Modbus_RegisterMapping+0x35c>
    
    // uint16_t reg_index = 0; // Reserved for future register indexing
    
    // IMU Input Registers (Read-only)
    Modbus_AddRegister(hmodbus, REG_ACCEL_X, &hmodbus->input_registers[REG_ACCEL_X], 
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f203 4212 	addw	r2, r3, #1042	@ 0x412
 8001a62:	2300      	movs	r3, #0
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2301      	movs	r3, #1
 8001a68:	2100      	movs	r1, #0
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f99f 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_ACCEL_Y, &hmodbus->input_registers[REG_ACCEL_Y], 
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f203 4214 	addw	r2, r3, #1044	@ 0x414
 8001a76:	2300      	movs	r3, #0
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f995 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_ACCEL_Z, &hmodbus->input_registers[REG_ACCEL_Z], 
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f203 4216 	addw	r2, r3, #1046	@ 0x416
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	2102      	movs	r1, #2
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f98b 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_GYRO_X, &hmodbus->input_registers[REG_GYRO_X], 
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f981 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_GYRO_Y, &hmodbus->input_registers[REG_GYRO_Y], 
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f203 421a 	addw	r2, r3, #1050	@ 0x41a
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2104      	movs	r1, #4
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f977 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_GYRO_Z, &hmodbus->input_registers[REG_GYRO_Z], 
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f203 421c 	addw	r2, r3, #1052	@ 0x41c
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	2105      	movs	r1, #5
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f96d 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_MAG_X, &hmodbus->input_registers[REG_MAG_X], 
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f203 421e 	addw	r2, r3, #1054	@ 0x41e
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	2106      	movs	r1, #6
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f963 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_MAG_Y, &hmodbus->input_registers[REG_MAG_Y], 
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f503 6284 	add.w	r2, r3, #1056	@ 0x420
 8001aee:	2300      	movs	r3, #0
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2107      	movs	r1, #7
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f959 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_MAG_Z, &hmodbus->input_registers[REG_MAG_Z], 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f203 4222 	addw	r2, r3, #1058	@ 0x422
 8001b02:	2300      	movs	r3, #0
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2301      	movs	r3, #1
 8001b08:	2108      	movs	r1, #8
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f94f 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_IMU_STATUS, &hmodbus->input_registers[REG_IMU_STATUS], 
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f203 4224 	addw	r2, r3, #1060	@ 0x424
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	2109      	movs	r1, #9
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f945 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_IMU_ERROR, &hmodbus->input_registers[REG_IMU_ERROR], 
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f203 4226 	addw	r2, r3, #1062	@ 0x426
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	210a      	movs	r1, #10
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f93b 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    
    // Digital Input Registers (Read-only)
    Modbus_AddRegister(hmodbus, REG_DI_1, &hmodbus->input_registers[REG_DI_1], 
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	210b      	movs	r1, #11
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f931 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_DI_2, &hmodbus->input_registers[REG_DI_2], 
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f203 422a 	addw	r2, r3, #1066	@ 0x42a
 8001b52:	2300      	movs	r3, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2301      	movs	r3, #1
 8001b58:	210c      	movs	r1, #12
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f927 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_DI_3, &hmodbus->input_registers[REG_DI_3], 
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f203 422c 	addw	r2, r3, #1068	@ 0x42c
 8001b66:	2300      	movs	r3, #0
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	210d      	movs	r1, #13
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f91d 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_DI_4, &hmodbus->input_registers[REG_DI_4], 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f203 422e 	addw	r2, r3, #1070	@ 0x42e
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	210e      	movs	r1, #14
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f913 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_DI_STATUS, &hmodbus->input_registers[REG_DI_STATUS], 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f503 6286 	add.w	r2, r3, #1072	@ 0x430
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2301      	movs	r3, #1
 8001b94:	210f      	movs	r1, #15
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f909 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_DI_ERROR, &hmodbus->input_registers[REG_DI_ERROR], 
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f203 4232 	addw	r2, r3, #1074	@ 0x432
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	2110      	movs	r1, #16
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8ff 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    
    // PN532 Registers (Read-only)
    Modbus_AddRegister(hmodbus, REG_PN532_DATA_LOW, &hmodbus->input_registers[REG_PN532_DATA_LOW], 
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f203 4252 	addw	r2, r3, #1106	@ 0x452
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8f5 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_PN532_DATA_HIGH, &hmodbus->input_registers[REG_PN532_DATA_HIGH], 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f203 4254 	addw	r2, r3, #1108	@ 0x454
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2121      	movs	r1, #33	@ 0x21
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8eb 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_PN532_STATUS, &hmodbus->input_registers[REG_PN532_STATUS], 
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f203 4256 	addw	r2, r3, #1110	@ 0x456
 8001bde:	2300      	movs	r3, #0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	2122      	movs	r1, #34	@ 0x22
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8e1 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_PN532_ERROR, &hmodbus->input_registers[REG_PN532_ERROR], 
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 628b 	add.w	r2, r3, #1112	@ 0x458
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	2123      	movs	r1, #35	@ 0x23
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8d7 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_PN532_CARD_TYPE, &hmodbus->input_registers[REG_PN532_CARD_TYPE], 
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f203 425a 	addw	r2, r3, #1114	@ 0x45a
 8001c06:	2300      	movs	r3, #0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	2124      	movs	r1, #36	@ 0x24
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8cd 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_PN532_CARD_UID, &hmodbus->input_registers[REG_PN532_CARD_UID], 
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f203 425c 	addw	r2, r3, #1116	@ 0x45c
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2125      	movs	r1, #37	@ 0x25
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8c3 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    
    // Configuration Holding Registers (Read/Write)
    Modbus_AddRegister(hmodbus, REG_IMU_SAMPLE_RATE_CONFIG, &hmodbus->holding_registers[REG_IMU_SAMPLE_RATE_CONFIG], 
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001c2e:	2302      	movs	r3, #2
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	2130      	movs	r1, #48	@ 0x30
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8b9 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    Modbus_AddRegister(hmodbus, REG_DI_DEBOUNCE_TIME_CONFIG, &hmodbus->holding_registers[REG_DI_DEBOUNCE_TIME_CONFIG], 
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f503 721d 	add.w	r2, r3, #628	@ 0x274
 8001c42:	2302      	movs	r3, #2
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2131      	movs	r1, #49	@ 0x31
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8af 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    Modbus_AddRegister(hmodbus, REG_NFC_READ_TIMEOUT_CONFIG, &hmodbus->holding_registers[REG_NFC_READ_TIMEOUT_CONFIG], 
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f203 2276 	addw	r2, r3, #630	@ 0x276
 8001c56:	2302      	movs	r3, #2
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2132      	movs	r1, #50	@ 0x32
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8a5 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    Modbus_AddRegister(hmodbus, REG_DATA_VALID_STATE, &hmodbus->holding_registers[REG_DATA_VALID_STATE], 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2133      	movs	r1, #51	@ 0x33
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f89b 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    Modbus_AddRegister(hmodbus, REG_FAULT_REPORTING, &hmodbus->holding_registers[REG_FAULT_REPORTING], 
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f203 227a 	addw	r2, r3, #634	@ 0x27a
 8001c7e:	2302      	movs	r3, #2
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	2134      	movs	r1, #52	@ 0x34
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f891 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    
    // System Registers
    Modbus_AddRegister(hmodbus, REG_DEVICE_ID, &hmodbus->holding_registers[REG_DEVICE_ID], 
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f203 4212 	addw	r2, r3, #1042	@ 0x412
 8001c92:	2302      	movs	r3, #2
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2300      	movs	r3, #0
 8001c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f886 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    Modbus_AddRegister(hmodbus, REG_CONFIG_BAUDRATE, &hmodbus->holding_registers[REG_CONFIG_BAUDRATE], 
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f203 4214 	addw	r2, r3, #1044	@ 0x414
 8001ca8:	2302      	movs	r3, #2
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	f240 1101 	movw	r1, #257	@ 0x101
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f87b 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    Modbus_AddRegister(hmodbus, REG_CONFIG_PARITY, &hmodbus->holding_registers[REG_CONFIG_PARITY], 
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f203 4216 	addw	r2, r3, #1046	@ 0x416
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f870 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    Modbus_AddRegister(hmodbus, REG_CONFIG_STOP_BITS, &hmodbus->holding_registers[REG_CONFIG_STOP_BITS], 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f240 1103 	movw	r1, #259	@ 0x103
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f865 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_READ_WRITE);
    Modbus_AddRegister(hmodbus, REG_MODULE_TYPE, &hmodbus->input_registers[REG_MODULE_TYPE], 
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f203 621a 	addw	r2, r3, #1562	@ 0x61a
 8001cea:	2300      	movs	r3, #0
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f85a 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_FIRMWARE_VERSION, &hmodbus->input_registers[REG_FIRMWARE_VERSION], 
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f203 621c 	addw	r2, r3, #1564	@ 0x61c
 8001d00:	2300      	movs	r3, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2301      	movs	r3, #1
 8001d06:	f240 1105 	movw	r1, #261	@ 0x105
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f84f 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_HARDWARE_VERSION, &hmodbus->input_registers[REG_HARDWARE_VERSION], 
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f203 621e 	addw	r2, r3, #1566	@ 0x61e
 8001d16:	2300      	movs	r3, #0
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f844 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_SYSTEM_STATUS, &hmodbus->input_registers[REG_SYSTEM_STATUS], 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f503 62c4 	add.w	r2, r3, #1568	@ 0x620
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2301      	movs	r3, #1
 8001d32:	f240 1107 	movw	r1, #263	@ 0x107
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f839 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_SYSTEM_ERROR, &hmodbus->input_registers[REG_SYSTEM_ERROR], 
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f203 6222 	addw	r2, r3, #1570	@ 0x622
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f82e 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_INPUT, MODBUS_REG_ACCESS_READ_ONLY);
    Modbus_AddRegister(hmodbus, REG_RESET_ERROR_CMD, &hmodbus->holding_registers[REG_RESET_ERROR_CMD], 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f203 4224 	addw	r2, r3, #1060	@ 0x424
 8001d58:	2301      	movs	r3, #1
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f240 1109 	movw	r1, #265	@ 0x109
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f823 	bl	8001dae <Modbus_AddRegister>
                      MODBUS_REG_TYPE_HOLDING, MODBUS_REG_ACCESS_WRITE_ONLY);
    
    // Set default values
    hmodbus->holding_registers[REG_DEVICE_ID] = 4; // Default slave address
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	f8a3 2412 	strh.w	r2, [r3, #1042]	@ 0x412
    hmodbus->holding_registers[REG_CONFIG_BAUDRATE] = 4; // 19200
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2204      	movs	r2, #4
 8001d74:	f8a3 2414 	strh.w	r2, [r3, #1044]	@ 0x414
    hmodbus->holding_registers[REG_CONFIG_PARITY] = 0; // None
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f8a3 2416 	strh.w	r2, [r3, #1046]	@ 0x416
    hmodbus->holding_registers[REG_CONFIG_STOP_BITS] = 1; // 1 stop bit
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f8a3 2418 	strh.w	r2, [r3, #1048]	@ 0x418
    hmodbus->input_registers[REG_MODULE_TYPE] = 0x0002; // Power Module
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f8a3 261a 	strh.w	r2, [r3, #1562]	@ 0x61a
    hmodbus->input_registers[REG_FIRMWARE_VERSION] = 0x0101; // v1.01
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f240 1201 	movw	r2, #257	@ 0x101
 8001d96:	f8a3 261c 	strh.w	r2, [r3, #1564]	@ 0x61c
    hmodbus->input_registers[REG_HARDWARE_VERSION] = 0x0101; // v1.01
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f240 1201 	movw	r2, #257	@ 0x101
 8001da0:	f8a3 261e 	strh.w	r2, [r3, #1566]	@ 0x61e
    
    return MODBUS_STATUS_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <Modbus_AddRegister>:
/**
 * @brief Add register to register map
 */
Modbus_Status_t Modbus_AddRegister(Modbus_Handle_t *hmodbus, uint16_t address, uint16_t *data_ptr, 
                                  Modbus_RegType_t type, Modbus_RegAccess_t access)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	461a      	mov	r2, r3
 8001dba:	460b      	mov	r3, r1
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	727b      	strb	r3, [r7, #9]
    if (!hmodbus || !data_ptr || hmodbus->register_count >= MODBUS_MAX_REGISTERS) {
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d009      	beq.n	8001ddc <Modbus_AddRegister+0x2e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <Modbus_AddRegister+0x2e>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd4:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001dd8:	2bff      	cmp	r3, #255	@ 0xff
 8001dda:	d901      	bls.n	8001de0 <Modbus_AddRegister+0x32>
        return MODBUS_STATUS_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e05c      	b.n	8001e9a <Modbus_AddRegister+0xec>
    }
    
    hmodbus->register_map[hmodbus->register_count].address = address;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de6:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001dea:	4619      	mov	r1, r3
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	460b      	mov	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8001dfc:	897a      	ldrh	r2, [r7, #10]
 8001dfe:	801a      	strh	r2, [r3, #0]
    hmodbus->register_map[hmodbus->register_count].data_ptr = data_ptr;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e06:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	440b      	add	r3, r1
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]
    hmodbus->register_map[hmodbus->register_count].type = type;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e26:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	440b      	add	r3, r1
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8001e3c:	7a7a      	ldrb	r2, [r7, #9]
 8001e3e:	701a      	strb	r2, [r3, #0]
    hmodbus->register_map[hmodbus->register_count].access = access;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e46:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	440b      	add	r3, r1
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	f203 631d 	addw	r3, r3, #1565	@ 0x61d
 8001e5c:	7e3a      	ldrb	r2, [r7, #24]
 8001e5e:	701a      	strb	r2, [r3, #0]
    hmodbus->register_map[hmodbus->register_count].valid = true;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e66:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	440b      	add	r3, r1
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	f203 631e 	addw	r3, r3, #1566	@ 0x61e
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
    hmodbus->register_count++;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e86:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e94:	f8a3 2214 	strh.w	r2, [r3, #532]	@ 0x214
    
    return MODBUS_STATUS_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <Modbus_SetRegisterValue>:

/**
 * @brief Set register value
 */
Modbus_Status_t Modbus_SetRegisterValue(Modbus_Handle_t *hmodbus, uint16_t address, uint16_t value)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	803b      	strh	r3, [r7, #0]
    if (!hmodbus) return MODBUS_STATUS_ERROR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <Modbus_SetRegisterValue+0x1a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e043      	b.n	8001f46 <Modbus_SetRegisterValue+0xa2>
    
    for (uint16_t i = 0; i < hmodbus->register_count; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	81fb      	strh	r3, [r7, #14]
 8001ec2:	e037      	b.n	8001f34 <Modbus_SetRegisterValue+0x90>
        if (hmodbus->register_map[i].address == address && hmodbus->register_map[i].valid) {
 8001ec4:	89fa      	ldrh	r2, [r7, #14]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d127      	bne.n	8001f2e <Modbus_SetRegisterValue+0x8a>
 8001ede:	89fa      	ldrh	r2, [r7, #14]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	f203 631e 	addw	r3, r3, #1566	@ 0x61e
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01b      	beq.n	8001f2e <Modbus_SetRegisterValue+0x8a>
            if (hmodbus->register_map[i].access != MODBUS_REG_ACCESS_READ_ONLY) {
 8001ef6:	89fa      	ldrh	r2, [r7, #14]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	f203 631d 	addw	r3, r3, #1565	@ 0x61d
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <Modbus_SetRegisterValue+0x86>
                *hmodbus->register_map[i].data_ptr = value;
 8001f0e:	89fa      	ldrh	r2, [r7, #14]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	883a      	ldrh	r2, [r7, #0]
 8001f24:	801a      	strh	r2, [r3, #0]
                return MODBUS_STATUS_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e00d      	b.n	8001f46 <Modbus_SetRegisterValue+0xa2>
            }
            return MODBUS_STATUS_ERROR; // Read-only register
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00b      	b.n	8001f46 <Modbus_SetRegisterValue+0xa2>
    for (uint16_t i = 0; i < hmodbus->register_count; i++) {
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	3301      	adds	r3, #1
 8001f32:	81fb      	strh	r3, [r7, #14]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3a:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001f3e:	89fa      	ldrh	r2, [r7, #14]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d3bf      	bcc.n	8001ec4 <Modbus_SetRegisterValue+0x20>
        }
    }
    
    return MODBUS_STATUS_ERROR; // Register not found
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <Modbus_GetRegisterValue>:

/**
 * @brief Get register value
 */
Modbus_Status_t Modbus_GetRegisterValue(Modbus_Handle_t *hmodbus, uint16_t address, uint16_t *value)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	817b      	strh	r3, [r7, #10]
    if (!hmodbus || !value) return MODBUS_STATUS_ERROR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <Modbus_GetRegisterValue+0x1a>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <Modbus_GetRegisterValue+0x1e>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e044      	b.n	8001ff8 <Modbus_GetRegisterValue+0xa8>
    
    for (uint16_t i = 0; i < hmodbus->register_count; i++) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	82fb      	strh	r3, [r7, #22]
 8001f72:	e038      	b.n	8001fe6 <Modbus_GetRegisterValue+0x96>
        if (hmodbus->register_map[i].address == address && hmodbus->register_map[i].valid) {
 8001f74:	8afa      	ldrh	r2, [r7, #22]
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	897a      	ldrh	r2, [r7, #10]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d128      	bne.n	8001fe0 <Modbus_GetRegisterValue+0x90>
 8001f8e:	8afa      	ldrh	r2, [r7, #22]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f203 631e 	addw	r3, r3, #1566	@ 0x61e
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01c      	beq.n	8001fe0 <Modbus_GetRegisterValue+0x90>
            if (hmodbus->register_map[i].access != MODBUS_REG_ACCESS_WRITE_ONLY) {
 8001fa6:	8afa      	ldrh	r2, [r7, #22]
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f203 631d 	addw	r3, r3, #1565	@ 0x61d
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d00e      	beq.n	8001fdc <Modbus_GetRegisterValue+0x8c>
                *value = *hmodbus->register_map[i].data_ptr;
 8001fbe:	8afa      	ldrh	r2, [r7, #22]
 8001fc0:	68f9      	ldr	r1, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	801a      	strh	r2, [r3, #0]
                return MODBUS_STATUS_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e00d      	b.n	8001ff8 <Modbus_GetRegisterValue+0xa8>
            }
            return MODBUS_STATUS_ERROR; // Write-only register
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e00b      	b.n	8001ff8 <Modbus_GetRegisterValue+0xa8>
    for (uint16_t i = 0; i < hmodbus->register_count; i++) {
 8001fe0:	8afb      	ldrh	r3, [r7, #22]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	82fb      	strh	r3, [r7, #22]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fec:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8001ff0:	8afa      	ldrh	r2, [r7, #22]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3be      	bcc.n	8001f74 <Modbus_GetRegisterValue+0x24>
        }
    }
    
    return MODBUS_STATUS_ERROR; // Register not found
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <Modbus_Process>:

/**
 * @brief Process Modbus communication
 */
Modbus_Status_t Modbus_Process(Modbus_Handle_t *hmodbus)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
    if (!hmodbus) return MODBUS_STATUS_ERROR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <Modbus_Process+0x12>
 8002010:	2301      	movs	r3, #1
 8002012:	e012      	b.n	800203a <Modbus_Process+0x38>
    
    if (hmodbus->frame_ready) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201a:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <Modbus_Process+0x36>
        hmodbus->frame_ready = false;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
        return Modbus_ProcessFrame(hmodbus);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f826 	bl	8002080 <Modbus_ProcessFrame>
 8002034:	4603      	mov	r3, r0
 8002036:	e000      	b.n	800203a <Modbus_Process+0x38>
    }
    
    return MODBUS_STATUS_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <Modbus_StartReceive>:

/**
 * @brief Start receiving data
 */
Modbus_Status_t Modbus_StartReceive(Modbus_Handle_t *hmodbus)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
    if (!hmodbus) return MODBUS_STATUS_ERROR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <Modbus_StartReceive+0x12>
 8002050:	2301      	movs	r3, #1
 8002052:	e011      	b.n	8002078 <Modbus_StartReceive+0x36>
    
    hmodbus->rx_length = 0;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
    
    if (HAL_UART_Receive_IT(hmodbus->huart, hmodbus->rx_buffer, 1) != HAL_OK) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	330e      	adds	r3, #14
 8002064:	2201      	movs	r2, #1
 8002066:	4619      	mov	r1, r3
 8002068:	f003 f89c 	bl	80051a4 <HAL_UART_Receive_IT>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <Modbus_StartReceive+0x34>
        return MODBUS_STATUS_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <Modbus_StartReceive+0x36>
    }
    
    return MODBUS_STATUS_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <Modbus_ProcessFrame>:

/**
 * @brief Process received frame
 */
Modbus_Status_t Modbus_ProcessFrame(Modbus_Handle_t *hmodbus)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    if (!hmodbus || hmodbus->rx_length < MODBUS_MIN_FRAME_SIZE) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <Modbus_ProcessFrame+0x18>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 8002094:	2b03      	cmp	r3, #3
 8002096:	d801      	bhi.n	800209c <Modbus_ProcessFrame+0x1c>
        return MODBUS_STATUS_INVALID_FRAME;
 8002098:	2305      	movs	r3, #5
 800209a:	e092      	b.n	80021c2 <Modbus_ProcessFrame+0x142>
    }
    
    // Check CRC
    if (!Modbus_VerifyCRC(hmodbus->rx_buffer, hmodbus->rx_length)) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 020e 	add.w	r2, r3, #14
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f000 fb20 	bl	80026f0 <Modbus_VerifyCRC>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00c      	beq.n	80020d6 <Modbus_ProcessFrame+0x56>
        hmodbus->error_count++;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80020c6:	3301      	adds	r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ce:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
        return MODBUS_STATUS_CRC_ERROR;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e075      	b.n	80021c2 <Modbus_ProcessFrame+0x142>
    }
    
    uint8_t slave_addr = hmodbus->rx_buffer[0];
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7b9b      	ldrb	r3, [r3, #14]
 80020da:	73bb      	strb	r3, [r7, #14]
    uint8_t function_code = hmodbus->rx_buffer[1];
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7bdb      	ldrb	r3, [r3, #15]
 80020e0:	737b      	strb	r3, [r7, #13]
    
    // Check if frame is for this slave
    if (slave_addr != hmodbus->slave_address && slave_addr != 0) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	791b      	ldrb	r3, [r3, #4]
 80020e6:	7bba      	ldrb	r2, [r7, #14]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d004      	beq.n	80020f6 <Modbus_ProcessFrame+0x76>
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <Modbus_ProcessFrame+0x76>
        return MODBUS_STATUS_OK; // Not for us, ignore
 80020f2:	2300      	movs	r3, #0
 80020f4:	e065      	b.n	80021c2 <Modbus_ProcessFrame+0x142>
    }
    
    hmodbus->frame_count++;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002100:	3301      	adds	r3, #1
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002108:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
    hmodbus->last_activity_time = HAL_GetTick();
 800210c:	f001 f860 	bl	80031d0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002118:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
    
    // Process based on function code
    Modbus_Status_t status = MODBUS_STATUS_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
    
    switch (function_code) {
 8002120:	7b7b      	ldrb	r3, [r7, #13]
 8002122:	3b03      	subs	r3, #3
 8002124:	2b0d      	cmp	r3, #13
 8002126:	d837      	bhi.n	8002198 <Modbus_ProcessFrame+0x118>
 8002128:	a201      	add	r2, pc, #4	@ (adr r2, 8002130 <Modbus_ProcessFrame+0xb0>)
 800212a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212e:	bf00      	nop
 8002130:	08002169 	.word	0x08002169
 8002134:	08002175 	.word	0x08002175
 8002138:	08002199 	.word	0x08002199
 800213c:	08002181 	.word	0x08002181
 8002140:	08002199 	.word	0x08002199
 8002144:	08002199 	.word	0x08002199
 8002148:	08002199 	.word	0x08002199
 800214c:	08002199 	.word	0x08002199
 8002150:	08002199 	.word	0x08002199
 8002154:	08002199 	.word	0x08002199
 8002158:	08002199 	.word	0x08002199
 800215c:	08002199 	.word	0x08002199
 8002160:	08002199 	.word	0x08002199
 8002164:	0800218d 	.word	0x0800218d
        case MODBUS_FC_READ_HOLDING_REGISTERS:
            status = Modbus_ProcessReadHoldingRegisters(hmodbus);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f82f 	bl	80021cc <Modbus_ProcessReadHoldingRegisters>
 800216e:	4603      	mov	r3, r0
 8002170:	73fb      	strb	r3, [r7, #15]
            break;
 8002172:	e025      	b.n	80021c0 <Modbus_ProcessFrame+0x140>
            
        case MODBUS_FC_READ_INPUT_REGISTERS:
            status = Modbus_ProcessReadInputRegisters(hmodbus);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f8af 	bl	80022d8 <Modbus_ProcessReadInputRegisters>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
            break;
 800217e:	e01f      	b.n	80021c0 <Modbus_ProcessFrame+0x140>
            
        case MODBUS_FC_WRITE_SINGLE_REGISTER:
            status = Modbus_ProcessWriteSingleRegister(hmodbus);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f92f 	bl	80023e4 <Modbus_ProcessWriteSingleRegister>
 8002186:	4603      	mov	r3, r0
 8002188:	73fb      	strb	r3, [r7, #15]
            break;
 800218a:	e019      	b.n	80021c0 <Modbus_ProcessFrame+0x140>
            
        case MODBUS_FC_WRITE_MULTIPLE_REGISTERS:
            status = Modbus_ProcessWriteMultipleRegisters(hmodbus);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f972 	bl	8002476 <Modbus_ProcessWriteMultipleRegisters>
 8002192:	4603      	mov	r3, r0
 8002194:	73fb      	strb	r3, [r7, #15]
            break;
 8002196:	e013      	b.n	80021c0 <Modbus_ProcessFrame+0x140>
            
        default:
            Modbus_SendException(hmodbus, function_code, MODBUS_EXCEPTION_ILLEGAL_FUNCTION);
 8002198:	7b7b      	ldrb	r3, [r7, #13]
 800219a:	2201      	movs	r2, #1
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa45 	bl	800262e <Modbus_SendException>
            hmodbus->exception_count++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021aa:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80021ae:	3301      	adds	r3, #1
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021b6:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
            status = MODBUS_STATUS_EXCEPTION;
 80021ba:	2304      	movs	r3, #4
 80021bc:	73fb      	strb	r3, [r7, #15]
            break;
 80021be:	bf00      	nop
    }
    
    return status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop

080021cc <Modbus_ProcessReadHoldingRegisters>:

/**
 * @brief Process read holding registers command
 */
Modbus_Status_t Modbus_ProcessReadHoldingRegisters(Modbus_Handle_t *hmodbus)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    if (!hmodbus || hmodbus->rx_length < 8) return MODBUS_STATUS_INVALID_FRAME;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <Modbus_ProcessReadHoldingRegisters+0x18>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80021e0:	2b07      	cmp	r3, #7
 80021e2:	d801      	bhi.n	80021e8 <Modbus_ProcessReadHoldingRegisters+0x1c>
 80021e4:	2305      	movs	r3, #5
 80021e6:	e073      	b.n	80022d0 <Modbus_ProcessReadHoldingRegisters+0x104>
    
    uint16_t start_address = (hmodbus->rx_buffer[2] << 8) | hmodbus->rx_buffer[3];
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7c1b      	ldrb	r3, [r3, #16]
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7c5b      	ldrb	r3, [r3, #17]
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	827b      	strh	r3, [r7, #18]
    uint16_t register_count = (hmodbus->rx_buffer[4] << 8) | hmodbus->rx_buffer[5];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7c9b      	ldrb	r3, [r3, #18]
 8002202:	b21b      	sxth	r3, r3
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7cdb      	ldrb	r3, [r3, #19]
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b21b      	sxth	r3, r3
 8002212:	823b      	strh	r3, [r7, #16]
    
    // Validate parameters
    if (register_count == 0 || register_count > MODBUS_MAX_READ_REGISTERS) {
 8002214:	8a3b      	ldrh	r3, [r7, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <Modbus_ProcessReadHoldingRegisters+0x54>
 800221a:	8a3b      	ldrh	r3, [r7, #16]
 800221c:	2b7d      	cmp	r3, #125	@ 0x7d
 800221e:	d906      	bls.n	800222e <Modbus_ProcessReadHoldingRegisters+0x62>
        Modbus_SendException(hmodbus, MODBUS_FC_READ_HOLDING_REGISTERS, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002220:	2203      	movs	r2, #3
 8002222:	2103      	movs	r1, #3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa02 	bl	800262e <Modbus_SendException>
        return MODBUS_STATUS_EXCEPTION;
 800222a:	2304      	movs	r3, #4
 800222c:	e050      	b.n	80022d0 <Modbus_ProcessReadHoldingRegisters+0x104>
    }
    
    // Build response
    hmodbus->tx_buffer[0] = hmodbus->slave_address;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	791a      	ldrb	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    hmodbus->tx_buffer[1] = MODBUS_FC_READ_HOLDING_REGISTERS;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
    hmodbus->tx_buffer[2] = register_count * 2; // Byte count
 8002240:	8a3b      	ldrh	r3, [r7, #16]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    
    uint16_t response_index = 3;
 800224e:	2303      	movs	r3, #3
 8002250:	82fb      	strh	r3, [r7, #22]
    
    for (uint16_t i = 0; i < register_count; i++) {
 8002252:	2300      	movs	r3, #0
 8002254:	82bb      	strh	r3, [r7, #20]
 8002256:	e02f      	b.n	80022b8 <Modbus_ProcessReadHoldingRegisters+0xec>
        uint16_t reg_address = start_address + i;
 8002258:	8a7a      	ldrh	r2, [r7, #18]
 800225a:	8abb      	ldrh	r3, [r7, #20]
 800225c:	4413      	add	r3, r2
 800225e:	81fb      	strh	r3, [r7, #14]
        uint16_t reg_value = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	81bb      	strh	r3, [r7, #12]
        
        if (Modbus_GetRegisterValue(hmodbus, reg_address, &reg_value) != MODBUS_STATUS_OK) {
 8002264:	f107 020c 	add.w	r2, r7, #12
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fe6f 	bl	8001f50 <Modbus_GetRegisterValue>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <Modbus_ProcessReadHoldingRegisters+0xba>
            Modbus_SendException(hmodbus, MODBUS_FC_READ_HOLDING_REGISTERS, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002278:	2202      	movs	r2, #2
 800227a:	2103      	movs	r1, #3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f9d6 	bl	800262e <Modbus_SendException>
            return MODBUS_STATUS_EXCEPTION;
 8002282:	2304      	movs	r3, #4
 8002284:	e024      	b.n	80022d0 <Modbus_ProcessReadHoldingRegisters+0x104>
        }
        
        hmodbus->tx_buffer[response_index++] = (reg_value >> 8) & 0xFF;
 8002286:	89bb      	ldrh	r3, [r7, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	b29a      	uxth	r2, r3
 800228c:	8afb      	ldrh	r3, [r7, #22]
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	82f9      	strh	r1, [r7, #22]
 8002292:	4619      	mov	r1, r3
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	440b      	add	r3, r1
 800229a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        hmodbus->tx_buffer[response_index++] = reg_value & 0xFF;
 800229e:	89ba      	ldrh	r2, [r7, #12]
 80022a0:	8afb      	ldrh	r3, [r7, #22]
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	82f9      	strh	r1, [r7, #22]
 80022a6:	4619      	mov	r1, r3
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	440b      	add	r3, r1
 80022ae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    for (uint16_t i = 0; i < register_count; i++) {
 80022b2:	8abb      	ldrh	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	82bb      	strh	r3, [r7, #20]
 80022b8:	8aba      	ldrh	r2, [r7, #20]
 80022ba:	8a3b      	ldrh	r3, [r7, #16]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3cb      	bcc.n	8002258 <Modbus_ProcessReadHoldingRegisters+0x8c>
    }
    
    hmodbus->tx_length = response_index;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8afa      	ldrh	r2, [r7, #22]
 80022c4:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    
    return Modbus_SendResponse(hmodbus);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f974 	bl	80025b6 <Modbus_SendResponse>
 80022ce:	4603      	mov	r3, r0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <Modbus_ProcessReadInputRegisters>:

/**
 * @brief Process read input registers command
 */
Modbus_Status_t Modbus_ProcessReadInputRegisters(Modbus_Handle_t *hmodbus)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    if (!hmodbus || hmodbus->rx_length < 8) return MODBUS_STATUS_INVALID_FRAME;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <Modbus_ProcessReadInputRegisters+0x18>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80022ec:	2b07      	cmp	r3, #7
 80022ee:	d801      	bhi.n	80022f4 <Modbus_ProcessReadInputRegisters+0x1c>
 80022f0:	2305      	movs	r3, #5
 80022f2:	e073      	b.n	80023dc <Modbus_ProcessReadInputRegisters+0x104>
    
    uint16_t start_address = (hmodbus->rx_buffer[2] << 8) | hmodbus->rx_buffer[3];
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7c1b      	ldrb	r3, [r3, #16]
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	b21a      	sxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7c5b      	ldrb	r3, [r3, #17]
 8002302:	b21b      	sxth	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b21b      	sxth	r3, r3
 8002308:	827b      	strh	r3, [r7, #18]
    uint16_t register_count = (hmodbus->rx_buffer[4] << 8) | hmodbus->rx_buffer[5];
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7c9b      	ldrb	r3, [r3, #18]
 800230e:	b21b      	sxth	r3, r3
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b21a      	sxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7cdb      	ldrb	r3, [r3, #19]
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21b      	sxth	r3, r3
 800231e:	823b      	strh	r3, [r7, #16]
    
    // Validate parameters
    if (register_count == 0 || register_count > MODBUS_MAX_READ_REGISTERS) {
 8002320:	8a3b      	ldrh	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <Modbus_ProcessReadInputRegisters+0x54>
 8002326:	8a3b      	ldrh	r3, [r7, #16]
 8002328:	2b7d      	cmp	r3, #125	@ 0x7d
 800232a:	d906      	bls.n	800233a <Modbus_ProcessReadInputRegisters+0x62>
        Modbus_SendException(hmodbus, MODBUS_FC_READ_INPUT_REGISTERS, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800232c:	2203      	movs	r2, #3
 800232e:	2104      	movs	r1, #4
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f97c 	bl	800262e <Modbus_SendException>
        return MODBUS_STATUS_EXCEPTION;
 8002336:	2304      	movs	r3, #4
 8002338:	e050      	b.n	80023dc <Modbus_ProcessReadInputRegisters+0x104>
    }
    
    // Build response
    hmodbus->tx_buffer[0] = hmodbus->slave_address;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	791a      	ldrb	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    hmodbus->tx_buffer[1] = MODBUS_FC_READ_INPUT_REGISTERS;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2204      	movs	r2, #4
 8002348:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
    hmodbus->tx_buffer[2] = register_count * 2; // Byte count
 800234c:	8a3b      	ldrh	r3, [r7, #16]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    
    uint16_t response_index = 3;
 800235a:	2303      	movs	r3, #3
 800235c:	82fb      	strh	r3, [r7, #22]
    
    for (uint16_t i = 0; i < register_count; i++) {
 800235e:	2300      	movs	r3, #0
 8002360:	82bb      	strh	r3, [r7, #20]
 8002362:	e02f      	b.n	80023c4 <Modbus_ProcessReadInputRegisters+0xec>
        uint16_t reg_address = start_address + i;
 8002364:	8a7a      	ldrh	r2, [r7, #18]
 8002366:	8abb      	ldrh	r3, [r7, #20]
 8002368:	4413      	add	r3, r2
 800236a:	81fb      	strh	r3, [r7, #14]
        uint16_t reg_value = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	81bb      	strh	r3, [r7, #12]
        
        if (Modbus_GetRegisterValue(hmodbus, reg_address, &reg_value) != MODBUS_STATUS_OK) {
 8002370:	f107 020c 	add.w	r2, r7, #12
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	4619      	mov	r1, r3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fde9 	bl	8001f50 <Modbus_GetRegisterValue>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <Modbus_ProcessReadInputRegisters+0xba>
            Modbus_SendException(hmodbus, MODBUS_FC_READ_INPUT_REGISTERS, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002384:	2202      	movs	r2, #2
 8002386:	2104      	movs	r1, #4
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f950 	bl	800262e <Modbus_SendException>
            return MODBUS_STATUS_EXCEPTION;
 800238e:	2304      	movs	r3, #4
 8002390:	e024      	b.n	80023dc <Modbus_ProcessReadInputRegisters+0x104>
        }
        
        hmodbus->tx_buffer[response_index++] = (reg_value >> 8) & 0xFF;
 8002392:	89bb      	ldrh	r3, [r7, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29a      	uxth	r2, r3
 8002398:	8afb      	ldrh	r3, [r7, #22]
 800239a:	1c59      	adds	r1, r3, #1
 800239c:	82f9      	strh	r1, [r7, #22]
 800239e:	4619      	mov	r1, r3
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	440b      	add	r3, r1
 80023a6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        hmodbus->tx_buffer[response_index++] = reg_value & 0xFF;
 80023aa:	89ba      	ldrh	r2, [r7, #12]
 80023ac:	8afb      	ldrh	r3, [r7, #22]
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	82f9      	strh	r1, [r7, #22]
 80023b2:	4619      	mov	r1, r3
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	440b      	add	r3, r1
 80023ba:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    for (uint16_t i = 0; i < register_count; i++) {
 80023be:	8abb      	ldrh	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	82bb      	strh	r3, [r7, #20]
 80023c4:	8aba      	ldrh	r2, [r7, #20]
 80023c6:	8a3b      	ldrh	r3, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d3cb      	bcc.n	8002364 <Modbus_ProcessReadInputRegisters+0x8c>
    }
    
    hmodbus->tx_length = response_index;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8afa      	ldrh	r2, [r7, #22]
 80023d0:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    
    return Modbus_SendResponse(hmodbus);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8ee 	bl	80025b6 <Modbus_SendResponse>
 80023da:	4603      	mov	r3, r0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <Modbus_ProcessWriteSingleRegister>:

/**
 * @brief Process write single register command
 */
Modbus_Status_t Modbus_ProcessWriteSingleRegister(Modbus_Handle_t *hmodbus)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    if (!hmodbus || hmodbus->rx_length < 8) return MODBUS_STATUS_INVALID_FRAME;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <Modbus_ProcessWriteSingleRegister+0x18>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d801      	bhi.n	8002400 <Modbus_ProcessWriteSingleRegister+0x1c>
 80023fc:	2305      	movs	r3, #5
 80023fe:	e036      	b.n	800246e <Modbus_ProcessWriteSingleRegister+0x8a>
    
    uint16_t register_address = (hmodbus->rx_buffer[2] << 8) | hmodbus->rx_buffer[3];
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7c1b      	ldrb	r3, [r3, #16]
 8002404:	b21b      	sxth	r3, r3
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	b21a      	sxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7c5b      	ldrb	r3, [r3, #17]
 800240e:	b21b      	sxth	r3, r3
 8002410:	4313      	orrs	r3, r2
 8002412:	b21b      	sxth	r3, r3
 8002414:	81fb      	strh	r3, [r7, #14]
    uint16_t register_value = (hmodbus->rx_buffer[4] << 8) | hmodbus->rx_buffer[5];
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7c9b      	ldrb	r3, [r3, #18]
 800241a:	b21b      	sxth	r3, r3
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	b21a      	sxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7cdb      	ldrb	r3, [r3, #19]
 8002424:	b21b      	sxth	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b21b      	sxth	r3, r3
 800242a:	81bb      	strh	r3, [r7, #12]
    
    // Write register
    if (Modbus_SetRegisterValue(hmodbus, register_address, register_value) != MODBUS_STATUS_OK) {
 800242c:	89ba      	ldrh	r2, [r7, #12]
 800242e:	89fb      	ldrh	r3, [r7, #14]
 8002430:	4619      	mov	r1, r3
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fd36 	bl	8001ea4 <Modbus_SetRegisterValue>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <Modbus_ProcessWriteSingleRegister+0x68>
        Modbus_SendException(hmodbus, MODBUS_FC_WRITE_SINGLE_REGISTER, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 800243e:	2202      	movs	r2, #2
 8002440:	2106      	movs	r1, #6
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8f3 	bl	800262e <Modbus_SendException>
        return MODBUS_STATUS_EXCEPTION;
 8002448:	2304      	movs	r3, #4
 800244a:	e010      	b.n	800246e <Modbus_ProcessWriteSingleRegister+0x8a>
    }
    
    // Echo back the request as response
    memcpy(hmodbus->tx_buffer, hmodbus->rx_buffer, 6);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f503 7087 	add.w	r0, r3, #270	@ 0x10e
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	330e      	adds	r3, #14
 8002456:	2206      	movs	r2, #6
 8002458:	4619      	mov	r1, r3
 800245a:	f006 ffed 	bl	8009438 <memcpy>
    hmodbus->tx_length = 6;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2206      	movs	r2, #6
 8002462:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    
    return Modbus_SendResponse(hmodbus);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f8a5 	bl	80025b6 <Modbus_SendResponse>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <Modbus_ProcessWriteMultipleRegisters>:

/**
 * @brief Process write multiple registers command
 */
Modbus_Status_t Modbus_ProcessWriteMultipleRegisters(Modbus_Handle_t *hmodbus)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
    if (!hmodbus || hmodbus->rx_length < 9) return MODBUS_STATUS_INVALID_FRAME;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <Modbus_ProcessWriteMultipleRegisters+0x18>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 800248a:	2b08      	cmp	r3, #8
 800248c:	d801      	bhi.n	8002492 <Modbus_ProcessWriteMultipleRegisters+0x1c>
 800248e:	2305      	movs	r3, #5
 8002490:	e08d      	b.n	80025ae <Modbus_ProcessWriteMultipleRegisters+0x138>
    
    uint16_t start_address = (hmodbus->rx_buffer[2] << 8) | hmodbus->rx_buffer[3];
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7c1b      	ldrb	r3, [r3, #16]
 8002496:	b21b      	sxth	r3, r3
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	b21a      	sxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7c5b      	ldrb	r3, [r3, #17]
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	827b      	strh	r3, [r7, #18]
    uint16_t register_count = (hmodbus->rx_buffer[4] << 8) | hmodbus->rx_buffer[5];
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7c9b      	ldrb	r3, [r3, #18]
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7cdb      	ldrb	r3, [r3, #19]
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	823b      	strh	r3, [r7, #16]
    uint8_t byte_count = hmodbus->rx_buffer[6];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7d1b      	ldrb	r3, [r3, #20]
 80024c2:	73fb      	strb	r3, [r7, #15]
    
    // Validate parameters
    if (register_count == 0 || register_count > MODBUS_MAX_WRITE_REGISTERS || 
 80024c4:	8a3b      	ldrh	r3, [r7, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00e      	beq.n	80024e8 <Modbus_ProcessWriteMultipleRegisters+0x72>
 80024ca:	8a3b      	ldrh	r3, [r7, #16]
 80024cc:	2b7b      	cmp	r3, #123	@ 0x7b
 80024ce:	d80b      	bhi.n	80024e8 <Modbus_ProcessWriteMultipleRegisters+0x72>
        byte_count != register_count * 2 || hmodbus->rx_length < (9 + byte_count)) {
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	8a3b      	ldrh	r3, [r7, #16]
 80024d4:	005b      	lsls	r3, r3, #1
    if (register_count == 0 || register_count > MODBUS_MAX_WRITE_REGISTERS || 
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d106      	bne.n	80024e8 <Modbus_ProcessWriteMultipleRegisters+0x72>
        byte_count != register_count * 2 || hmodbus->rx_length < (9 + byte_count)) {
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	3308      	adds	r3, #8
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	f8b2 220e 	ldrh.w	r2, [r2, #526]	@ 0x20e
 80024e4:	4293      	cmp	r3, r2
 80024e6:	db06      	blt.n	80024f6 <Modbus_ProcessWriteMultipleRegisters+0x80>
        Modbus_SendException(hmodbus, MODBUS_FC_WRITE_MULTIPLE_REGISTERS, MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80024e8:	2203      	movs	r2, #3
 80024ea:	2110      	movs	r1, #16
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f89e 	bl	800262e <Modbus_SendException>
        return MODBUS_STATUS_EXCEPTION;
 80024f2:	2304      	movs	r3, #4
 80024f4:	e05b      	b.n	80025ae <Modbus_ProcessWriteMultipleRegisters+0x138>
    }
    
    // Write registers
    uint16_t data_index = 7;
 80024f6:	2307      	movs	r3, #7
 80024f8:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < register_count; i++) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	82bb      	strh	r3, [r7, #20]
 80024fe:	e029      	b.n	8002554 <Modbus_ProcessWriteMultipleRegisters+0xde>
        uint16_t reg_address = start_address + i;
 8002500:	8a7a      	ldrh	r2, [r7, #18]
 8002502:	8abb      	ldrh	r3, [r7, #20]
 8002504:	4413      	add	r3, r2
 8002506:	81bb      	strh	r3, [r7, #12]
        uint16_t reg_value = (hmodbus->rx_buffer[data_index] << 8) | hmodbus->rx_buffer[data_index + 1];
 8002508:	8afb      	ldrh	r3, [r7, #22]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	7b9b      	ldrb	r3, [r3, #14]
 8002510:	b21b      	sxth	r3, r3
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b21a      	sxth	r2, r3
 8002516:	8afb      	ldrh	r3, [r7, #22]
 8002518:	3301      	adds	r3, #1
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	440b      	add	r3, r1
 800251e:	7b9b      	ldrb	r3, [r3, #14]
 8002520:	b21b      	sxth	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	b21b      	sxth	r3, r3
 8002526:	817b      	strh	r3, [r7, #10]
        data_index += 2;
 8002528:	8afb      	ldrh	r3, [r7, #22]
 800252a:	3302      	adds	r3, #2
 800252c:	82fb      	strh	r3, [r7, #22]
        
        if (Modbus_SetRegisterValue(hmodbus, reg_address, reg_value) != MODBUS_STATUS_OK) {
 800252e:	897a      	ldrh	r2, [r7, #10]
 8002530:	89bb      	ldrh	r3, [r7, #12]
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fcb5 	bl	8001ea4 <Modbus_SetRegisterValue>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <Modbus_ProcessWriteMultipleRegisters+0xd8>
            Modbus_SendException(hmodbus, MODBUS_FC_WRITE_MULTIPLE_REGISTERS, MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002540:	2202      	movs	r2, #2
 8002542:	2110      	movs	r1, #16
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f872 	bl	800262e <Modbus_SendException>
            return MODBUS_STATUS_EXCEPTION;
 800254a:	2304      	movs	r3, #4
 800254c:	e02f      	b.n	80025ae <Modbus_ProcessWriteMultipleRegisters+0x138>
    for (uint16_t i = 0; i < register_count; i++) {
 800254e:	8abb      	ldrh	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	82bb      	strh	r3, [r7, #20]
 8002554:	8aba      	ldrh	r2, [r7, #20]
 8002556:	8a3b      	ldrh	r3, [r7, #16]
 8002558:	429a      	cmp	r2, r3
 800255a:	d3d1      	bcc.n	8002500 <Modbus_ProcessWriteMultipleRegisters+0x8a>
        }
    }
    
    // Build response
    hmodbus->tx_buffer[0] = hmodbus->slave_address;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	791a      	ldrb	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    hmodbus->tx_buffer[1] = MODBUS_FC_WRITE_MULTIPLE_REGISTERS;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2210      	movs	r2, #16
 800256a:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
    hmodbus->tx_buffer[2] = (start_address >> 8) & 0xFF;
 800256e:	8a7b      	ldrh	r3, [r7, #18]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	b29b      	uxth	r3, r3
 8002574:	b2da      	uxtb	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    hmodbus->tx_buffer[3] = start_address & 0xFF;
 800257c:	8a7b      	ldrh	r3, [r7, #18]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
    hmodbus->tx_buffer[4] = (register_count >> 8) & 0xFF;
 8002586:	8a3b      	ldrh	r3, [r7, #16]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	b29b      	uxth	r3, r3
 800258c:	b2da      	uxtb	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    hmodbus->tx_buffer[5] = register_count & 0xFF;
 8002594:	8a3b      	ldrh	r3, [r7, #16]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
    hmodbus->tx_length = 6;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2206      	movs	r2, #6
 80025a2:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    
    return Modbus_SendResponse(hmodbus);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f805 	bl	80025b6 <Modbus_SendResponse>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <Modbus_SendResponse>:

/**
 * @brief Send response
 */
Modbus_Status_t Modbus_SendResponse(Modbus_Handle_t *hmodbus)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
    if (!hmodbus) return MODBUS_STATUS_ERROR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <Modbus_SendResponse+0x12>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e02e      	b.n	8002626 <Modbus_SendResponse+0x70>
    
    // Add CRC
    Modbus_AddCRC(hmodbus->tx_buffer, hmodbus->tx_length);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f503 7287 	add.w	r2, r3, #270	@ 0x10e
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f000 f8ba 	bl	8002750 <Modbus_AddCRC>
    hmodbus->tx_length += 2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80025e2:	3302      	adds	r3, #2
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    
    // Send response
    hmodbus->response_pending = true;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    
    if (HAL_UART_Transmit_IT(hmodbus->huart, hmodbus->tx_buffer, hmodbus->tx_length) != HAL_OK) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f503 7187 	add.w	r1, r3, #270	@ 0x10e
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8002608:	461a      	mov	r2, r3
 800260a:	f002 fd96 	bl	800513a <HAL_UART_Transmit_IT>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <Modbus_SendResponse+0x6e>
        hmodbus->response_pending = false;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
        return MODBUS_STATUS_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <Modbus_SendResponse+0x70>
    }
    
    return MODBUS_STATUS_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <Modbus_SendException>:

/**
 * @brief Send exception response
 */
Modbus_Status_t Modbus_SendException(Modbus_Handle_t *hmodbus, uint8_t function_code, uint8_t exception_code)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	70fb      	strb	r3, [r7, #3]
 800263a:	4613      	mov	r3, r2
 800263c:	70bb      	strb	r3, [r7, #2]
    if (!hmodbus) return MODBUS_STATUS_ERROR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <Modbus_SendException+0x1a>
 8002644:	2301      	movs	r3, #1
 8002646:	e022      	b.n	800268e <Modbus_SendException+0x60>
    
    hmodbus->tx_buffer[0] = hmodbus->slave_address;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	791a      	ldrb	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    hmodbus->tx_buffer[1] = function_code | 0x80; // Set exception bit
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002658:	b2da      	uxtb	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
    hmodbus->tx_buffer[2] = exception_code;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	78ba      	ldrb	r2, [r7, #2]
 8002664:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    hmodbus->tx_length = 3;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2203      	movs	r2, #3
 800266c:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    
    hmodbus->exception_count++;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002676:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800267a:	3301      	adds	r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002682:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
    
    return Modbus_SendResponse(hmodbus);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff95 	bl	80025b6 <Modbus_SendResponse>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <Modbus_CalculateCRC>:

/**
 * @brief Calculate CRC-16 for Modbus
 */
uint16_t Modbus_CalculateCRC(uint8_t *data, uint16_t length)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80026a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026a8:	81fb      	strh	r3, [r7, #14]
    
    for (uint16_t i = 0; i < length; i++) {
 80026aa:	2300      	movs	r3, #0
 80026ac:	81bb      	strh	r3, [r7, #12]
 80026ae:	e013      	b.n	80026d8 <Modbus_CalculateCRC+0x40>
        uint8_t index = (crc ^ data[i]) & 0xFF;
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	89bb      	ldrh	r3, [r7, #12]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	440b      	add	r3, r1
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4053      	eors	r3, r2
 80026be:	72fb      	strb	r3, [r7, #11]
        crc = (crc >> 8) ^ crc_table[index];
 80026c0:	89fb      	ldrh	r3, [r7, #14]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	4908      	ldr	r1, [pc, #32]	@ (80026ec <Modbus_CalculateCRC+0x54>)
 80026ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80026ce:	4053      	eors	r3, r2
 80026d0:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 80026d2:	89bb      	ldrh	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	81bb      	strh	r3, [r7, #12]
 80026d8:	89ba      	ldrh	r2, [r7, #12]
 80026da:	887b      	ldrh	r3, [r7, #2]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3e7      	bcc.n	80026b0 <Modbus_CalculateCRC+0x18>
    }
    
    return crc;
 80026e0:	89fb      	ldrh	r3, [r7, #14]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	0800a054 	.word	0x0800a054

080026f0 <Modbus_VerifyCRC>:

/**
 * @brief Verify CRC of received frame
 */
bool Modbus_VerifyCRC(uint8_t *data, uint16_t length)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
    if (length < 3) return false;
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d801      	bhi.n	8002706 <Modbus_VerifyCRC+0x16>
 8002702:	2300      	movs	r3, #0
 8002704:	e020      	b.n	8002748 <Modbus_VerifyCRC+0x58>
    
    uint16_t received_crc = (data[length - 1] << 8) | data[length - 2];
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	3b01      	subs	r3, #1
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b21b      	sxth	r3, r3
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b21a      	sxth	r2, r3
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	3b02      	subs	r3, #2
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	440b      	add	r3, r1
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	b21b      	sxth	r3, r3
 8002722:	4313      	orrs	r3, r2
 8002724:	b21b      	sxth	r3, r3
 8002726:	81fb      	strh	r3, [r7, #14]
    uint16_t calculated_crc = Modbus_CalculateCRC(data, length - 2);
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	3b02      	subs	r3, #2
 800272c:	b29b      	uxth	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ffb1 	bl	8002698 <Modbus_CalculateCRC>
 8002736:	4603      	mov	r3, r0
 8002738:	81bb      	strh	r3, [r7, #12]
    
    return (received_crc == calculated_crc);
 800273a:	89fa      	ldrh	r2, [r7, #14]
 800273c:	89bb      	ldrh	r3, [r7, #12]
 800273e:	429a      	cmp	r2, r3
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <Modbus_AddCRC>:

/**
 * @brief Add CRC to frame
 */
void Modbus_AddCRC(uint8_t *data, uint16_t length)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = Modbus_CalculateCRC(data, length);
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff99 	bl	8002698 <Modbus_CalculateCRC>
 8002766:	4603      	mov	r3, r0
 8002768:	81fb      	strh	r3, [r7, #14]
    data[length] = crc & 0xFF;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	89fa      	ldrh	r2, [r7, #14]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
    data[length + 1] = (crc >> 8) & 0xFF;
 8002776:	89fb      	ldrh	r3, [r7, #14]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b299      	uxth	r1, r3
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	3301      	adds	r3, #1
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	b2ca      	uxtb	r2, r1
 8002786:	701a      	strb	r2, [r3, #0]
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <PN532_VerifyAck>:

/**
 * @brief Verify ACK response from PN532
 */
static bool PN532_VerifyAck(PN532_Handle_t *hpn532)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	6078      	str	r0, [r7, #4]
    uint8_t ack_buffer[6];
    
    if (HAL_I2C_Master_Receive(hpn532->hi2c, PN532_I2C_ADDRESS << 1, 
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	f107 0208 	add.w	r2, r7, #8
 80027a0:	2364      	movs	r3, #100	@ 0x64
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2306      	movs	r3, #6
 80027a6:	2190      	movs	r1, #144	@ 0x90
 80027a8:	f001 f9ea 	bl	8003b80 <HAL_I2C_Master_Receive>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <PN532_VerifyAck+0x26>
                              ack_buffer, sizeof(ack_buffer), 100) != HAL_OK) {
        return false;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e00c      	b.n	80027d0 <PN532_VerifyAck+0x40>
    }
    
    return (memcmp(ack_buffer, pn532_ack, sizeof(pn532_ack)) == 0);
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	2206      	movs	r2, #6
 80027bc:	4906      	ldr	r1, [pc, #24]	@ (80027d8 <PN532_VerifyAck+0x48>)
 80027be:	4618      	mov	r0, r3
 80027c0:	f006 fdf6 	bl	80093b0 <memcmp>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	0800a254 	.word	0x0800a254

080027dc <PN532_Init>:

/**
 * @brief Initialize PN532
 */
PN532_Status_t PN532_Init(PN532_Handle_t *hpn532, I2C_HandleTypeDef *hi2c)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
    if (!hpn532 || !hi2c) return PN532_STATUS_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <PN532_Init+0x16>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <PN532_Init+0x1a>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e038      	b.n	8002868 <PN532_Init+0x8c>
    
    // Initialize handle
    hpn532->hi2c = hi2c;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	601a      	str	r2, [r3, #0]
    hpn532->mode = PN532_MODE_NFC;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	711a      	strb	r2, [r3, #4]
    hpn532->read_timeout = 1000; // 1 second default
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002808:	61da      	str	r2, [r3, #28]
    hpn532->status = PN532_STATUS_OK;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2020 	strb.w	r2, [r3, #32]
    hpn532->error_code = 0;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    // Clear card info
    memset(&hpn532->card_info, 0, sizeof(PN532_CardInfo_t));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3305      	adds	r3, #5
 800281e:	2210      	movs	r2, #16
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f006 fdd4 	bl	80093d0 <memset>
    
    // Test communication
    uint32_t version;
    if (PN532_GetFirmwareVersion(hpn532, &version) != PN532_STATUS_OK) {
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f844 	bl	80028bc <PN532_GetFirmwareVersion>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <PN532_Init+0x6a>
        hpn532->status = PN532_STATUS_COMM_ERROR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	f883 2020 	strb.w	r2, [r3, #32]
        return PN532_STATUS_COMM_ERROR;
 8002842:	2304      	movs	r3, #4
 8002844:	e010      	b.n	8002868 <PN532_Init+0x8c>
    }
    
    // Configure SAM
    if (PN532_ConfigureSAM(hpn532) != PN532_STATUS_OK) {
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f87c 	bl	8002944 <PN532_ConfigureSAM>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <PN532_Init+0x82>
        hpn532->status = PN532_STATUS_ERROR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2020 	strb.w	r2, [r3, #32]
        return PN532_STATUS_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e004      	b.n	8002868 <PN532_Init+0x8c>
    }
    
    hpn532->status = PN532_STATUS_OK;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2020 	strb.w	r2, [r3, #32]
    return PN532_STATUS_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <PN532_SetMode>:

/**
 * @brief Set PN532 operating mode
 */
PN532_Status_t PN532_SetMode(PN532_Handle_t *hpn532, PN532_Mode_t mode)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
    if (!hpn532) return PN532_STATUS_ERROR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <PN532_SetMode+0x16>
 8002882:	2301      	movs	r3, #1
 8002884:	e016      	b.n	80028b4 <PN532_SetMode+0x44>
    
    hpn532->mode = mode;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	711a      	strb	r2, [r3, #4]
    
    // Configure RF settings based on mode
    uint8_t cmd[4];
    cmd[0] = PN532_COMMAND_RFCONFIGURATION;
 800288c:	2332      	movs	r3, #50	@ 0x32
 800288e:	733b      	strb	r3, [r7, #12]
    cmd[1] = 0x01; // Config item = RF field
 8002890:	2301      	movs	r3, #1
 8002892:	737b      	strb	r3, [r7, #13]
    
    if (mode == PN532_MODE_NFC) {
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <PN532_SetMode+0x30>
        cmd[2] = 0x01; // RF field ON for NFC
 800289a:	2301      	movs	r3, #1
 800289c:	73bb      	strb	r3, [r7, #14]
 800289e:	e001      	b.n	80028a4 <PN532_SetMode+0x34>
    } else {
        cmd[2] = 0x01; // RF field ON for RFID
 80028a0:	2301      	movs	r3, #1
 80028a2:	73bb      	strb	r3, [r7, #14]
    }
    
    return PN532_WriteCommand(hpn532, cmd, 3);
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	2203      	movs	r2, #3
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f949 	bl	8002b44 <PN532_WriteCommand>
 80028b2:	4603      	mov	r3, r0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <PN532_GetFirmwareVersion>:

/**
 * @brief Get PN532 firmware version
 */
PN532_Status_t PN532_GetFirmwareVersion(PN532_Handle_t *hpn532, uint32_t *version)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
    if (!hpn532 || !version) return PN532_STATUS_ERROR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <PN532_GetFirmwareVersion+0x16>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <PN532_GetFirmwareVersion+0x1a>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e032      	b.n	800293c <PN532_GetFirmwareVersion+0x80>
    
    uint8_t cmd = PN532_COMMAND_GETFIRMWAREVERSION;
 80028d6:	2302      	movs	r3, #2
 80028d8:	77fb      	strb	r3, [r7, #31]
    uint8_t response[12];
    uint8_t response_len = sizeof(response);
 80028da:	230c      	movs	r3, #12
 80028dc:	73fb      	strb	r3, [r7, #15]
    
    if (PN532_WriteCommand(hpn532, &cmd, 1) != PN532_STATUS_OK) {
 80028de:	f107 031f 	add.w	r3, r7, #31
 80028e2:	2201      	movs	r2, #1
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f92c 	bl	8002b44 <PN532_WriteCommand>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <PN532_GetFirmwareVersion+0x3a>
        return PN532_STATUS_COMM_ERROR;
 80028f2:	2304      	movs	r3, #4
 80028f4:	e022      	b.n	800293c <PN532_GetFirmwareVersion+0x80>
    }
    
    if (PN532_ReadResponse(hpn532, response, &response_len) != PN532_STATUS_OK) {
 80028f6:	f107 020f 	add.w	r2, r7, #15
 80028fa:	f107 0310 	add.w	r3, r7, #16
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f9e6 	bl	8002cd2 <PN532_ReadResponse>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <PN532_GetFirmwareVersion+0x54>
        return PN532_STATUS_COMM_ERROR;
 800290c:	2304      	movs	r3, #4
 800290e:	e015      	b.n	800293c <PN532_GetFirmwareVersion+0x80>
    }
    
    if (response_len >= 4 && response[0] == (PN532_COMMAND_GETFIRMWAREVERSION + 1)) {
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d911      	bls.n	800293a <PN532_GetFirmwareVersion+0x7e>
 8002916:	7c3b      	ldrb	r3, [r7, #16]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d10e      	bne.n	800293a <PN532_GetFirmwareVersion+0x7e>
        *version = (response[1] << 24) | (response[2] << 16) | (response[3] << 8) | response[4];
 800291c:	7c7b      	ldrb	r3, [r7, #17]
 800291e:	061a      	lsls	r2, r3, #24
 8002920:	7cbb      	ldrb	r3, [r7, #18]
 8002922:	041b      	lsls	r3, r3, #16
 8002924:	431a      	orrs	r2, r3
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	4313      	orrs	r3, r2
 800292c:	7d3a      	ldrb	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	461a      	mov	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	601a      	str	r2, [r3, #0]
        return PN532_STATUS_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e000      	b.n	800293c <PN532_GetFirmwareVersion+0x80>
    }
    
    return PN532_STATUS_ERROR;
 800293a:	2301      	movs	r3, #1
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <PN532_ConfigureSAM>:

/**
 * @brief Configure SAM (Security Access Module)
 */
PN532_Status_t PN532_ConfigureSAM(PN532_Handle_t *hpn532)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
    if (!hpn532) return PN532_STATUS_ERROR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <PN532_ConfigureSAM+0x12>
 8002952:	2301      	movs	r3, #1
 8002954:	e023      	b.n	800299e <PN532_ConfigureSAM+0x5a>
    
    uint8_t cmd[4];
    cmd[0] = PN532_COMMAND_SAMCONFIGURATION;
 8002956:	2314      	movs	r3, #20
 8002958:	753b      	strb	r3, [r7, #20]
    cmd[1] = 0x01; // Normal mode
 800295a:	2301      	movs	r3, #1
 800295c:	757b      	strb	r3, [r7, #21]
    cmd[2] = 0x14; // Timeout 50ms * 20 = 1 second
 800295e:	2314      	movs	r3, #20
 8002960:	75bb      	strb	r3, [r7, #22]
    cmd[3] = 0x01; // Use IRQ pin
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
    
    uint8_t response[8];
    uint8_t response_len = sizeof(response);
 8002966:	2308      	movs	r3, #8
 8002968:	72fb      	strb	r3, [r7, #11]
    
    if (PN532_WriteCommand(hpn532, cmd, 4) != PN532_STATUS_OK) {
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	2204      	movs	r2, #4
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8e6 	bl	8002b44 <PN532_WriteCommand>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <PN532_ConfigureSAM+0x3e>
        return PN532_STATUS_COMM_ERROR;
 800297e:	2304      	movs	r3, #4
 8002980:	e00d      	b.n	800299e <PN532_ConfigureSAM+0x5a>
    }
    
    if (PN532_ReadResponse(hpn532, response, &response_len) != PN532_STATUS_OK) {
 8002982:	f107 020b 	add.w	r2, r7, #11
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f9a0 	bl	8002cd2 <PN532_ReadResponse>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <PN532_ConfigureSAM+0x58>
        return PN532_STATUS_COMM_ERROR;
 8002998:	2304      	movs	r3, #4
 800299a:	e000      	b.n	800299e <PN532_ConfigureSAM+0x5a>
    }
    
    return PN532_STATUS_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <PN532_ReadCard>:

/**
 * @brief Read card/tag
 */
PN532_Status_t PN532_ReadCard(PN532_Handle_t *hpn532)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
    if (!hpn532) return PN532_STATUS_ERROR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <PN532_ReadCard+0x12>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e003      	b.n	80029c0 <PN532_ReadCard+0x1a>
    
    return PN532_ReadPassiveTarget(hpn532);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f805 	bl	80029c8 <PN532_ReadPassiveTarget>
 80029be:	4603      	mov	r3, r0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <PN532_ReadPassiveTarget>:

/**
 * @brief Read passive target (card/tag)
 */
PN532_Status_t PN532_ReadPassiveTarget(PN532_Handle_t *hpn532)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	@ 0x30
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    if (!hpn532) return PN532_STATUS_ERROR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <PN532_ReadPassiveTarget+0x12>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e063      	b.n	8002aa2 <PN532_ReadPassiveTarget+0xda>
    
    uint8_t cmd[3];
    cmd[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 80029da:	234a      	movs	r3, #74	@ 0x4a
 80029dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    cmd[1] = 0x01; // Max 1 card
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    cmd[2] = PN532_MIFARE_ISO14443A; // Card type
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    
    uint8_t response[32];
    uint8_t response_len = sizeof(response);
 80029ec:	2320      	movs	r3, #32
 80029ee:	72fb      	strb	r3, [r7, #11]
    
    if (PN532_WriteCommand(hpn532, cmd, 3) != PN532_STATUS_OK) {
 80029f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f4:	2203      	movs	r2, #3
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f8a3 	bl	8002b44 <PN532_WriteCommand>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <PN532_ReadPassiveTarget+0x46>
        hpn532->card_info.card_present = false;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	751a      	strb	r2, [r3, #20]
        return PN532_STATUS_COMM_ERROR;
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e049      	b.n	8002aa2 <PN532_ReadPassiveTarget+0xda>
    }
    
    if (PN532_ReadResponse(hpn532, response, &response_len) != PN532_STATUS_OK) {
 8002a0e:	f107 020b 	add.w	r2, r7, #11
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f95a 	bl	8002cd2 <PN532_ReadResponse>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <PN532_ReadPassiveTarget+0x66>
        hpn532->card_info.card_present = false;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	751a      	strb	r2, [r3, #20]
        return PN532_STATUS_COMM_ERROR;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	e039      	b.n	8002aa2 <PN532_ReadPassiveTarget+0xda>
    }
    
    // Check if card detected
    if (response_len < 2 || response[1] == 0) {
 8002a2e:	7afb      	ldrb	r3, [r7, #11]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d902      	bls.n	8002a3a <PN532_ReadPassiveTarget+0x72>
 8002a34:	7b7b      	ldrb	r3, [r7, #13]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <PN532_ReadPassiveTarget+0x7c>
        hpn532->card_info.card_present = false;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	751a      	strb	r2, [r3, #20]
        return PN532_STATUS_NO_CARD;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e02e      	b.n	8002aa2 <PN532_ReadPassiveTarget+0xda>
    }
    
    // Parse card information
    if (response_len >= 7) {
 8002a44:	7afb      	ldrb	r3, [r7, #11]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d927      	bls.n	8002a9a <PN532_ReadPassiveTarget+0xd2>
        hpn532->card_info.card_present = true;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	751a      	strb	r2, [r3, #20]
        hpn532->card_info.card_type = PN532_MIFARE_ISO14443A;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	715a      	strb	r2, [r3, #5]
        
        // ATQA
        hpn532->card_info.atqa[0] = response[2];
 8002a56:	7bba      	ldrb	r2, [r7, #14]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	749a      	strb	r2, [r3, #18]
        hpn532->card_info.atqa[1] = response[3];
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	74da      	strb	r2, [r3, #19]
        
        // SAK
        hpn532->card_info.sak = response[4];
 8002a62:	7c3a      	ldrb	r2, [r7, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	745a      	strb	r2, [r3, #17]
        
        // UID length and UID
        hpn532->card_info.uid_length = response[5];
 8002a68:	7c7a      	ldrb	r2, [r7, #17]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	719a      	strb	r2, [r3, #6]
        if (hpn532->card_info.uid_length <= 10) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	799b      	ldrb	r3, [r3, #6]
 8002a72:	2b0a      	cmp	r3, #10
 8002a74:	d80a      	bhi.n	8002a8c <PN532_ReadPassiveTarget+0xc4>
            memcpy(hpn532->card_info.uid, &response[6], hpn532->card_info.uid_length);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	1dd8      	adds	r0, r3, #7
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	799b      	ldrb	r3, [r3, #6]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	3306      	adds	r3, #6
 8002a86:	4619      	mov	r1, r3
 8002a88:	f006 fcd6 	bl	8009438 <memcpy>
        }
        
        hpn532->last_read_time = HAL_GetTick();
 8002a8c:	f000 fba0 	bl	80031d0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
        return PN532_STATUS_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e003      	b.n	8002aa2 <PN532_ReadPassiveTarget+0xda>
    }
    
    hpn532->card_info.card_present = false;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	751a      	strb	r2, [r3, #20]
    return PN532_STATUS_ERROR;
 8002aa0:	2301      	movs	r3, #1
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3730      	adds	r7, #48	@ 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <PN532_IsCardPresent>:

/**
 * @brief Check if card is present
 */
bool PN532_IsCardPresent(PN532_Handle_t *hpn532)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
    if (!hpn532) return false;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <PN532_IsCardPresent+0x12>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e00e      	b.n	8002ada <PN532_IsCardPresent+0x30>
    
    // Check timeout
    if (HAL_GetTick() - hpn532->last_read_time > hpn532->read_timeout) {
 8002abc:	f000 fb88 	bl	80031d0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	1ad2      	subs	r2, r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d902      	bls.n	8002ad6 <PN532_IsCardPresent+0x2c>
        hpn532->card_info.card_present = false;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	751a      	strb	r2, [r3, #20]
    }
    
    return hpn532->card_info.card_present;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7d1b      	ldrb	r3, [r3, #20]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <PN532_GetCardUID>:

/**
 * @brief Get card UID
 */
uint8_t* PN532_GetCardUID(PN532_Handle_t *hpn532)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
    if (!hpn532) return NULL;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <PN532_GetCardUID+0x12>
 8002af0:	2300      	movs	r3, #0
 8002af2:	e001      	b.n	8002af8 <PN532_GetCardUID+0x16>
    return hpn532->card_info.uid;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3307      	adds	r3, #7
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <PN532_GetCardType>:

/**
 * @brief Get card type
 */
uint8_t PN532_GetCardType(PN532_Handle_t *hpn532)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
    if (!hpn532) return 0xFF;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <PN532_GetCardType+0x12>
 8002b10:	23ff      	movs	r3, #255	@ 0xff
 8002b12:	e001      	b.n	8002b18 <PN532_GetCardType+0x16>
    return hpn532->card_info.card_type;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	795b      	ldrb	r3, [r3, #5]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <PN532_GetErrorCode>:

/**
 * @brief Get error code
 */
uint8_t PN532_GetErrorCode(PN532_Handle_t *hpn532)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
    if (!hpn532) return 0xFF;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <PN532_GetErrorCode+0x12>
 8002b30:	23ff      	movs	r3, #255	@ 0xff
 8002b32:	e002      	b.n	8002b3a <PN532_GetErrorCode+0x18>
    return hpn532->error_code;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <PN532_WriteCommand>:

/**
 * @brief Write command to PN532
 */
PN532_Status_t PN532_WriteCommand(PN532_Handle_t *hpn532, uint8_t *cmd, uint8_t cmd_len)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b090      	sub	sp, #64	@ 0x40
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	71fb      	strb	r3, [r7, #7]
    if (!hpn532 || !cmd) return PN532_STATUS_ERROR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <PN532_WriteCommand+0x1a>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <PN532_WriteCommand+0x1e>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0b3      	b.n	8002cca <PN532_WriteCommand+0x186>
    
    uint8_t frame[32];
    uint8_t frame_len = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    
    // Build frame
    frame[frame_len++] = PN532_PREAMBLE;
 8002b68:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002b72:	3338      	adds	r3, #56	@ 0x38
 8002b74:	443b      	add	r3, r7
 8002b76:	2200      	movs	r2, #0
 8002b78:	f803 2c24 	strb.w	r2, [r3, #-36]
    frame[frame_len++] = PN532_STARTCODE1;
 8002b7c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002b86:	3338      	adds	r3, #56	@ 0x38
 8002b88:	443b      	add	r3, r7
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f803 2c24 	strb.w	r2, [r3, #-36]
    frame[frame_len++] = PN532_STARTCODE2;
 8002b90:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002b9a:	3338      	adds	r3, #56	@ 0x38
 8002b9c:	443b      	add	r3, r7
 8002b9e:	22ff      	movs	r2, #255	@ 0xff
 8002ba0:	f803 2c24 	strb.w	r2, [r3, #-36]
    frame[frame_len++] = cmd_len + 1; // Length
 8002ba4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002bae:	4619      	mov	r1, r3
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8002bba:	443b      	add	r3, r7
 8002bbc:	f803 2c24 	strb.w	r2, [r3, #-36]
    frame[frame_len++] = (~(cmd_len + 1)) + 1; // Length checksum
 8002bc0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002bca:	4619      	mov	r1, r3
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8002bd6:	443b      	add	r3, r7
 8002bd8:	f803 2c24 	strb.w	r2, [r3, #-36]
    frame[frame_len++] = PN532_HOSTTOPN532; // Direction
 8002bdc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002be6:	3338      	adds	r3, #56	@ 0x38
 8002be8:	443b      	add	r3, r7
 8002bea:	22d4      	movs	r2, #212	@ 0xd4
 8002bec:	f803 2c24 	strb.w	r2, [r3, #-36]
    
    // Copy command
    memcpy(&frame[frame_len], cmd, cmd_len);
 8002bf0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002bf4:	f107 0214 	add.w	r2, r7, #20
 8002bf8:	4413      	add	r3, r2
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f006 fc1a 	bl	8009438 <memcpy>
    frame_len += cmd_len;
 8002c04:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    
    // Calculate and add data checksum
    uint8_t checksum = PN532_HOSTTOPN532;
 8002c10:	23d4      	movs	r3, #212	@ 0xd4
 8002c12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (uint8_t i = 0; i < cmd_len; i++) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002c1c:	e00e      	b.n	8002c3c <PN532_WriteCommand+0xf8>
        checksum += cmd[i];
 8002c1e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4413      	add	r3, r2
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (uint8_t i = 0; i < cmd_len; i++) {
 8002c32:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002c36:	3301      	adds	r3, #1
 8002c38:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002c3c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3eb      	bcc.n	8002c1e <PN532_WriteCommand+0xda>
    }
    frame[frame_len++] = (~checksum) + 1;
 8002c46:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002c50:	4619      	mov	r1, r3
 8002c52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c56:	425b      	negs	r3, r3
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	f101 0338 	add.w	r3, r1, #56	@ 0x38
 8002c5e:	443b      	add	r3, r7
 8002c60:	f803 2c24 	strb.w	r2, [r3, #-36]
    
    frame[frame_len++] = PN532_POSTAMBLE;
 8002c64:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002c6e:	3338      	adds	r3, #56	@ 0x38
 8002c70:	443b      	add	r3, r7
 8002c72:	2200      	movs	r2, #0
 8002c74:	f803 2c24 	strb.w	r2, [r3, #-36]
    
    // Send frame
    if (HAL_I2C_Master_Transmit(hpn532->hi2c, PN532_I2C_ADDRESS << 1, frame, frame_len, PN532_TIMEOUT_MS) != HAL_OK) {
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f107 0214 	add.w	r2, r7, #20
 8002c86:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c8a:	9100      	str	r1, [sp, #0]
 8002c8c:	2190      	movs	r1, #144	@ 0x90
 8002c8e:	f000 fe79 	bl	8003984 <HAL_I2C_Master_Transmit>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <PN532_WriteCommand+0x160>
        hpn532->status = PN532_STATUS_COMM_ERROR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]
        return PN532_STATUS_COMM_ERROR;
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	e012      	b.n	8002cca <PN532_WriteCommand+0x186>
    }
    
    // Wait for ACK
    HAL_Delay(PN532_ACK_WAIT_TIME);
 8002ca4:	200a      	movs	r0, #10
 8002ca6:	f000 fa9d 	bl	80031e4 <HAL_Delay>
    
    // Verify ACK (optional - can be enabled for more robust communication)
    if (!PN532_VerifyAck(hpn532)) {
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff fd70 	bl	8002790 <PN532_VerifyAck>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f083 0301 	eor.w	r3, r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <PN532_WriteCommand+0x184>
        hpn532->status = PN532_STATUS_COMM_ERROR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]
        return PN532_STATUS_COMM_ERROR;
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e000      	b.n	8002cca <PN532_WriteCommand+0x186>
    }
    
    return PN532_STATUS_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3738      	adds	r7, #56	@ 0x38
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <PN532_ReadResponse>:

/**
 * @brief Read response from PN532
 */
PN532_Status_t PN532_ReadResponse(PN532_Handle_t *hpn532, uint8_t *response, uint8_t *response_len)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b098      	sub	sp, #96	@ 0x60
 8002cd6:	af02      	add	r7, sp, #8
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
    if (!hpn532 || !response || !response_len) return PN532_STATUS_ERROR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <PN532_ReadResponse+0x1e>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <PN532_ReadResponse+0x1e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <PN532_ReadResponse+0x22>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e05c      	b.n	8002dae <PN532_ReadResponse+0xdc>
    
    uint8_t buffer[64];
    uint8_t max_len = *response_len;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    
    // Wait for response ready
    if (PN532_WaitReady(hpn532, PN532_TIMEOUT_MS) != PN532_STATUS_OK) {
 8002cfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f858 	bl	8002db6 <PN532_WaitReady>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <PN532_ReadResponse+0x3e>
        return PN532_STATUS_TIMEOUT;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e04e      	b.n	8002dae <PN532_ReadResponse+0xdc>
    }
    
    // Read response
    if (HAL_I2C_Master_Receive(hpn532->hi2c, PN532_I2C_ADDRESS << 1, buffer, sizeof(buffer), PN532_TIMEOUT_MS) != HAL_OK) {
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	f107 0214 	add.w	r2, r7, #20
 8002d18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	2340      	movs	r3, #64	@ 0x40
 8002d20:	2190      	movs	r1, #144	@ 0x90
 8002d22:	f000 ff2d 	bl	8003b80 <HAL_I2C_Master_Receive>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <PN532_ReadResponse+0x66>
        hpn532->status = PN532_STATUS_COMM_ERROR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	f883 2020 	strb.w	r2, [r3, #32]
        return PN532_STATUS_COMM_ERROR;
 8002d34:	2304      	movs	r3, #4
 8002d36:	e03a      	b.n	8002dae <PN532_ReadResponse+0xdc>
    }
    
    // Parse response frame
    if (buffer[0] == 0x00 && buffer[1] == 0x00 && buffer[2] == 0xFF) {
 8002d38:	7d3b      	ldrb	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d136      	bne.n	8002dac <PN532_ReadResponse+0xda>
 8002d3e:	7d7b      	ldrb	r3, [r7, #21]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d133      	bne.n	8002dac <PN532_ReadResponse+0xda>
 8002d44:	7dbb      	ldrb	r3, [r7, #22]
 8002d46:	2bff      	cmp	r3, #255	@ 0xff
 8002d48:	d130      	bne.n	8002dac <PN532_ReadResponse+0xda>
        uint8_t len = buffer[3];
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        uint8_t len_checksum = buffer[4];
 8002d50:	7e3b      	ldrb	r3, [r7, #24]
 8002d52:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
        
        // Verify length checksum
        if ((uint8_t)(len + len_checksum) != 0) {
 8002d56:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8002d5a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002d5e:	4413      	add	r3, r2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <PN532_ReadResponse+0x98>
            return PN532_STATUS_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e021      	b.n	8002dae <PN532_ReadResponse+0xdc>
        }
        
        // Extract data
        if (len > 0 && buffer[5] == PN532_PN532TOHOST) {
 8002d6a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01c      	beq.n	8002dac <PN532_ReadResponse+0xda>
 8002d72:	7e7b      	ldrb	r3, [r7, #25]
 8002d74:	2bd5      	cmp	r3, #213	@ 0xd5
 8002d76:	d119      	bne.n	8002dac <PN532_ReadResponse+0xda>
            uint8_t data_len = len - 1;
 8002d78:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            if (data_len <= max_len) {
 8002d82:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8002d86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d80e      	bhi.n	8002dac <PN532_ReadResponse+0xda>
                memcpy(response, &buffer[6], data_len);
 8002d8e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	3306      	adds	r3, #6
 8002d98:	4619      	mov	r1, r3
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	f006 fb4c 	bl	8009438 <memcpy>
                *response_len = data_len;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8002da6:	701a      	strb	r2, [r3, #0]
                return PN532_STATUS_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <PN532_ReadResponse+0xdc>
            }
        }
    }
    
    return PN532_STATUS_ERROR;
 8002dac:	2301      	movs	r3, #1
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3758      	adds	r7, #88	@ 0x58
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <PN532_WaitReady>:

/**
 * @brief Wait for PN532 ready
 */
PN532_Status_t PN532_WaitReady(PN532_Handle_t *hpn532, uint32_t timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af02      	add	r7, sp, #8
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
    if (!hpn532) return PN532_STATUS_ERROR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <PN532_WaitReady+0x14>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e021      	b.n	8002e0e <PN532_WaitReady+0x58>
    
    uint32_t start_time = HAL_GetTick();
 8002dca:	f000 fa01 	bl	80031d0 <HAL_GetTick>
 8002dce:	60f8      	str	r0, [r7, #12]
    uint8_t status;
    
    while (HAL_GetTick() - start_time < timeout) {
 8002dd0:	e014      	b.n	8002dfc <PN532_WaitReady+0x46>
        if (HAL_I2C_Master_Receive(hpn532->hi2c, PN532_I2C_ADDRESS << 1, &status, 1, 10) == HAL_OK) {
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	f107 020b 	add.w	r2, r7, #11
 8002dda:	230a      	movs	r3, #10
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2301      	movs	r3, #1
 8002de0:	2190      	movs	r1, #144	@ 0x90
 8002de2:	f000 fecd 	bl	8003b80 <HAL_I2C_Master_Receive>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <PN532_WaitReady+0x40>
            if (status == 0x01) { // Ready
 8002dec:	7afb      	ldrb	r3, [r7, #11]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <PN532_WaitReady+0x40>
                return PN532_STATUS_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e00b      	b.n	8002e0e <PN532_WaitReady+0x58>
            }
        }
        HAL_Delay(5);
 8002df6:	2005      	movs	r0, #5
 8002df8:	f000 f9f4 	bl	80031e4 <HAL_Delay>
    while (HAL_GetTick() - start_time < timeout) {
 8002dfc:	f000 f9e8 	bl	80031d0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8e2      	bhi.n	8002dd2 <PN532_WaitReady+0x1c>
    }
    
    return PN532_STATUS_TIMEOUT;
 8002e0c:	2302      	movs	r3, #2
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e1e:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <HAL_MspInit+0x68>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <HAL_MspInit+0x68>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6193      	str	r3, [r2, #24]
 8002e2a:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <HAL_MspInit+0x68>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <HAL_MspInit+0x68>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <HAL_MspInit+0x68>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <HAL_MspInit+0x68>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	210f      	movs	r1, #15
 8002e52:	f06f 0001 	mvn.w	r0, #1
 8002e56:	f000 faa4 	bl	80033a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_MspInit+0x6c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <HAL_MspInit+0x6c>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40010000 	.word	0x40010000

08002e88 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	@ (8002ef8 <HAL_I2C_MspInit+0x70>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d123      	bne.n	8002ef0 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea8:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_I2C_MspInit+0x74>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <HAL_I2C_MspInit+0x74>)
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_I2C_MspInit+0x74>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ec0:	23c0      	movs	r3, #192	@ 0xc0
 8002ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec4:	2312      	movs	r3, #18
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	480b      	ldr	r0, [pc, #44]	@ (8002f00 <HAL_I2C_MspInit+0x78>)
 8002ed4:	f000 fa8e 	bl	80033f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ed8:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <HAL_I2C_MspInit+0x74>)
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	4a07      	ldr	r2, [pc, #28]	@ (8002efc <HAL_I2C_MspInit+0x74>)
 8002ede:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ee2:	61d3      	str	r3, [r2, #28]
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <HAL_I2C_MspInit+0x74>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002ef0:	bf00      	nop
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40005400 	.word	0x40005400
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010c00 	.word	0x40010c00

08002f04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	@ 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0318 	add.w	r3, r7, #24
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a37      	ldr	r2, [pc, #220]	@ (8002ffc <HAL_UART_MspInit+0xf8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d132      	bne.n	8002f8a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f24:	4b36      	ldr	r3, [pc, #216]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4a35      	ldr	r2, [pc, #212]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b33      	ldr	r3, [pc, #204]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3c:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a2f      	ldr	r2, [pc, #188]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f62:	f107 0318 	add.w	r3, r7, #24
 8002f66:	4619      	mov	r1, r3
 8002f68:	4826      	ldr	r0, [pc, #152]	@ (8003004 <HAL_UART_MspInit+0x100>)
 8002f6a:	f000 fa43 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7c:	f107 0318 	add.w	r3, r7, #24
 8002f80:	4619      	mov	r1, r3
 8002f82:	4820      	ldr	r0, [pc, #128]	@ (8003004 <HAL_UART_MspInit+0x100>)
 8002f84:	f000 fa36 	bl	80033f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f88:	e034      	b.n	8002ff4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003008 <HAL_UART_MspInit+0x104>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d12f      	bne.n	8002ff4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f94:	4b1a      	ldr	r3, [pc, #104]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	4a19      	ldr	r2, [pc, #100]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9e:	61d3      	str	r3, [r2, #28]
 8002fa0:	4b17      	ldr	r3, [pc, #92]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fac:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	6193      	str	r3, [r2, #24]
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <HAL_UART_MspInit+0xfc>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd0:	f107 0318 	add.w	r3, r7, #24
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	480b      	ldr	r0, [pc, #44]	@ (8003004 <HAL_UART_MspInit+0x100>)
 8002fd8:	f000 fa0c 	bl	80033f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fdc:	2308      	movs	r3, #8
 8002fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe8:	f107 0318 	add.w	r3, r7, #24
 8002fec:	4619      	mov	r1, r3
 8002fee:	4805      	ldr	r0, [pc, #20]	@ (8003004 <HAL_UART_MspInit+0x100>)
 8002ff0:	f000 fa00 	bl	80033f4 <HAL_GPIO_Init>
}
 8002ff4:	bf00      	nop
 8002ff6:	3728      	adds	r7, #40	@ 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40021000 	.word	0x40021000
 8003004:	40010800 	.word	0x40010800
 8003008:	40004400 	.word	0x40004400

0800300c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <NMI_Handler+0x4>

08003014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <HardFault_Handler+0x4>

0800301c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <MemManage_Handler+0x4>

08003024 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <BusFault_Handler+0x4>

0800302c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <UsageFault_Handler+0x4>

08003034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003044:	f000 f8b2 	bl	80031ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003048:	f005 f828 	bl	800809c <xTaskGetSchedulerState>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003052:	f005 ff01 	bl	8008e58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003064:	4a14      	ldr	r2, [pc, #80]	@ (80030b8 <_sbrk+0x5c>)
 8003066:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <_sbrk+0x60>)
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003070:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <_sbrk+0x64>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003078:	4b11      	ldr	r3, [pc, #68]	@ (80030c0 <_sbrk+0x64>)
 800307a:	4a12      	ldr	r2, [pc, #72]	@ (80030c4 <_sbrk+0x68>)
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d207      	bcs.n	800309c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800308c:	f006 f9a8 	bl	80093e0 <__errno>
 8003090:	4603      	mov	r3, r0
 8003092:	220c      	movs	r2, #12
 8003094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	e009      	b.n	80030b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800309c:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <_sbrk+0x64>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030a2:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <_sbrk+0x64>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	4a05      	ldr	r2, [pc, #20]	@ (80030c0 <_sbrk+0x64>)
 80030ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20005000 	.word	0x20005000
 80030bc:	00000400 	.word	0x00000400
 80030c0:	2000149c 	.word	0x2000149c
 80030c4:	20002f40 	.word	0x20002f40

080030c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030d4:	f7ff fff8 	bl	80030c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d8:	480b      	ldr	r0, [pc, #44]	@ (8003108 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80030da:	490c      	ldr	r1, [pc, #48]	@ (800310c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003110 <LoopFillZerobss+0x16>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e0:	e002      	b.n	80030e8 <LoopCopyDataInit>

080030e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e6:	3304      	adds	r3, #4

080030e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ec:	d3f9      	bcc.n	80030e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ee:	4a09      	ldr	r2, [pc, #36]	@ (8003114 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030f0:	4c09      	ldr	r4, [pc, #36]	@ (8003118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f4:	e001      	b.n	80030fa <LoopFillZerobss>

080030f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f8:	3204      	adds	r2, #4

080030fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030fc:	d3fb      	bcc.n	80030f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030fe:	f006 f975 	bl	80093ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003102:	f7fd ff33 	bl	8000f6c <main>
  bx lr
 8003106:	4770      	bx	lr
  ldr r0, =_sdata
 8003108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800310c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003110:	0800a2cc 	.word	0x0800a2cc
  ldr r2, =_sbss
 8003114:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003118:	20002f3c 	.word	0x20002f3c

0800311c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800311c:	e7fe      	b.n	800311c <ADC1_2_IRQHandler>
	...

08003120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	@ (8003148 <HAL_Init+0x28>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a07      	ldr	r2, [pc, #28]	@ (8003148 <HAL_Init+0x28>)
 800312a:	f043 0310 	orr.w	r3, r3, #16
 800312e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003130:	2003      	movs	r0, #3
 8003132:	f000 f92b 	bl	800338c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003136:	200f      	movs	r0, #15
 8003138:	f000 f808 	bl	800314c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800313c:	f7ff fe6c 	bl	8002e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40022000 	.word	0x40022000

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003154:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <HAL_InitTick+0x54>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <HAL_InitTick+0x58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f935 	bl	80033da <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00e      	b.n	8003198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d80a      	bhi.n	8003196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	2200      	movs	r2, #0
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f000 f90b 	bl	80033a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4a06      	ldr	r2, [pc, #24]	@ (80031a8 <HAL_InitTick+0x5c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000008 	.word	0x20000008
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_IncTick+0x1c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <HAL_IncTick+0x20>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a03      	ldr	r2, [pc, #12]	@ (80031cc <HAL_IncTick+0x20>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20000008 	.word	0x20000008
 80031cc:	200014a0 	.word	0x200014a0

080031d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b02      	ldr	r3, [pc, #8]	@ (80031e0 <HAL_GetTick+0x10>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	200014a0 	.word	0x200014a0

080031e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff fff0 	bl	80031d0 <HAL_GetTick>
 80031f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d005      	beq.n	800320a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003228 <HAL_Delay+0x44>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800320a:	bf00      	nop
 800320c:	f7ff ffe0 	bl	80031d0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d8f7      	bhi.n	800320c <HAL_Delay+0x28>
  {
  }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000008 	.word	0x20000008

0800322c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <__NVIC_GetPriorityGrouping+0x18>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0307 	and.w	r3, r3, #7
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	db0a      	blt.n	80032ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	490c      	ldr	r1, [pc, #48]	@ (80032dc <__NVIC_SetPriority+0x4c>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	440b      	add	r3, r1
 80032b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b8:	e00a      	b.n	80032d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4908      	ldr	r1, [pc, #32]	@ (80032e0 <__NVIC_SetPriority+0x50>)
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	3b04      	subs	r3, #4
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	440b      	add	r3, r1
 80032ce:	761a      	strb	r2, [r3, #24]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000e100 	.word	0xe000e100
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	@ 0x24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f1c3 0307 	rsb	r3, r3, #7
 80032fe:	2b04      	cmp	r3, #4
 8003300:	bf28      	it	cs
 8003302:	2304      	movcs	r3, #4
 8003304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3304      	adds	r3, #4
 800330a:	2b06      	cmp	r3, #6
 800330c:	d902      	bls.n	8003314 <NVIC_EncodePriority+0x30>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3b03      	subs	r3, #3
 8003312:	e000      	b.n	8003316 <NVIC_EncodePriority+0x32>
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	f04f 32ff 	mov.w	r2, #4294967295
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	401a      	ands	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800332c:	f04f 31ff 	mov.w	r1, #4294967295
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43d9      	mvns	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	4313      	orrs	r3, r2
         );
}
 800333e:	4618      	mov	r0, r3
 8003340:	3724      	adds	r7, #36	@ 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003358:	d301      	bcc.n	800335e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335a:	2301      	movs	r3, #1
 800335c:	e00f      	b.n	800337e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335e:	4a0a      	ldr	r2, [pc, #40]	@ (8003388 <SysTick_Config+0x40>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003366:	210f      	movs	r1, #15
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	f7ff ff90 	bl	8003290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <SysTick_Config+0x40>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003376:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <SysTick_Config+0x40>)
 8003378:	2207      	movs	r2, #7
 800337a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000e010 	.word	0xe000e010

0800338c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff49 	bl	800322c <__NVIC_SetPriorityGrouping>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b4:	f7ff ff5e 	bl	8003274 <__NVIC_GetPriorityGrouping>
 80033b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff ff90 	bl	80032e4 <NVIC_EncodePriority>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff5f 	bl	8003290 <__NVIC_SetPriority>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffb0 	bl	8003348 <SysTick_Config>
 80033e8:	4603      	mov	r3, r0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b08b      	sub	sp, #44	@ 0x2c
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003406:	e169      	b.n	80036dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003408:	2201      	movs	r2, #1
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	429a      	cmp	r2, r3
 8003422:	f040 8158 	bne.w	80036d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4a9a      	ldr	r2, [pc, #616]	@ (8003694 <HAL_GPIO_Init+0x2a0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d05e      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 8003430:	4a98      	ldr	r2, [pc, #608]	@ (8003694 <HAL_GPIO_Init+0x2a0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d875      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 8003436:	4a98      	ldr	r2, [pc, #608]	@ (8003698 <HAL_GPIO_Init+0x2a4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d058      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 800343c:	4a96      	ldr	r2, [pc, #600]	@ (8003698 <HAL_GPIO_Init+0x2a4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d86f      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 8003442:	4a96      	ldr	r2, [pc, #600]	@ (800369c <HAL_GPIO_Init+0x2a8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d052      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 8003448:	4a94      	ldr	r2, [pc, #592]	@ (800369c <HAL_GPIO_Init+0x2a8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d869      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 800344e:	4a94      	ldr	r2, [pc, #592]	@ (80036a0 <HAL_GPIO_Init+0x2ac>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d04c      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 8003454:	4a92      	ldr	r2, [pc, #584]	@ (80036a0 <HAL_GPIO_Init+0x2ac>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d863      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 800345a:	4a92      	ldr	r2, [pc, #584]	@ (80036a4 <HAL_GPIO_Init+0x2b0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d046      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
 8003460:	4a90      	ldr	r2, [pc, #576]	@ (80036a4 <HAL_GPIO_Init+0x2b0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d85d      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 8003466:	2b12      	cmp	r3, #18
 8003468:	d82a      	bhi.n	80034c0 <HAL_GPIO_Init+0xcc>
 800346a:	2b12      	cmp	r3, #18
 800346c:	d859      	bhi.n	8003522 <HAL_GPIO_Init+0x12e>
 800346e:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <HAL_GPIO_Init+0x80>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	080034ef 	.word	0x080034ef
 8003478:	080034c9 	.word	0x080034c9
 800347c:	080034db 	.word	0x080034db
 8003480:	0800351d 	.word	0x0800351d
 8003484:	08003523 	.word	0x08003523
 8003488:	08003523 	.word	0x08003523
 800348c:	08003523 	.word	0x08003523
 8003490:	08003523 	.word	0x08003523
 8003494:	08003523 	.word	0x08003523
 8003498:	08003523 	.word	0x08003523
 800349c:	08003523 	.word	0x08003523
 80034a0:	08003523 	.word	0x08003523
 80034a4:	08003523 	.word	0x08003523
 80034a8:	08003523 	.word	0x08003523
 80034ac:	08003523 	.word	0x08003523
 80034b0:	08003523 	.word	0x08003523
 80034b4:	08003523 	.word	0x08003523
 80034b8:	080034d1 	.word	0x080034d1
 80034bc:	080034e5 	.word	0x080034e5
 80034c0:	4a79      	ldr	r2, [pc, #484]	@ (80036a8 <HAL_GPIO_Init+0x2b4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034c6:	e02c      	b.n	8003522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	623b      	str	r3, [r7, #32]
          break;
 80034ce:	e029      	b.n	8003524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	3304      	adds	r3, #4
 80034d6:	623b      	str	r3, [r7, #32]
          break;
 80034d8:	e024      	b.n	8003524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	3308      	adds	r3, #8
 80034e0:	623b      	str	r3, [r7, #32]
          break;
 80034e2:	e01f      	b.n	8003524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	330c      	adds	r3, #12
 80034ea:	623b      	str	r3, [r7, #32]
          break;
 80034ec:	e01a      	b.n	8003524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034f6:	2304      	movs	r3, #4
 80034f8:	623b      	str	r3, [r7, #32]
          break;
 80034fa:	e013      	b.n	8003524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d105      	bne.n	8003510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003504:	2308      	movs	r3, #8
 8003506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	611a      	str	r2, [r3, #16]
          break;
 800350e:	e009      	b.n	8003524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003510:	2308      	movs	r3, #8
 8003512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	615a      	str	r2, [r3, #20]
          break;
 800351a:	e003      	b.n	8003524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800351c:	2300      	movs	r3, #0
 800351e:	623b      	str	r3, [r7, #32]
          break;
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x130>
          break;
 8003522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2bff      	cmp	r3, #255	@ 0xff
 8003528:	d801      	bhi.n	800352e <HAL_GPIO_Init+0x13a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	e001      	b.n	8003532 <HAL_GPIO_Init+0x13e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2bff      	cmp	r3, #255	@ 0xff
 8003538:	d802      	bhi.n	8003540 <HAL_GPIO_Init+0x14c>
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	e002      	b.n	8003546 <HAL_GPIO_Init+0x152>
 8003540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003542:	3b08      	subs	r3, #8
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	210f      	movs	r1, #15
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	401a      	ands	r2, r3
 8003558:	6a39      	ldr	r1, [r7, #32]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	431a      	orrs	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80b1 	beq.w	80036d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003574:	4b4d      	ldr	r3, [pc, #308]	@ (80036ac <HAL_GPIO_Init+0x2b8>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4a4c      	ldr	r2, [pc, #304]	@ (80036ac <HAL_GPIO_Init+0x2b8>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6193      	str	r3, [r2, #24]
 8003580:	4b4a      	ldr	r3, [pc, #296]	@ (80036ac <HAL_GPIO_Init+0x2b8>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800358c:	4a48      	ldr	r2, [pc, #288]	@ (80036b0 <HAL_GPIO_Init+0x2bc>)
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a40      	ldr	r2, [pc, #256]	@ (80036b4 <HAL_GPIO_Init+0x2c0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_GPIO_Init+0x1ec>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3f      	ldr	r2, [pc, #252]	@ (80036b8 <HAL_GPIO_Init+0x2c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00d      	beq.n	80035dc <HAL_GPIO_Init+0x1e8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3e      	ldr	r2, [pc, #248]	@ (80036bc <HAL_GPIO_Init+0x2c8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3d      	ldr	r2, [pc, #244]	@ (80036c0 <HAL_GPIO_Init+0x2cc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_GPIO_Init+0x1e0>
 80035d0:	2303      	movs	r3, #3
 80035d2:	e006      	b.n	80035e2 <HAL_GPIO_Init+0x1ee>
 80035d4:	2304      	movs	r3, #4
 80035d6:	e004      	b.n	80035e2 <HAL_GPIO_Init+0x1ee>
 80035d8:	2302      	movs	r3, #2
 80035da:	e002      	b.n	80035e2 <HAL_GPIO_Init+0x1ee>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_GPIO_Init+0x1ee>
 80035e0:	2300      	movs	r3, #0
 80035e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e4:	f002 0203 	and.w	r2, r2, #3
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	4093      	lsls	r3, r2
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035f2:	492f      	ldr	r1, [pc, #188]	@ (80036b0 <HAL_GPIO_Init+0x2bc>)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	3302      	adds	r3, #2
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800360c:	4b2d      	ldr	r3, [pc, #180]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	492c      	ldr	r1, [pc, #176]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]
 8003618:	e006      	b.n	8003628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800361a:	4b2a      	ldr	r3, [pc, #168]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	43db      	mvns	r3, r3
 8003622:	4928      	ldr	r1, [pc, #160]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003624:	4013      	ands	r3, r2
 8003626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003634:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	4922      	ldr	r1, [pc, #136]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	60cb      	str	r3, [r1, #12]
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	43db      	mvns	r3, r3
 800364a:	491e      	ldr	r1, [pc, #120]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 800364c:	4013      	ands	r3, r2
 800364e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800365c:	4b19      	ldr	r3, [pc, #100]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	4918      	ldr	r1, [pc, #96]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
 8003668:	e006      	b.n	8003678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800366a:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	43db      	mvns	r3, r3
 8003672:	4914      	ldr	r1, [pc, #80]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003674:	4013      	ands	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d021      	beq.n	80036c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	490e      	ldr	r1, [pc, #56]	@ (80036c4 <HAL_GPIO_Init+0x2d0>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
 8003690:	e021      	b.n	80036d6 <HAL_GPIO_Init+0x2e2>
 8003692:	bf00      	nop
 8003694:	10320000 	.word	0x10320000
 8003698:	10310000 	.word	0x10310000
 800369c:	10220000 	.word	0x10220000
 80036a0:	10210000 	.word	0x10210000
 80036a4:	10120000 	.word	0x10120000
 80036a8:	10110000 	.word	0x10110000
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40010800 	.word	0x40010800
 80036b8:	40010c00 	.word	0x40010c00
 80036bc:	40011000 	.word	0x40011000
 80036c0:	40011400 	.word	0x40011400
 80036c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_GPIO_Init+0x304>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	4909      	ldr	r1, [pc, #36]	@ (80036f8 <HAL_GPIO_Init+0x304>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	3301      	adds	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	fa22 f303 	lsr.w	r3, r2, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f47f ae8e 	bne.w	8003408 <HAL_GPIO_Init+0x14>
  }
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	372c      	adds	r7, #44	@ 0x2c
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40010400 	.word	0x40010400

080036fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e12b      	b.n	8003966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fbb0 	bl	8002e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	@ 0x24
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800374e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800375e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003760:	f001 fbca 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a81      	ldr	r2, [pc, #516]	@ (8003970 <HAL_I2C_Init+0x274>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d807      	bhi.n	8003780 <HAL_I2C_Init+0x84>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a80      	ldr	r2, [pc, #512]	@ (8003974 <HAL_I2C_Init+0x278>)
 8003774:	4293      	cmp	r3, r2
 8003776:	bf94      	ite	ls
 8003778:	2301      	movls	r3, #1
 800377a:	2300      	movhi	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e006      	b.n	800378e <HAL_I2C_Init+0x92>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a7d      	ldr	r2, [pc, #500]	@ (8003978 <HAL_I2C_Init+0x27c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0e7      	b.n	8003966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a78      	ldr	r2, [pc, #480]	@ (800397c <HAL_I2C_Init+0x280>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0c9b      	lsrs	r3, r3, #18
 80037a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003970 <HAL_I2C_Init+0x274>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d802      	bhi.n	80037d0 <HAL_I2C_Init+0xd4>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	e009      	b.n	80037e4 <HAL_I2C_Init+0xe8>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a69      	ldr	r2, [pc, #420]	@ (8003980 <HAL_I2C_Init+0x284>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	495c      	ldr	r1, [pc, #368]	@ (8003970 <HAL_I2C_Init+0x274>)
 8003800:	428b      	cmp	r3, r1
 8003802:	d819      	bhi.n	8003838 <HAL_I2C_Init+0x13c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e59      	subs	r1, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003818:	400b      	ands	r3, r1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_I2C_Init+0x138>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e59      	subs	r1, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	e051      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003834:	2304      	movs	r3, #4
 8003836:	e04f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <HAL_I2C_Init+0x168>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e012      	b.n	800388a <HAL_I2C_Init+0x18e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	0099      	lsls	r1, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x196>
 800388e:	2301      	movs	r3, #1
 8003890:	e022      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10e      	bne.n	80038b8 <HAL_I2C_Init+0x1bc>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e58      	subs	r0, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	440b      	add	r3, r1
 80038a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	0099      	lsls	r1, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	6809      	ldr	r1, [r1, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6911      	ldr	r1, [r2, #16]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	000186a0 	.word	0x000186a0
 8003974:	001e847f 	.word	0x001e847f
 8003978:	003d08ff 	.word	0x003d08ff
 800397c:	431bde83 	.word	0x431bde83
 8003980:	10624dd3 	.word	0x10624dd3

08003984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	461a      	mov	r2, r3
 8003990:	460b      	mov	r3, r1
 8003992:	817b      	strh	r3, [r7, #10]
 8003994:	4613      	mov	r3, r2
 8003996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003998:	f7ff fc1a 	bl	80031d0 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	f040 80e0 	bne.w	8003b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2319      	movs	r3, #25
 80039b2:	2201      	movs	r2, #1
 80039b4:	4970      	ldr	r1, [pc, #448]	@ (8003b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fc9e 	bl	80042f8 <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0d3      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x50>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0cc      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d007      	beq.n	80039fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	@ 0x21
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2210      	movs	r2, #16
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	893a      	ldrh	r2, [r7, #8]
 8003a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a50      	ldr	r2, [pc, #320]	@ (8003b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a3c:	8979      	ldrh	r1, [r7, #10]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fb08 	bl	8004058 <I2C_MasterRequestWrite>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e08d      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a68:	e066      	b.n	8003b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fd5c 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06b      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d11b      	bne.n	8003b0c <HAL_I2C_Master_Transmit+0x188>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d017      	beq.n	8003b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	6a39      	ldr	r1, [r7, #32]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fd53 	bl	80045bc <I2C_WaitOnBTFFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d107      	bne.n	8003b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01a      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d194      	bne.n	8003a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	00100002 	.word	0x00100002
 8003b7c:	ffff0000 	.word	0xffff0000

08003b80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	@ 0x30
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
 8003b90:	4613      	mov	r3, r2
 8003b92:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b98:	f7ff fb1a 	bl	80031d0 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f040 824b 	bne.w	8004042 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2319      	movs	r3, #25
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	497f      	ldr	r1, [pc, #508]	@ (8003db4 <HAL_I2C_Master_Receive+0x234>)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fb9e 	bl	80042f8 <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e23e      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2C_Master_Receive+0x54>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e237      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d007      	beq.n	8003bfa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2222      	movs	r2, #34	@ 0x22
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2210      	movs	r2, #16
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	893a      	ldrh	r2, [r7, #8]
 8003c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a5f      	ldr	r2, [pc, #380]	@ (8003db8 <HAL_I2C_Master_Receive+0x238>)
 8003c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa8a 	bl	800415c <I2C_MasterRequestRead>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e1f8      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d113      	bne.n	8003c82 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e1cc      	b.n	800401c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d11e      	bne.n	8003cc8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c9a:	b672      	cpsid	i
}
 8003c9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc4:	b662      	cpsie	i
}
 8003cc6:	e035      	b.n	8003d34 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d11e      	bne.n	8003d0e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce0:	b672      	cpsid	i
}
 8003ce2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d0a:	b662      	cpsie	i
}
 8003d0c:	e012      	b.n	8003d34 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003d34:	e172      	b.n	800401c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	f200 811f 	bhi.w	8003f7e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d123      	bne.n	8003d90 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fc7d 	bl	800464c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e173      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d8e:	e145      	b.n	800401c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d152      	bne.n	8003e3e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4906      	ldr	r1, [pc, #24]	@ (8003dbc <HAL_I2C_Master_Receive+0x23c>)
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 faa8 	bl	80042f8 <I2C_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e148      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
 8003db2:	bf00      	nop
 8003db4:	00100002 	.word	0x00100002
 8003db8:	ffff0000 	.word	0xffff0000
 8003dbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc0:	b672      	cpsid	i
}
 8003dc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e06:	b662      	cpsie	i
}
 8003e08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e3c:	e0ee      	b.n	800401c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	2200      	movs	r2, #0
 8003e46:	4981      	ldr	r1, [pc, #516]	@ (800404c <HAL_I2C_Master_Receive+0x4cc>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fa55 	bl	80042f8 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0f5      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e68:	b672      	cpsid	i
}
 8003e6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004050 <HAL_I2C_Master_Receive+0x4d0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	08db      	lsrs	r3, r3, #3
 8003ea4:	4a6b      	ldr	r2, [pc, #428]	@ (8004054 <HAL_I2C_Master_Receive+0x4d4>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	0a1a      	lsrs	r2, r3, #8
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00da      	lsls	r2, r3, #3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d118      	bne.n	8003ef6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	f043 0220 	orr.w	r2, r3, #32
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ee6:	b662      	cpsie	i
}
 8003ee8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0a6      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d1d9      	bne.n	8003eb8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f46:	b662      	cpsie	i
}
 8003f48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f7c:	e04e      	b.n	800401c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fb62 	bl	800464c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e058      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d124      	bne.n	800401c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	f47f ae88 	bne.w	8003d36 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3728      	adds	r7, #40	@ 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	00010004 	.word	0x00010004
 8004050:	20000000 	.word	0x20000000
 8004054:	14f8b589 	.word	0x14f8b589

08004058 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d006      	beq.n	8004082 <I2C_MasterRequestWrite+0x2a>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d003      	beq.n	8004082 <I2C_MasterRequestWrite+0x2a>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004080:	d108      	bne.n	8004094 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e00b      	b.n	80040ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	2b12      	cmp	r3, #18
 800409a:	d107      	bne.n	80040ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f91d 	bl	80042f8 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00d      	beq.n	80040e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d2:	d103      	bne.n	80040dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e035      	b.n	800414c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040e8:	d108      	bne.n	80040fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ea:	897b      	ldrh	r3, [r7, #10]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040f8:	611a      	str	r2, [r3, #16]
 80040fa:	e01b      	b.n	8004134 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040fc:	897b      	ldrh	r3, [r7, #10]
 80040fe:	11db      	asrs	r3, r3, #7
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 0306 	and.w	r3, r3, #6
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f063 030f 	orn	r3, r3, #15
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	490e      	ldr	r1, [pc, #56]	@ (8004154 <I2C_MasterRequestWrite+0xfc>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f966 	bl	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e010      	b.n	800414c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800412a:	897b      	ldrh	r3, [r7, #10]
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4907      	ldr	r1, [pc, #28]	@ (8004158 <I2C_MasterRequestWrite+0x100>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f956 	bl	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	00010008 	.word	0x00010008
 8004158:	00010002 	.word	0x00010002

0800415c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	460b      	mov	r3, r1
 800416a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004180:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d006      	beq.n	8004196 <I2C_MasterRequestRead+0x3a>
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d003      	beq.n	8004196 <I2C_MasterRequestRead+0x3a>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004194:	d108      	bne.n	80041a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e00b      	b.n	80041c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	2b11      	cmp	r3, #17
 80041ae:	d107      	bne.n	80041c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f893 	bl	80042f8 <I2C_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00d      	beq.n	80041f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e6:	d103      	bne.n	80041f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e079      	b.n	80042e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041fc:	d108      	bne.n	8004210 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041fe:	897b      	ldrh	r3, [r7, #10]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	e05f      	b.n	80042d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004210:	897b      	ldrh	r3, [r7, #10]
 8004212:	11db      	asrs	r3, r3, #7
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 0306 	and.w	r3, r3, #6
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f063 030f 	orn	r3, r3, #15
 8004220:	b2da      	uxtb	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4930      	ldr	r1, [pc, #192]	@ (80042f0 <I2C_MasterRequestRead+0x194>)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f8dc 	bl	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e054      	b.n	80042e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800423e:	897b      	ldrh	r3, [r7, #10]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4929      	ldr	r1, [pc, #164]	@ (80042f4 <I2C_MasterRequestRead+0x198>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8cc 	bl	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e044      	b.n	80042e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004282:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f831 	bl	80042f8 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042aa:	d103      	bne.n	80042b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e017      	b.n	80042e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80042b8:	897b      	ldrh	r3, [r7, #10]
 80042ba:	11db      	asrs	r3, r3, #7
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0306 	and.w	r3, r3, #6
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f063 030e 	orn	r3, r3, #14
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4907      	ldr	r1, [pc, #28]	@ (80042f4 <I2C_MasterRequestRead+0x198>)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f888 	bl	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	00010008 	.word	0x00010008
 80042f4:	00010002 	.word	0x00010002

080042f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004308:	e048      	b.n	800439c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d044      	beq.n	800439c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe ff5d 	bl	80031d0 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d139      	bne.n	800439c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10d      	bne.n	800434e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	43da      	mvns	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	e00c      	b.n	8004368 <I2C_WaitOnFlagUntilTimeout+0x70>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	43da      	mvns	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4013      	ands	r3, r2
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	429a      	cmp	r2, r3
 800436c:	d116      	bne.n	800439c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e023      	b.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10d      	bne.n	80043c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	43da      	mvns	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	e00c      	b.n	80043dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	43da      	mvns	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4013      	ands	r3, r2
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d093      	beq.n	800430a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043fa:	e071      	b.n	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440a:	d123      	bne.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	f043 0204 	orr.w	r2, r3, #4
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e067      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d041      	beq.n	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fe feb8 	bl	80031d0 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d136      	bne.n	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d10c      	bne.n	8004496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	43da      	mvns	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4013      	ands	r3, r2
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	bf14      	ite	ne
 800448e:	2301      	movne	r3, #1
 8004490:	2300      	moveq	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	e00b      	b.n	80044ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	43da      	mvns	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf14      	ite	ne
 80044a8:	2301      	movne	r3, #1
 80044aa:	2300      	moveq	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e021      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d10c      	bne.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	43da      	mvns	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4013      	ands	r3, r2
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e00b      	b.n	800451c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	43da      	mvns	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	bf14      	ite	ne
 8004516:	2301      	movne	r3, #1
 8004518:	2300      	moveq	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	f47f af6d 	bne.w	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004538:	e034      	b.n	80045a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f8e3 	bl	8004706 <I2C_IsAcknowledgeFailed>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e034      	b.n	80045b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d028      	beq.n	80045a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fe fe3d 	bl	80031d0 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11d      	bne.n	80045a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b80      	cmp	r3, #128	@ 0x80
 8004574:	d016      	beq.n	80045a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e007      	b.n	80045b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b80      	cmp	r3, #128	@ 0x80
 80045b0:	d1c3      	bne.n	800453a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045c8:	e034      	b.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f89b 	bl	8004706 <I2C_IsAcknowledgeFailed>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e034      	b.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d028      	beq.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e2:	f7fe fdf5 	bl	80031d0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d11d      	bne.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b04      	cmp	r3, #4
 8004604:	d016      	beq.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d1c3      	bne.n	80045ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004658:	e049      	b.n	80046ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b10      	cmp	r3, #16
 8004666:	d119      	bne.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0210 	mvn.w	r2, #16
 8004670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e030      	b.n	80046fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469c:	f7fe fd98 	bl	80031d0 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d302      	bcc.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11d      	bne.n	80046ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046bc:	2b40      	cmp	r3, #64	@ 0x40
 80046be:	d016      	beq.n	80046ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e007      	b.n	80046fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f8:	2b40      	cmp	r3, #64	@ 0x40
 80046fa:	d1ae      	bne.n	800465a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471c:	d11b      	bne.n	8004756 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004726:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	f043 0204 	orr.w	r2, r3, #4
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
	...

08004764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e272      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8087 	beq.w	8004892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004784:	4b92      	ldr	r3, [pc, #584]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b04      	cmp	r3, #4
 800478e:	d00c      	beq.n	80047aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004790:	4b8f      	ldr	r3, [pc, #572]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b08      	cmp	r3, #8
 800479a:	d112      	bne.n	80047c2 <HAL_RCC_OscConfig+0x5e>
 800479c:	4b8c      	ldr	r3, [pc, #560]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a8:	d10b      	bne.n	80047c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047aa:	4b89      	ldr	r3, [pc, #548]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d06c      	beq.n	8004890 <HAL_RCC_OscConfig+0x12c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d168      	bne.n	8004890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e24c      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ca:	d106      	bne.n	80047da <HAL_RCC_OscConfig+0x76>
 80047cc:	4b80      	ldr	r3, [pc, #512]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a7f      	ldr	r2, [pc, #508]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e02e      	b.n	8004838 <HAL_RCC_OscConfig+0xd4>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10c      	bne.n	80047fc <HAL_RCC_OscConfig+0x98>
 80047e2:	4b7b      	ldr	r3, [pc, #492]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7a      	ldr	r2, [pc, #488]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b78      	ldr	r3, [pc, #480]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a77      	ldr	r2, [pc, #476]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e01d      	b.n	8004838 <HAL_RCC_OscConfig+0xd4>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0xbc>
 8004806:	4b72      	ldr	r3, [pc, #456]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a71      	ldr	r2, [pc, #452]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800480c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b6f      	ldr	r3, [pc, #444]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6e      	ldr	r2, [pc, #440]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0xd4>
 8004820:	4b6b      	ldr	r3, [pc, #428]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6a      	ldr	r2, [pc, #424]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b68      	ldr	r3, [pc, #416]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a67      	ldr	r2, [pc, #412]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fe fcc6 	bl	80031d0 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004848:	f7fe fcc2 	bl	80031d0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	@ 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e200      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b5d      	ldr	r3, [pc, #372]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0xe4>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fe fcb2 	bl	80031d0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004870:	f7fe fcae 	bl	80031d0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	@ 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1ec      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	4b53      	ldr	r3, [pc, #332]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x10c>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d063      	beq.n	8004966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800489e:	4b4c      	ldr	r3, [pc, #304]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048aa:	4b49      	ldr	r3, [pc, #292]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x18c>
 80048b6:	4b46      	ldr	r3, [pc, #280]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c2:	4b43      	ldr	r3, [pc, #268]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x176>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e1c0      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b3d      	ldr	r3, [pc, #244]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4939      	ldr	r1, [pc, #228]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	e03a      	b.n	8004966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f8:	4b36      	ldr	r3, [pc, #216]	@ (80049d4 <HAL_RCC_OscConfig+0x270>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7fe fc67 	bl	80031d0 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004906:	f7fe fc63 	bl	80031d0 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1a1      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	4b2d      	ldr	r3, [pc, #180]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b2a      	ldr	r3, [pc, #168]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4927      	ldr	r1, [pc, #156]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b26      	ldr	r3, [pc, #152]	@ (80049d4 <HAL_RCC_OscConfig+0x270>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fe fc46 	bl	80031d0 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004948:	f7fe fc42 	bl	80031d0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e180      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d03a      	beq.n	80049e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d019      	beq.n	80049ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b17      	ldr	r3, [pc, #92]	@ (80049d8 <HAL_RCC_OscConfig+0x274>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004980:	f7fe fc26 	bl	80031d0 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004988:	f7fe fc22 	bl	80031d0 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e160      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <HAL_RCC_OscConfig+0x26c>)
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049a6:	2001      	movs	r0, #1
 80049a8:	f000 face 	bl	8004f48 <RCC_Delay>
 80049ac:	e01c      	b.n	80049e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ae:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <HAL_RCC_OscConfig+0x274>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b4:	f7fe fc0c 	bl	80031d0 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ba:	e00f      	b.n	80049dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fe fc08 	bl	80031d0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d908      	bls.n	80049dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e146      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	42420000 	.word	0x42420000
 80049d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	4b92      	ldr	r3, [pc, #584]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e9      	bne.n	80049bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a6 	beq.w	8004b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b88      	ldr	r3, [pc, #544]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4a87      	ldr	r2, [pc, #540]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a10:	61d3      	str	r3, [r2, #28]
 8004a12:	4b85      	ldr	r3, [pc, #532]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a22:	4b82      	ldr	r3, [pc, #520]	@ (8004c2c <HAL_RCC_OscConfig+0x4c8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d118      	bne.n	8004a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c2c <HAL_RCC_OscConfig+0x4c8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7e      	ldr	r2, [pc, #504]	@ (8004c2c <HAL_RCC_OscConfig+0x4c8>)
 8004a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3a:	f7fe fbc9 	bl	80031d0 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a42:	f7fe fbc5 	bl	80031d0 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	@ 0x64
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e103      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a54:	4b75      	ldr	r3, [pc, #468]	@ (8004c2c <HAL_RCC_OscConfig+0x4c8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_OscConfig+0x312>
 8004a68:	4b6f      	ldr	r3, [pc, #444]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	6213      	str	r3, [r2, #32]
 8004a74:	e02d      	b.n	8004ad2 <HAL_RCC_OscConfig+0x36e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x334>
 8004a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4a69      	ldr	r2, [pc, #420]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	6213      	str	r3, [r2, #32]
 8004a8a:	4b67      	ldr	r3, [pc, #412]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4a66      	ldr	r2, [pc, #408]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	f023 0304 	bic.w	r3, r3, #4
 8004a94:	6213      	str	r3, [r2, #32]
 8004a96:	e01c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x36e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b05      	cmp	r3, #5
 8004a9e:	d10c      	bne.n	8004aba <HAL_RCC_OscConfig+0x356>
 8004aa0:	4b61      	ldr	r3, [pc, #388]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4a60      	ldr	r2, [pc, #384]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004aa6:	f043 0304 	orr.w	r3, r3, #4
 8004aaa:	6213      	str	r3, [r2, #32]
 8004aac:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	6213      	str	r3, [r2, #32]
 8004ab8:	e00b      	b.n	8004ad2 <HAL_RCC_OscConfig+0x36e>
 8004aba:	4b5b      	ldr	r3, [pc, #364]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4a5a      	ldr	r2, [pc, #360]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	6213      	str	r3, [r2, #32]
 8004ac6:	4b58      	ldr	r3, [pc, #352]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4a57      	ldr	r2, [pc, #348]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	f023 0304 	bic.w	r3, r3, #4
 8004ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d015      	beq.n	8004b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ada:	f7fe fb79 	bl	80031d0 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae2:	f7fe fb75 	bl	80031d0 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0b1      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0ee      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x37e>
 8004b04:	e014      	b.n	8004b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b06:	f7fe fb63 	bl	80031d0 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0c:	e00a      	b.n	8004b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0e:	f7fe fb5f 	bl	80031d0 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e09b      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b24:	4b40      	ldr	r3, [pc, #256]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ee      	bne.n	8004b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d105      	bne.n	8004b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b36:	4b3c      	ldr	r3, [pc, #240]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8087 	beq.w	8004c5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b4c:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 030c 	and.w	r3, r3, #12
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d061      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d146      	bne.n	8004bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b60:	4b33      	ldr	r3, [pc, #204]	@ (8004c30 <HAL_RCC_OscConfig+0x4cc>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fe fb33 	bl	80031d0 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6e:	f7fe fb2f 	bl	80031d0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e06d      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b80:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b94:	d108      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b96:	4b24      	ldr	r3, [pc, #144]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4921      	ldr	r1, [pc, #132]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a19      	ldr	r1, [r3, #32]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	491b      	ldr	r1, [pc, #108]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c30 <HAL_RCC_OscConfig+0x4cc>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fe fb03 	bl	80031d0 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fe faff 	bl	80031d0 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e03d      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004be0:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x46a>
 8004bec:	e035      	b.n	8004c5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <HAL_RCC_OscConfig+0x4cc>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fe faec 	bl	80031d0 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe fae8 	bl	80031d0 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e026      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x498>
 8004c1a:	e01e      	b.n	8004c5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e019      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c34:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <HAL_RCC_OscConfig+0x500>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d106      	bne.n	8004c56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d001      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000

08004c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0d0      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d910      	bls.n	8004cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b67      	ldr	r3, [pc, #412]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 0207 	bic.w	r2, r3, #7
 8004c92:	4965      	ldr	r1, [pc, #404]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b63      	ldr	r3, [pc, #396]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0b8      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc4:	4b59      	ldr	r3, [pc, #356]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a58      	ldr	r2, [pc, #352]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cdc:	4b53      	ldr	r3, [pc, #332]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a52      	ldr	r2, [pc, #328]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	4b50      	ldr	r3, [pc, #320]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	494d      	ldr	r1, [pc, #308]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d040      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b47      	ldr	r3, [pc, #284]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d115      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d107      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	4b41      	ldr	r3, [pc, #260]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e073      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b3d      	ldr	r3, [pc, #244]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e06b      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d46:	4b39      	ldr	r3, [pc, #228]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f023 0203 	bic.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4936      	ldr	r1, [pc, #216]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d58:	f7fe fa3a 	bl	80031d0 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d60:	f7fe fa36 	bl	80031d0 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e053      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	4b2d      	ldr	r3, [pc, #180]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 020c 	and.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1eb      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b27      	ldr	r3, [pc, #156]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d210      	bcs.n	8004db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 0207 	bic.w	r2, r3, #7
 8004d9e:	4922      	ldr	r1, [pc, #136]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e032      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4916      	ldr	r1, [pc, #88]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004de2:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	490e      	ldr	r1, [pc, #56]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004df6:	f000 f821 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	490a      	ldr	r1, [pc, #40]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c8>)
 8004e08:	5ccb      	ldrb	r3, [r1, r3]
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a09      	ldr	r2, [pc, #36]	@ (8004e34 <HAL_RCC_ClockConfig+0x1cc>)
 8004e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e12:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <HAL_RCC_ClockConfig+0x1d0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe f998 	bl	800314c <HAL_InitTick>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40022000 	.word	0x40022000
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	0800a25c 	.word	0x0800a25c
 8004e34:	20000000 	.word	0x20000000
 8004e38:	20000004 	.word	0x20000004

08004e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e56:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d002      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x30>
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d003      	beq.n	8004e72 <HAL_RCC_GetSysClockFreq+0x36>
 8004e6a:	e027      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e6c:	4b19      	ldr	r3, [pc, #100]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e6e:	613b      	str	r3, [r7, #16]
      break;
 8004e70:	e027      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	0c9b      	lsrs	r3, r3, #18
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	4a17      	ldr	r2, [pc, #92]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e8a:	4b11      	ldr	r3, [pc, #68]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	0c5b      	lsrs	r3, r3, #17
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	4a11      	ldr	r2, [pc, #68]	@ (8004edc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e96:	5cd3      	ldrb	r3, [r2, r3]
 8004e98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e9e:	fb03 f202 	mul.w	r2, r3, r2
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e004      	b.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
 8004eb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	613b      	str	r3, [r7, #16]
      break;
 8004eba:	e002      	b.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ebe:	613b      	str	r3, [r7, #16]
      break;
 8004ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec2:	693b      	ldr	r3, [r7, #16]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	007a1200 	.word	0x007a1200
 8004ed8:	0800a274 	.word	0x0800a274
 8004edc:	0800a284 	.word	0x0800a284
 8004ee0:	003d0900 	.word	0x003d0900

08004ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee8:	4b02      	ldr	r3, [pc, #8]	@ (8004ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	20000000 	.word	0x20000000

08004ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004efc:	f7ff fff2 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4903      	ldr	r1, [pc, #12]	@ (8004f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	0800a26c 	.word	0x0800a26c

08004f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f24:	f7ff ffde 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	0adb      	lsrs	r3, r3, #11
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	@ (8004f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40021000 	.word	0x40021000
 8004f44:	0800a26c 	.word	0x0800a26c

08004f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f50:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <RCC_Delay+0x34>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0a      	ldr	r2, [pc, #40]	@ (8004f80 <RCC_Delay+0x38>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	0a5b      	lsrs	r3, r3, #9
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f64:	bf00      	nop
  }
  while (Delay --);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	60fa      	str	r2, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f9      	bne.n	8004f64 <RCC_Delay+0x1c>
}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	10624dd3 	.word	0x10624dd3

08004f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e042      	b.n	800501c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fd ffaa 	bl	8002f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2224      	movs	r2, #36	@ 0x24
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fa05 	bl	80053d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	@ 0x28
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b20      	cmp	r3, #32
 8005042:	d175      	bne.n	8005130 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_UART_Transmit+0x2c>
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e06e      	b.n	8005132 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2221      	movs	r2, #33	@ 0x21
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005062:	f7fe f8b5 	bl	80031d0 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	88fa      	ldrh	r2, [r7, #6]
 8005072:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507c:	d108      	bne.n	8005090 <HAL_UART_Transmit+0x6c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e003      	b.n	8005098 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005098:	e02e      	b.n	80050f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2200      	movs	r2, #0
 80050a2:	2180      	movs	r1, #128	@ 0x80
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f8a2 	bl	80051ee <UART_WaitOnFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e03a      	b.n	8005132 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	3302      	adds	r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e007      	b.n	80050ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	3301      	adds	r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1cb      	bne.n	800509a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	2140      	movs	r1, #64	@ 0x40
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f86e 	bl	80051ee <UART_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e006      	b.n	8005132 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	4613      	mov	r3, r2
 8005146:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	d121      	bne.n	8005198 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_UART_Transmit_IT+0x26>
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e01a      	b.n	800519a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2221      	movs	r2, #33	@ 0x21
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005192:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	e000      	b.n	800519a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005198:	2302      	movs	r3, #2
  }
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d112      	bne.n	80051e4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_UART_Receive_IT+0x26>
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e00b      	b.n	80051e6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	461a      	mov	r2, r3
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f860 	bl	80052a0 <UART_Start_Receive_IT>
 80051e0:	4603      	mov	r3, r0
 80051e2:	e000      	b.n	80051e6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fe:	e03b      	b.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d037      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005208:	f7fd ffe2 	bl	80031d0 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	6a3a      	ldr	r2, [r7, #32]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <UART_WaitOnFlagUntilTimeout+0x30>
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e03a      	b.n	8005298 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d023      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b80      	cmp	r3, #128	@ 0x80
 8005234:	d020      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	d01d      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b08      	cmp	r3, #8
 8005248:	d116      	bne.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f856 	bl	8005312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2208      	movs	r2, #8
 800526a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e00f      	b.n	8005298 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4013      	ands	r3, r2
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	429a      	cmp	r2, r3
 8005286:	bf0c      	ite	eq
 8005288:	2301      	moveq	r3, #1
 800528a:	2300      	movne	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	429a      	cmp	r2, r3
 8005294:	d0b4      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2222      	movs	r2, #34	@ 0x22
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0220 	orr.w	r2, r2, #32
 8005304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005312:	b480      	push	{r7}
 8005314:	b095      	sub	sp, #84	@ 0x54
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800533a:	643a      	str	r2, [r7, #64]	@ 0x40
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005340:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e5      	bne.n	800531a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	61fb      	str	r3, [r7, #28]
   return(result);
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800536e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005370:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e5      	bne.n	800534e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	2b01      	cmp	r3, #1
 8005388:	d119      	bne.n	80053be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	60bb      	str	r3, [r7, #8]
   return(result);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f023 0310 	bic.w	r3, r3, #16
 80053a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053aa:	61ba      	str	r2, [r7, #24]
 80053ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6979      	ldr	r1, [r7, #20]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	613b      	str	r3, [r7, #16]
   return(result);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053cc:	bf00      	nop
 80053ce:	3754      	adds	r7, #84	@ 0x54
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
	...

080053d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005412:	f023 030c 	bic.w	r3, r3, #12
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	430b      	orrs	r3, r1
 800541e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a2c      	ldr	r2, [pc, #176]	@ (80054ec <UART_SetConfig+0x114>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005440:	f7ff fd6e 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	e002      	b.n	800544e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7ff fd56 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 800544c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009a      	lsls	r2, r3, #2
 8005458:	441a      	add	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	4a22      	ldr	r2, [pc, #136]	@ (80054f0 <UART_SetConfig+0x118>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	0119      	lsls	r1, r3, #4
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009a      	lsls	r2, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	fbb2 f2f3 	udiv	r2, r2, r3
 8005484:	4b1a      	ldr	r3, [pc, #104]	@ (80054f0 <UART_SetConfig+0x118>)
 8005486:	fba3 0302 	umull	r0, r3, r3, r2
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	2064      	movs	r0, #100	@ 0x64
 800548e:	fb00 f303 	mul.w	r3, r0, r3
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	3332      	adds	r3, #50	@ 0x32
 8005498:	4a15      	ldr	r2, [pc, #84]	@ (80054f0 <UART_SetConfig+0x118>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054a4:	4419      	add	r1, r3
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	009a      	lsls	r2, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054bc:	4b0c      	ldr	r3, [pc, #48]	@ (80054f0 <UART_SetConfig+0x118>)
 80054be:	fba3 0302 	umull	r0, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	2064      	movs	r0, #100	@ 0x64
 80054c6:	fb00 f303 	mul.w	r3, r0, r3
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	3332      	adds	r3, #50	@ 0x32
 80054d0:	4a07      	ldr	r2, [pc, #28]	@ (80054f0 <UART_SetConfig+0x118>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	f003 020f 	and.w	r2, r3, #15
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	440a      	add	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40013800 	.word	0x40013800
 80054f0:	51eb851f 	.word	0x51eb851f

080054f4 <__NVIC_SetPriority>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	6039      	str	r1, [r7, #0]
 80054fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005504:	2b00      	cmp	r3, #0
 8005506:	db0a      	blt.n	800551e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	490c      	ldr	r1, [pc, #48]	@ (8005540 <__NVIC_SetPriority+0x4c>)
 800550e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005512:	0112      	lsls	r2, r2, #4
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	440b      	add	r3, r1
 8005518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800551c:	e00a      	b.n	8005534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4908      	ldr	r1, [pc, #32]	@ (8005544 <__NVIC_SetPriority+0x50>)
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	3b04      	subs	r3, #4
 800552c:	0112      	lsls	r2, r2, #4
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	440b      	add	r3, r1
 8005532:	761a      	strb	r2, [r3, #24]
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000e100 	.word	0xe000e100
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800554c:	2100      	movs	r1, #0
 800554e:	f06f 0004 	mvn.w	r0, #4
 8005552:	f7ff ffcf 	bl	80054f4 <__NVIC_SetPriority>
#endif
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005562:	f3ef 8305 	mrs	r3, IPSR
 8005566:	603b      	str	r3, [r7, #0]
  return(result);
 8005568:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800556e:	f06f 0305 	mvn.w	r3, #5
 8005572:	607b      	str	r3, [r7, #4]
 8005574:	e00c      	b.n	8005590 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005576:	4b09      	ldr	r3, [pc, #36]	@ (800559c <osKernelInitialize+0x40>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d105      	bne.n	800558a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <osKernelInitialize+0x40>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005584:	2300      	movs	r3, #0
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	e002      	b.n	8005590 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
 800558e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005590:	687b      	ldr	r3, [r7, #4]
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr
 800559c:	200014a4 	.word	0x200014a4

080055a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055a6:	f3ef 8305 	mrs	r3, IPSR
 80055aa:	603b      	str	r3, [r7, #0]
  return(result);
 80055ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80055b2:	f06f 0305 	mvn.w	r3, #5
 80055b6:	607b      	str	r3, [r7, #4]
 80055b8:	e010      	b.n	80055dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80055ba:	4b0b      	ldr	r3, [pc, #44]	@ (80055e8 <osKernelStart+0x48>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d109      	bne.n	80055d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055c2:	f7ff ffc1 	bl	8005548 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055c6:	4b08      	ldr	r3, [pc, #32]	@ (80055e8 <osKernelStart+0x48>)
 80055c8:	2202      	movs	r2, #2
 80055ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055cc:	f002 f86a 	bl	80076a4 <vTaskStartScheduler>
      stat = osOK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e002      	b.n	80055dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	200014a4 	.word	0x200014a4

080055ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08e      	sub	sp, #56	@ 0x38
 80055f0:	af04      	add	r7, sp, #16
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055fc:	f3ef 8305 	mrs	r3, IPSR
 8005600:	617b      	str	r3, [r7, #20]
  return(result);
 8005602:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005604:	2b00      	cmp	r3, #0
 8005606:	d17e      	bne.n	8005706 <osThreadNew+0x11a>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d07b      	beq.n	8005706 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005612:	2318      	movs	r3, #24
 8005614:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800561a:	f04f 33ff 	mov.w	r3, #4294967295
 800561e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d045      	beq.n	80056b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <osThreadNew+0x48>
        name = attr->name;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <osThreadNew+0x6e>
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b38      	cmp	r3, #56	@ 0x38
 800564c:	d805      	bhi.n	800565a <osThreadNew+0x6e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <osThreadNew+0x72>
        return (NULL);
 800565a:	2300      	movs	r3, #0
 800565c:	e054      	b.n	8005708 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	089b      	lsrs	r3, r3, #2
 800566c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00e      	beq.n	8005694 <osThreadNew+0xa8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b5b      	cmp	r3, #91	@ 0x5b
 800567c:	d90a      	bls.n	8005694 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005682:	2b00      	cmp	r3, #0
 8005684:	d006      	beq.n	8005694 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <osThreadNew+0xa8>
        mem = 1;
 800568e:	2301      	movs	r3, #1
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	e010      	b.n	80056b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10c      	bne.n	80056b6 <osThreadNew+0xca>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d108      	bne.n	80056b6 <osThreadNew+0xca>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <osThreadNew+0xca>
          mem = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	e001      	b.n	80056b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d110      	bne.n	80056de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056c4:	9202      	str	r2, [sp, #8]
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6a3a      	ldr	r2, [r7, #32]
 80056d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f001 fe0a 	bl	80072ec <xTaskCreateStatic>
 80056d8:	4603      	mov	r3, r0
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	e013      	b.n	8005706 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d110      	bne.n	8005706 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	f107 0310 	add.w	r3, r7, #16
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f001 fe58 	bl	80073ac <xTaskCreate>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d001      	beq.n	8005706 <osThreadNew+0x11a>
            hTask = NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005706:	693b      	ldr	r3, [r7, #16]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3728      	adds	r7, #40	@ 0x28
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005718:	f3ef 8305 	mrs	r3, IPSR
 800571c:	60bb      	str	r3, [r7, #8]
  return(result);
 800571e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <osDelay+0x1c>
    stat = osErrorISR;
 8005724:	f06f 0305 	mvn.w	r3, #5
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e007      	b.n	800573c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 ff7e 	bl	8007638 <vTaskDelay>
    }
  }

  return (stat);
 800573c:	68fb      	ldr	r3, [r7, #12]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005752:	f3ef 8305 	mrs	r3, IPSR
 8005756:	60fb      	str	r3, [r7, #12]
  return(result);
 8005758:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800575a:	2b00      	cmp	r3, #0
 800575c:	d12d      	bne.n	80057ba <osEventFlagsNew+0x74>
    mem = -1;
 800575e:	f04f 33ff 	mov.w	r3, #4294967295
 8005762:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d015      	beq.n	8005796 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <osEventFlagsNew+0x3a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b1f      	cmp	r3, #31
 8005778:	d902      	bls.n	8005780 <osEventFlagsNew+0x3a>
        mem = 1;
 800577a:	2301      	movs	r3, #1
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	e00c      	b.n	800579a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d108      	bne.n	800579a <osEventFlagsNew+0x54>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <osEventFlagsNew+0x54>
          mem = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	e001      	b.n	800579a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d106      	bne.n	80057ae <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 faaf 	bl	8005d08 <xEventGroupCreateStatic>
 80057aa:	6178      	str	r0, [r7, #20]
 80057ac:	e005      	b.n	80057ba <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80057b4:	f000 fae1 	bl	8005d7a <xEventGroupCreate>
 80057b8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80057ba:	697b      	ldr	r3, [r7, #20]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <osEventFlagsSet+0x1c>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057de:	d303      	bcc.n	80057e8 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80057e0:	f06f 0303 	mvn.w	r3, #3
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	e028      	b.n	800583a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e8:	f3ef 8305 	mrs	r3, IPSR
 80057ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01d      	beq.n	8005830 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80057f8:	f107 0308 	add.w	r3, r7, #8
 80057fc:	461a      	mov	r2, r3
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6938      	ldr	r0, [r7, #16]
 8005802:	f000 fcdf 	bl	80061c4 <xEventGroupSetBitsFromISR>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800580c:	f06f 0302 	mvn.w	r3, #2
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e012      	b.n	800583a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <osEventFlagsSet+0x76>
 800581e:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <osEventFlagsSet+0x80>)
 8005820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	e004      	b.n	800583a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6938      	ldr	r0, [r7, #16]
 8005834:	f000 fbff 	bl	8006036 <xEventGroupSetBits>
 8005838:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800583a:	697b      	ldr	r3, [r7, #20]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <osEventFlagsClear+0x1c>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005862:	d303      	bcc.n	800586c <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8005864:	f06f 0303 	mvn.w	r3, #3
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e019      	b.n	80058a0 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586c:	f3ef 8305 	mrs	r3, IPSR
 8005870:	60fb      	str	r3, [r7, #12]
  return(result);
 8005872:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00e      	beq.n	8005896 <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8005878:	6938      	ldr	r0, [r7, #16]
 800587a:	f000 fbb9 	bl	8005ff0 <xEventGroupGetBitsFromISR>
 800587e:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	f000 fba0 	bl	8005fc8 <xEventGroupClearBitsFromISR>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d108      	bne.n	80058a0 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 800588e:	f06f 0302 	mvn.w	r3, #2
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e004      	b.n	80058a0 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6938      	ldr	r0, [r7, #16]
 800589a:	f000 fb5b 	bl	8005f54 <xEventGroupClearBits>
 800589e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80058a0:	697b      	ldr	r3, [r7, #20]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b08c      	sub	sp, #48	@ 0x30
 80058ae:	af02      	add	r7, sp, #8
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <osEventFlagsWait+0x20>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058c8:	d303      	bcc.n	80058d2 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80058ca:	f06f 0303 	mvn.w	r3, #3
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	e04b      	b.n	800596a <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d2:	f3ef 8305 	mrs	r3, IPSR
 80058d6:	617b      	str	r3, [r7, #20]
  return(result);
 80058d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 80058de:	f06f 0305 	mvn.w	r3, #5
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	e041      	b.n	800596a <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 80058f0:	2301      	movs	r3, #1
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f4:	e001      	b.n	80058fa <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8005904:	2300      	movs	r3, #0
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	e001      	b.n	800590e <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800590a:	2301      	movs	r3, #1
 800590c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	69b8      	ldr	r0, [r7, #24]
 800591a:	f000 fa49 	bl	8005db0 <xEventGroupWaitBits>
 800591e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d010      	beq.n	800594c <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4013      	ands	r3, r2
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	d019      	beq.n	800596a <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800593c:	f06f 0301 	mvn.w	r3, #1
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	e012      	b.n	800596a <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005944:	f06f 0302 	mvn.w	r3, #2
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	e00e      	b.n	800596a <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800595c:	f06f 0301 	mvn.w	r3, #1
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	e002      	b.n	800596a <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005964:	f06f 0302 	mvn.w	r3, #2
 8005968:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800596a:	69fb      	ldr	r3, [r7, #28]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3728      	adds	r7, #40	@ 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005980:	f3ef 8305 	mrs	r3, IPSR
 8005984:	60bb      	str	r3, [r7, #8]
  return(result);
 8005986:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005988:	2b00      	cmp	r3, #0
 800598a:	d174      	bne.n	8005a76 <osMutexNew+0x102>
    if (attr != NULL) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <osMutexNew+0x26>
      type = attr->attr_bits;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e001      	b.n	800599e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <osMutexNew+0x3a>
      rmtx = 1U;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e001      	b.n	80059b2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d15c      	bne.n	8005a76 <osMutexNew+0x102>
      mem = -1;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295
 80059c0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d015      	beq.n	80059f4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <osMutexNew+0x6a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b4f      	cmp	r3, #79	@ 0x4f
 80059d6:	d902      	bls.n	80059de <osMutexNew+0x6a>
          mem = 1;
 80059d8:	2301      	movs	r3, #1
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	e00c      	b.n	80059f8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d108      	bne.n	80059f8 <osMutexNew+0x84>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d104      	bne.n	80059f8 <osMutexNew+0x84>
            mem = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e001      	b.n	80059f8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d112      	bne.n	8005a24 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	2004      	movs	r0, #4
 8005a0c:	f000 fe15 	bl	800663a <xQueueCreateMutexStatic>
 8005a10:	61f8      	str	r0, [r7, #28]
 8005a12:	e016      	b.n	8005a42 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f000 fe0d 	bl	800663a <xQueueCreateMutexStatic>
 8005a20:	61f8      	str	r0, [r7, #28]
 8005a22:	e00e      	b.n	8005a42 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005a30:	2004      	movs	r0, #4
 8005a32:	f000 fdea 	bl	800660a <xQueueCreateMutex>
 8005a36:	61f8      	str	r0, [r7, #28]
 8005a38:	e003      	b.n	8005a42 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f000 fde5 	bl	800660a <xQueueCreateMutex>
 8005a40:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00c      	beq.n	8005a62 <osMutexNew+0xee>
        if (attr != NULL) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <osMutexNew+0xe2>
          name = attr->name;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e001      	b.n	8005a5a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	69f8      	ldr	r0, [r7, #28]
 8005a5e:	f001 fbbf 	bl	80071e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d006      	beq.n	8005a76 <osMutexNew+0x102>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005a76:	69fb      	ldr	r3, [r7, #28]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a9e:	f3ef 8305 	mrs	r3, IPSR
 8005aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005aaa:	f06f 0305 	mvn.w	r3, #5
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e02c      	b.n	8005b0c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005ab8:	f06f 0303 	mvn.w	r3, #3
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	e025      	b.n	8005b0c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d011      	beq.n	8005aea <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6938      	ldr	r0, [r7, #16]
 8005aca:	f000 fe06 	bl	80066da <xQueueTakeMutexRecursive>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d01b      	beq.n	8005b0c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005ada:	f06f 0301 	mvn.w	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	e014      	b.n	8005b0c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005ae2:	f06f 0302 	mvn.w	r3, #2
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e010      	b.n	8005b0c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6938      	ldr	r0, [r7, #16]
 8005aee:	f001 f91b 	bl	8006d28 <xQueueSemaphoreTake>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d009      	beq.n	8005b0c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005afe:	f06f 0301 	mvn.w	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e002      	b.n	8005b0c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005b06:	f06f 0302 	mvn.w	r3, #2
 8005b0a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005b0c:	697b      	ldr	r3, [r7, #20]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b32:	f3ef 8305 	mrs	r3, IPSR
 8005b36:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b38:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005b3e:	f06f 0305 	mvn.w	r3, #5
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e01f      	b.n	8005b86 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005b4c:	f06f 0303 	mvn.w	r3, #3
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e018      	b.n	8005b86 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f000 fd88 	bl	8006670 <xQueueGiveMutexRecursive>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d00f      	beq.n	8005b86 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b66:	f06f 0302 	mvn.w	r3, #2
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e00b      	b.n	8005b86 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2200      	movs	r2, #0
 8005b72:	2100      	movs	r1, #0
 8005b74:	6938      	ldr	r0, [r7, #16]
 8005b76:	f000 fe55 	bl	8006824 <xQueueGenericSend>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d002      	beq.n	8005b86 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b80:	f06f 0302 	mvn.w	r3, #2
 8005b84:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b86:	697b      	ldr	r3, [r7, #20]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	@ 0x28
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ba0:	f3ef 8305 	mrs	r3, IPSR
 8005ba4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ba6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d175      	bne.n	8005c98 <osSemaphoreNew+0x108>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d072      	beq.n	8005c98 <osSemaphoreNew+0x108>
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d86e      	bhi.n	8005c98 <osSemaphoreNew+0x108>
    mem = -1;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d015      	beq.n	8005bf2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <osSemaphoreNew+0x4c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	2b4f      	cmp	r3, #79	@ 0x4f
 8005bd4:	d902      	bls.n	8005bdc <osSemaphoreNew+0x4c>
        mem = 1;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	e00c      	b.n	8005bf6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d108      	bne.n	8005bf6 <osSemaphoreNew+0x66>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <osSemaphoreNew+0x66>
          mem = 0;
 8005bec:	2300      	movs	r3, #0
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	e001      	b.n	8005bf6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d04c      	beq.n	8005c98 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d128      	bne.n	8005c56 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d10a      	bne.n	8005c20 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2203      	movs	r2, #3
 8005c10:	9200      	str	r2, [sp, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	2100      	movs	r1, #0
 8005c16:	2001      	movs	r0, #1
 8005c18:	f000 fc02 	bl	8006420 <xQueueGenericCreateStatic>
 8005c1c:	61f8      	str	r0, [r7, #28]
 8005c1e:	e005      	b.n	8005c2c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005c20:	2203      	movs	r2, #3
 8005c22:	2100      	movs	r1, #0
 8005c24:	2001      	movs	r0, #1
 8005c26:	f000 fc78 	bl	800651a <xQueueGenericCreate>
 8005c2a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d022      	beq.n	8005c78 <osSemaphoreNew+0xe8>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01f      	beq.n	8005c78 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	69f8      	ldr	r0, [r7, #28]
 8005c40:	f000 fdf0 	bl	8006824 <xQueueGenericSend>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d016      	beq.n	8005c78 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005c4a:	69f8      	ldr	r0, [r7, #28]
 8005c4c:	f001 f97c 	bl	8006f48 <vQueueDelete>
            hSemaphore = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e010      	b.n	8005c78 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d108      	bne.n	8005c6e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	461a      	mov	r2, r3
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fd6f 	bl	8006748 <xQueueCreateCountingSemaphoreStatic>
 8005c6a:	61f8      	str	r0, [r7, #28]
 8005c6c:	e004      	b.n	8005c78 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fda2 	bl	80067ba <xQueueCreateCountingSemaphore>
 8005c76:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <osSemaphoreNew+0xfc>
          name = attr->name;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e001      	b.n	8005c90 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c90:	6979      	ldr	r1, [r7, #20]
 8005c92:	69f8      	ldr	r0, [r7, #28]
 8005c94:	f001 faa4 	bl	80071e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c98:	69fb      	ldr	r3, [r7, #28]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a06      	ldr	r2, [pc, #24]	@ (8005ccc <vApplicationGetIdleTaskMemory+0x28>)
 8005cb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4a05      	ldr	r2, [pc, #20]	@ (8005cd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2280      	movs	r2, #128	@ 0x80
 8005cc0:	601a      	str	r2, [r3, #0]
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr
 8005ccc:	200014a8 	.word	0x200014a8
 8005cd0:	20001504 	.word	0x20001504

08005cd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a07      	ldr	r2, [pc, #28]	@ (8005d00 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ce4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4a06      	ldr	r2, [pc, #24]	@ (8005d04 <vApplicationGetTimerTaskMemory+0x30>)
 8005cea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20001704 	.word	0x20001704
 8005d04:	20001760 	.word	0x20001760

08005d08 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005d2e:	2320      	movs	r3, #32
 8005d30:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d00b      	beq.n	8005d50 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	60fb      	str	r3, [r7, #12]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fa41 	bl	80061ec <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005d70:	697b      	ldr	r3, [r7, #20]
	}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005d80:	2020      	movs	r0, #32
 8005d82:	f003 f8ed 	bl	8008f60 <pvPortMalloc>
 8005d86:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fa27 	bl	80061ec <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005da4:	687b      	ldr	r3, [r7, #4]
	}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b090      	sub	sp, #64	@ 0x40
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <xEventGroupWaitBits+0x38>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	623b      	str	r3, [r7, #32]
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	e7fd      	b.n	8005de4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dee:	d30b      	bcc.n	8005e08 <xEventGroupWaitBits+0x58>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	61fb      	str	r3, [r7, #28]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <xEventGroupWaitBits+0x76>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	61bb      	str	r3, [r7, #24]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e26:	f002 f939 	bl	800809c <xTaskGetSchedulerState>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <xEventGroupWaitBits+0x86>
 8005e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <xEventGroupWaitBits+0x8a>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <xEventGroupWaitBits+0x8c>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	617b      	str	r3, [r7, #20]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8005e58:	f001 fc8c 	bl	8007774 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e68:	f000 f98b 	bl	8006182 <prvTestWaitCondition>
 8005e6c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d028      	beq.n	8005ed4 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e020      	b.n	8005ed4 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ea0:	e018      	b.n	8005ed4 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eae:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	1d18      	adds	r0, r3, #4
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eca:	4619      	mov	r1, r3
 8005ecc:	f001 fe4a 	bl	8007b64 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005ed4:	f001 fc5c 	bl	8007790 <xTaskResumeAll>
 8005ed8:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d031      	beq.n	8005f44 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d107      	bne.n	8005ef6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8005ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f50 <xEventGroupWaitBits+0x1a0>)
 8005ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005ef6:	f002 fa4b 	bl	8008390 <uxTaskResetEventItemValue>
 8005efa:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d11a      	bne.n	8005f3c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8005f06:	f002 ff29 	bl	8008d5c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005f16:	f000 f934 	bl	8006182 <prvTestWaitCondition>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	401a      	ands	r2, r3
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8005f38:	f002 ff40 	bl	8008dbc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3740      	adds	r7, #64	@ 0x40
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <xEventGroupClearBits+0x2c>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	60fb      	str	r3, [r7, #12]
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	e7fd      	b.n	8005f7c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f86:	d30b      	bcc.n	8005fa0 <xEventGroupClearBits+0x4c>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	60bb      	str	r3, [r7, #8]
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005fa0:	f002 fedc 	bl	8008d5c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005fb8:	f002 ff00 	bl	8008dbc <vPortExitCritical>

	return uxReturn;
 8005fbc:	693b      	ldr	r3, [r7, #16]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4804      	ldr	r0, [pc, #16]	@ (8005fec <xEventGroupClearBitsFromISR+0x24>)
 8005fda:	f002 fdb1 	bl	8008b40 <xTimerPendFunctionCallFromISR>
 8005fde:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
	}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	08006169 	.word	0x08006169

08005ff0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	@ 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ffc:	f3ef 8211 	mrs	r2, BASEPRI
 8006000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	60fa      	str	r2, [r7, #12]
 8006012:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006014:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006016:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006028:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800602a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800602c:	4618      	mov	r0, r3
 800602e:	3724      	adds	r7, #36	@ 0x24
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b08e      	sub	sp, #56	@ 0x38
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006040:	2300      	movs	r3, #0
 8006042:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10b      	bne.n	800606a <xEventGroupSetBits+0x34>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	613b      	str	r3, [r7, #16]
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	e7fd      	b.n	8006066 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006070:	d30b      	bcc.n	800608a <xEventGroupSetBits+0x54>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60fb      	str	r3, [r7, #12]
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	e7fd      	b.n	8006086 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	3304      	adds	r3, #4
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	3308      	adds	r3, #8
 8006094:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006096:	f001 fb6d 	bl	8007774 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80060a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060aa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80060ac:	e03c      	b.n	8006128 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80060b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80060c4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060cc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d108      	bne.n	80060ea <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060e8:	e008      	b.n	80060fc <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80060ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	4013      	ands	r3, r2
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d101      	bne.n	80060fc <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80060fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d010      	beq.n	8006124 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800610c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	4313      	orrs	r3, r2
 8006112:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800611c:	4619      	mov	r1, r3
 800611e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006120:	f001 fdee 	bl	8007d00 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8006128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	429a      	cmp	r2, r3
 800612e:	d1be      	bne.n	80060ae <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	43db      	mvns	r3, r3
 8006138:	401a      	ands	r2, r3
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800613e:	f001 fb27 	bl	8007790 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006144:	681b      	ldr	r3, [r3, #0]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3738      	adds	r7, #56	@ 0x38
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff ff6b 	bl	8006036 <xEventGroupSetBits>
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff feed 	bl	8005f54 <xEventGroupClearBits>
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006182:	b480      	push	{r7}
 8006184:	b087      	sub	sp, #28
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d107      	bne.n	80061a8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80061a2:	2301      	movs	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e007      	b.n	80061b8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d101      	bne.n	80061b8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80061b8:	697b      	ldr	r3, [r7, #20]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	68f9      	ldr	r1, [r7, #12]
 80061d6:	4804      	ldr	r0, [pc, #16]	@ (80061e8 <xEventGroupSetBitsFromISR+0x24>)
 80061d8:	f002 fcb2 	bl	8008b40 <xTimerPendFunctionCallFromISR>
 80061dc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80061de:	697b      	ldr	r3, [r7, #20]
	}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	0800614f 	.word	0x0800614f

080061ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f103 0208 	add.w	r2, r3, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f103 0208 	add.w	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f103 0208 	add.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]
}
 800627e:	bf00      	nop
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d103      	bne.n	80062a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e00c      	b.n	80062c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3308      	adds	r3, #8
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e002      	b.n	80062b6 <vListInsert+0x2e>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d2f6      	bcs.n	80062b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]
}
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6892      	ldr	r2, [r2, #8]
 800630e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6852      	ldr	r2, [r2, #4]
 8006318:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d103      	bne.n	800632c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	1e5a      	subs	r2, r3, #1
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr
	...

0800634c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <xQueueGenericReset+0x2c>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	60bb      	str	r3, [r7, #8]
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	e7fd      	b.n	8006374 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006378:	f002 fcf0 	bl	8008d5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006384:	68f9      	ldr	r1, [r7, #12]
 8006386:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a8:	3b01      	subs	r3, #1
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	441a      	add	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	22ff      	movs	r2, #255	@ 0xff
 80063bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	22ff      	movs	r2, #255	@ 0xff
 80063c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d114      	bne.n	80063f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01a      	beq.n	800640c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3310      	adds	r3, #16
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fc2c 	bl	8007c38 <xTaskRemoveFromEventList>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d012      	beq.n	800640c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063e6:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <xQueueGenericReset+0xd0>)
 80063e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	e009      	b.n	800640c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3310      	adds	r3, #16
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fef5 	bl	80061ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3324      	adds	r3, #36	@ 0x24
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff fef0 	bl	80061ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800640c:	f002 fcd6 	bl	8008dbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006410:	2301      	movs	r3, #1
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	@ 0x38
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	e7fd      	b.n	8006448 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <xQueueGenericCreateStatic+0x56>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <xQueueGenericCreateStatic+0x5a>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <xQueueGenericCreateStatic+0x5c>
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10b      	bne.n	8006498 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	623b      	str	r3, [r7, #32]
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	e7fd      	b.n	8006494 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <xQueueGenericCreateStatic+0x84>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <xQueueGenericCreateStatic+0x88>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e000      	b.n	80064aa <xQueueGenericCreateStatic+0x8a>
 80064a8:	2300      	movs	r3, #0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10b      	bne.n	80064c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	61fb      	str	r3, [r7, #28]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064c6:	2350      	movs	r3, #80	@ 0x50
 80064c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b50      	cmp	r3, #80	@ 0x50
 80064ce:	d00b      	beq.n	80064e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	61bb      	str	r3, [r7, #24]
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	e7fd      	b.n	80064e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80064ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00d      	beq.n	8006510 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 f840 	bl	8006590 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006512:	4618      	mov	r0, r3
 8006514:	3730      	adds	r7, #48	@ 0x30
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800651a:	b580      	push	{r7, lr}
 800651c:	b08a      	sub	sp, #40	@ 0x28
 800651e:	af02      	add	r7, sp, #8
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	4613      	mov	r3, r2
 8006526:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <xQueueGenericCreate+0x2c>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	613b      	str	r3, [r7, #16]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	fb02 f303 	mul.w	r3, r2, r3
 800654e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	3350      	adds	r3, #80	@ 0x50
 8006554:	4618      	mov	r0, r3
 8006556:	f002 fd03 	bl	8008f60 <pvPortMalloc>
 800655a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d011      	beq.n	8006586 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	3350      	adds	r3, #80	@ 0x50
 800656a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006574:	79fa      	ldrb	r2, [r7, #7]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	4613      	mov	r3, r2
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f805 	bl	8006590 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006586:	69bb      	ldr	r3, [r7, #24]
	}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d103      	bne.n	80065ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065be:	2101      	movs	r1, #1
 80065c0:	69b8      	ldr	r0, [r7, #24]
 80065c2:	f7ff fec3 	bl	800634c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	78fa      	ldrb	r2, [r7, #3]
 80065ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00e      	beq.n	8006602 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80065f6:	2300      	movs	r3, #0
 80065f8:	2200      	movs	r2, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f911 	bl	8006824 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800660a:	b580      	push	{r7, lr}
 800660c:	b086      	sub	sp, #24
 800660e:	af00      	add	r7, sp, #0
 8006610:	4603      	mov	r3, r0
 8006612:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006614:	2301      	movs	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	461a      	mov	r2, r3
 8006620:	6939      	ldr	r1, [r7, #16]
 8006622:	6978      	ldr	r0, [r7, #20]
 8006624:	f7ff ff79 	bl	800651a <xQueueGenericCreate>
 8006628:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff ffd3 	bl	80065d6 <prvInitialiseMutex>

		return xNewQueue;
 8006630:	68fb      	ldr	r3, [r7, #12]
	}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800663a:	b580      	push	{r7, lr}
 800663c:	b088      	sub	sp, #32
 800663e:	af02      	add	r7, sp, #8
 8006640:	4603      	mov	r3, r0
 8006642:	6039      	str	r1, [r7, #0]
 8006644:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006646:	2301      	movs	r3, #1
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	6939      	ldr	r1, [r7, #16]
 8006658:	6978      	ldr	r0, [r7, #20]
 800665a:	f7ff fee1 	bl	8006420 <xQueueGenericCreateStatic>
 800665e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff ffb8 	bl	80065d6 <prvInitialiseMutex>

		return xNewQueue;
 8006666:	68fb      	ldr	r3, [r7, #12]
	}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	689c      	ldr	r4, [r3, #8]
 800669e:	f001 fcef 	bl	8008080 <xTaskGetCurrentTaskHandle>
 80066a2:	4603      	mov	r3, r0
 80066a4:	429c      	cmp	r4, r3
 80066a6:	d111      	bne.n	80066cc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80066ba:	2300      	movs	r3, #0
 80066bc:	2200      	movs	r2, #0
 80066be:	2100      	movs	r1, #0
 80066c0:	6938      	ldr	r0, [r7, #16]
 80066c2:	f000 f8af 	bl	8006824 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80066c6:	2301      	movs	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e001      	b.n	80066d0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80066d0:	697b      	ldr	r3, [r7, #20]
	}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd90      	pop	{r4, r7, pc}

080066da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80066da:	b590      	push	{r4, r7, lr}
 80066dc:	b087      	sub	sp, #28
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10b      	bne.n	8006706 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60fb      	str	r3, [r7, #12]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	689c      	ldr	r4, [r3, #8]
 800670a:	f001 fcb9 	bl	8008080 <xTaskGetCurrentTaskHandle>
 800670e:	4603      	mov	r3, r0
 8006710:	429c      	cmp	r4, r3
 8006712:	d107      	bne.n	8006724 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800671e:	2301      	movs	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e00c      	b.n	800673e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6938      	ldr	r0, [r7, #16]
 8006728:	f000 fafe 	bl	8006d28 <xQueueSemaphoreTake>
 800672c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800673e:	697b      	ldr	r3, [r7, #20]
	}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	bd90      	pop	{r4, r7, pc}

08006748 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	@ 0x28
 800674c:	af02      	add	r7, sp, #8
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	61bb      	str	r3, [r7, #24]
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	e7fd      	b.n	800676e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	429a      	cmp	r2, r3
 8006778:	d90b      	bls.n	8006792 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	617b      	str	r3, [r7, #20]
}
 800678c:	bf00      	nop
 800678e:	bf00      	nop
 8006790:	e7fd      	b.n	800678e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006792:	2302      	movs	r3, #2
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	2100      	movs	r1, #0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff fe3f 	bl	8006420 <xQueueGenericCreateStatic>
 80067a2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80067b0:	69fb      	ldr	r3, [r7, #28]
	}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	613b      	str	r3, [r7, #16]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d90b      	bls.n	8006802 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	60fb      	str	r3, [r7, #12]
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	e7fd      	b.n	80067fe <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006802:	2202      	movs	r2, #2
 8006804:	2100      	movs	r1, #0
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff fe87 	bl	800651a <xQueueGenericCreate>
 800680c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800681a:	697b      	ldr	r3, [r7, #20]
	}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08e      	sub	sp, #56	@ 0x38
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006832:	2300      	movs	r3, #0
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <xQueueGenericSend+0x34>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006852:	bf00      	nop
 8006854:	bf00      	nop
 8006856:	e7fd      	b.n	8006854 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <xQueueGenericSend+0x42>
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <xQueueGenericSend+0x46>
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <xQueueGenericSend+0x48>
 800686a:	2300      	movs	r3, #0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <xQueueGenericSend+0x64>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	e7fd      	b.n	8006884 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b02      	cmp	r3, #2
 800688c:	d103      	bne.n	8006896 <xQueueGenericSend+0x72>
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006892:	2b01      	cmp	r3, #1
 8006894:	d101      	bne.n	800689a <xQueueGenericSend+0x76>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <xQueueGenericSend+0x78>
 800689a:	2300      	movs	r3, #0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <xQueueGenericSend+0x94>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	623b      	str	r3, [r7, #32]
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	e7fd      	b.n	80068b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068b8:	f001 fbf0 	bl	800809c <xTaskGetSchedulerState>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <xQueueGenericSend+0xa4>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <xQueueGenericSend+0xa8>
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <xQueueGenericSend+0xaa>
 80068cc:	2300      	movs	r3, #0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <xQueueGenericSend+0xc6>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	61fb      	str	r3, [r7, #28]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ea:	f002 fa37 	bl	8008d5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d302      	bcc.n	8006900 <xQueueGenericSend+0xdc>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d129      	bne.n	8006954 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006906:	f000 fb5a 	bl	8006fbe <prvCopyDataToQueue>
 800690a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	3324      	adds	r3, #36	@ 0x24
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f98d 	bl	8007c38 <xTaskRemoveFromEventList>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006924:	4b3f      	ldr	r3, [pc, #252]	@ (8006a24 <xQueueGenericSend+0x200>)
 8006926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	e00a      	b.n	800694c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800693c:	4b39      	ldr	r3, [pc, #228]	@ (8006a24 <xQueueGenericSend+0x200>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800694c:	f002 fa36 	bl	8008dbc <vPortExitCritical>
				return pdPASS;
 8006950:	2301      	movs	r3, #1
 8006952:	e063      	b.n	8006a1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800695a:	f002 fa2f 	bl	8008dbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800695e:	2300      	movs	r3, #0
 8006960:	e05c      	b.n	8006a1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006968:	f107 0314 	add.w	r3, r7, #20
 800696c:	4618      	mov	r0, r3
 800696e:	f001 fa2b 	bl	8007dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006972:	2301      	movs	r3, #1
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006976:	f002 fa21 	bl	8008dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800697a:	f000 fefb 	bl	8007774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800697e:	f002 f9ed 	bl	8008d5c <vPortEnterCritical>
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006988:	b25b      	sxtb	r3, r3
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698e:	d103      	bne.n	8006998 <xQueueGenericSend+0x174>
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800699e:	b25b      	sxtb	r3, r3
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d103      	bne.n	80069ae <xQueueGenericSend+0x18a>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069ae:	f002 fa05 	bl	8008dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069b2:	1d3a      	adds	r2, r7, #4
 80069b4:	f107 0314 	add.w	r3, r7, #20
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 fa1a 	bl	8007df4 <xTaskCheckForTimeOut>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d124      	bne.n	8006a10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069c8:	f000 fbf1 	bl	80071ae <prvIsQueueFull>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	3310      	adds	r3, #16
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	4611      	mov	r1, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f89c 	bl	8007b18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069e2:	f000 fb7c 	bl	80070de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069e6:	f000 fed3 	bl	8007790 <xTaskResumeAll>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f47f af7c 	bne.w	80068ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a24 <xQueueGenericSend+0x200>)
 80069f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	e772      	b.n	80068ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a06:	f000 fb6a 	bl	80070de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a0a:	f000 fec1 	bl	8007790 <xTaskResumeAll>
 8006a0e:	e76c      	b.n	80068ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a12:	f000 fb64 	bl	80070de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a16:	f000 febb 	bl	8007790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3738      	adds	r7, #56	@ 0x38
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b090      	sub	sp, #64	@ 0x40
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10b      	bne.n	8006a58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d103      	bne.n	8006a66 <xQueueGenericSendFromISR+0x3e>
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <xQueueGenericSendFromISR+0x42>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <xQueueGenericSendFromISR+0x44>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a82:	bf00      	nop
 8006a84:	bf00      	nop
 8006a86:	e7fd      	b.n	8006a84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d103      	bne.n	8006a96 <xQueueGenericSendFromISR+0x6e>
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <xQueueGenericSendFromISR+0x72>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <xQueueGenericSendFromISR+0x74>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10b      	bne.n	8006ab8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	623b      	str	r3, [r7, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	e7fd      	b.n	8006ab4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ab8:	f002 fa12 	bl	8008ee0 <vPortValidateInterruptPriority>
	__asm volatile
 8006abc:	f3ef 8211 	mrs	r2, BASEPRI
 8006ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	61fa      	str	r2, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d302      	bcc.n	8006aea <xQueueGenericSendFromISR+0xc2>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d12f      	bne.n	8006b4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b00:	f000 fa5d 	bl	8006fbe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d112      	bne.n	8006b34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d016      	beq.n	8006b44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	3324      	adds	r3, #36	@ 0x24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 f88c 	bl	8007c38 <xTaskRemoveFromEventList>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e007      	b.n	8006b44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b38:	3301      	adds	r3, #1
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	b25a      	sxtb	r2, r3
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b44:	2301      	movs	r3, #1
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b48:	e001      	b.n	8006b4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b50:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f383 8811 	msr	BASEPRI, r3
}
 8006b58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3740      	adds	r7, #64	@ 0x40
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	@ 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10b      	bne.n	8006b96 <xQueueReceive+0x32>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	623b      	str	r3, [r7, #32]
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <xQueueReceive+0x40>
 8006b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <xQueueReceive+0x44>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <xQueueReceive+0x46>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <xQueueReceive+0x62>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	61fb      	str	r3, [r7, #28]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bc6:	f001 fa69 	bl	800809c <xTaskGetSchedulerState>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d102      	bne.n	8006bd6 <xQueueReceive+0x72>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <xQueueReceive+0x76>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <xQueueReceive+0x78>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10b      	bne.n	8006bf8 <xQueueReceive+0x94>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	61bb      	str	r3, [r7, #24]
}
 8006bf2:	bf00      	nop
 8006bf4:	bf00      	nop
 8006bf6:	e7fd      	b.n	8006bf4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bf8:	f002 f8b0 	bl	8008d5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01f      	beq.n	8006c48 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c0c:	f000 fa41 	bl	8007092 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	1e5a      	subs	r2, r3, #1
 8006c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c16:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00f      	beq.n	8006c40 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c22:	3310      	adds	r3, #16
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 f807 	bl	8007c38 <xTaskRemoveFromEventList>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c30:	4b3c      	ldr	r3, [pc, #240]	@ (8006d24 <xQueueReceive+0x1c0>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c40:	f002 f8bc 	bl	8008dbc <vPortExitCritical>
				return pdPASS;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e069      	b.n	8006d1c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c4e:	f002 f8b5 	bl	8008dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e062      	b.n	8006d1c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 f8b1 	bl	8007dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c6a:	f002 f8a7 	bl	8008dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c6e:	f000 fd81 	bl	8007774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c72:	f002 f873 	bl	8008d5c <vPortEnterCritical>
 8006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d103      	bne.n	8006c8c <xQueueReceive+0x128>
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c92:	b25b      	sxtb	r3, r3
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d103      	bne.n	8006ca2 <xQueueReceive+0x13e>
 8006c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ca2:	f002 f88b 	bl	8008dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ca6:	1d3a      	adds	r2, r7, #4
 8006ca8:	f107 0310 	add.w	r3, r7, #16
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f8a0 	bl	8007df4 <xTaskCheckForTimeOut>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d123      	bne.n	8006d02 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cbc:	f000 fa61 	bl	8007182 <prvIsQueueEmpty>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	3324      	adds	r3, #36	@ 0x24
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 ff22 	bl	8007b18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd6:	f000 fa02 	bl	80070de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cda:	f000 fd59 	bl	8007790 <xTaskResumeAll>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d189      	bne.n	8006bf8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <xQueueReceive+0x1c0>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	e780      	b.n	8006bf8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cf8:	f000 f9f1 	bl	80070de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cfc:	f000 fd48 	bl	8007790 <xTaskResumeAll>
 8006d00:	e77a      	b.n	8006bf8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d04:	f000 f9eb 	bl	80070de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d08:	f000 fd42 	bl	8007790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d0e:	f000 fa38 	bl	8007182 <prvIsQueueEmpty>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f43f af6f 	beq.w	8006bf8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3730      	adds	r7, #48	@ 0x30
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08e      	sub	sp, #56	@ 0x38
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d32:	2300      	movs	r3, #0
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10b      	bne.n	8006d5c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	623b      	str	r3, [r7, #32]
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	e7fd      	b.n	8006d58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	61fb      	str	r3, [r7, #28]
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d7c:	f001 f98e 	bl	800809c <xTaskGetSchedulerState>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d102      	bne.n	8006d8c <xQueueSemaphoreTake+0x64>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <xQueueSemaphoreTake+0x68>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <xQueueSemaphoreTake+0x6a>
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	61bb      	str	r3, [r7, #24]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dae:	f001 ffd5 	bl	8008d5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d024      	beq.n	8006e08 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc0:	1e5a      	subs	r2, r3, #1
 8006dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006dce:	f001 faf7 	bl	80083c0 <pvTaskIncrementMutexHeldCount>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00f      	beq.n	8006e00 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	3310      	adds	r3, #16
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 ff27 	bl	8007c38 <xTaskRemoveFromEventList>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006df0:	4b54      	ldr	r3, [pc, #336]	@ (8006f44 <xQueueSemaphoreTake+0x21c>)
 8006df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e00:	f001 ffdc 	bl	8008dbc <vPortExitCritical>
				return pdPASS;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e098      	b.n	8006f3a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d112      	bne.n	8006e34 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	617b      	str	r3, [r7, #20]
}
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e2c:	f001 ffc6 	bl	8008dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e082      	b.n	8006f3a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e3a:	f107 030c 	add.w	r3, r7, #12
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 ffc2 	bl	8007dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e48:	f001 ffb8 	bl	8008dbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e4c:	f000 fc92 	bl	8007774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e50:	f001 ff84 	bl	8008d5c <vPortEnterCritical>
 8006e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e5a:	b25b      	sxtb	r3, r3
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e60:	d103      	bne.n	8006e6a <xQueueSemaphoreTake+0x142>
 8006e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e70:	b25b      	sxtb	r3, r3
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d103      	bne.n	8006e80 <xQueueSemaphoreTake+0x158>
 8006e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e80:	f001 ff9c 	bl	8008dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e84:	463a      	mov	r2, r7
 8006e86:	f107 030c 	add.w	r3, r7, #12
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 ffb1 	bl	8007df4 <xTaskCheckForTimeOut>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d132      	bne.n	8006efe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e9a:	f000 f972 	bl	8007182 <prvIsQueueEmpty>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d026      	beq.n	8006ef2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006eac:	f001 ff56 	bl	8008d5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 f90f 	bl	80080d8 <xTaskPriorityInherit>
 8006eba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006ebc:	f001 ff7e 	bl	8008dbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec2:	3324      	adds	r3, #36	@ 0x24
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fe25 	bl	8007b18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ece:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ed0:	f000 f905 	bl	80070de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ed4:	f000 fc5c 	bl	8007790 <xTaskResumeAll>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f47f af67 	bne.w	8006dae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006ee0:	4b18      	ldr	r3, [pc, #96]	@ (8006f44 <xQueueSemaphoreTake+0x21c>)
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	e75d      	b.n	8006dae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ef2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ef4:	f000 f8f3 	bl	80070de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ef8:	f000 fc4a 	bl	8007790 <xTaskResumeAll>
 8006efc:	e757      	b.n	8006dae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006efe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f00:	f000 f8ed 	bl	80070de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f04:	f000 fc44 	bl	8007790 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f0a:	f000 f93a 	bl	8007182 <prvIsQueueEmpty>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f43f af4c 	beq.w	8006dae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00d      	beq.n	8006f38 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006f1c:	f001 ff1e 	bl	8008d5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f22:	f000 f835 	bl	8006f90 <prvGetDisinheritPriorityAfterTimeout>
 8006f26:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 f9aa 	bl	8008288 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f34:	f001 ff42 	bl	8008dbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3738      	adds	r7, #56	@ 0x38
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	e000ed04 	.word	0xe000ed04

08006f48 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10b      	bne.n	8006f72 <vQueueDelete+0x2a>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	60bb      	str	r3, [r7, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	e7fd      	b.n	8006f6e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f95c 	bl	8007230 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f002 f8ba 	bl	80090fc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d006      	beq.n	8006fae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	e001      	b.n	8006fb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
	}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr

08006fbe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10d      	bne.n	8006ff8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d14d      	bne.n	8007080 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 f8dd 	bl	80081a8 <xTaskPriorityDisinherit>
 8006fee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	609a      	str	r2, [r3, #8]
 8006ff6:	e043      	b.n	8007080 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d119      	bne.n	8007032 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6858      	ldr	r0, [r3, #4]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	461a      	mov	r2, r3
 8007008:	68b9      	ldr	r1, [r7, #8]
 800700a:	f002 fa15 	bl	8009438 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007016:	441a      	add	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	429a      	cmp	r2, r3
 8007026:	d32b      	bcc.n	8007080 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	605a      	str	r2, [r3, #4]
 8007030:	e026      	b.n	8007080 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68d8      	ldr	r0, [r3, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	461a      	mov	r2, r3
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	f002 f9fb 	bl	8009438 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	425b      	negs	r3, r3
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d207      	bcs.n	800706e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007066:	425b      	negs	r3, r3
 8007068:	441a      	add	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d105      	bne.n	8007080 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	3b01      	subs	r3, #1
 800707e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007088:	697b      	ldr	r3, [r7, #20]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d018      	beq.n	80070d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ac:	441a      	add	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d303      	bcc.n	80070c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68d9      	ldr	r1, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	461a      	mov	r2, r3
 80070d0:	6838      	ldr	r0, [r7, #0]
 80070d2:	f002 f9b1 	bl	8009438 <memcpy>
	}
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070e6:	f001 fe39 	bl	8008d5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070f2:	e011      	b.n	8007118 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d012      	beq.n	8007122 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3324      	adds	r3, #36	@ 0x24
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fd99 	bl	8007c38 <xTaskRemoveFromEventList>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800710c:	f000 fed6 	bl	8007ebc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	3b01      	subs	r3, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711c:	2b00      	cmp	r3, #0
 800711e:	dce9      	bgt.n	80070f4 <prvUnlockQueue+0x16>
 8007120:	e000      	b.n	8007124 <prvUnlockQueue+0x46>
					break;
 8007122:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	22ff      	movs	r2, #255	@ 0xff
 8007128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800712c:	f001 fe46 	bl	8008dbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007130:	f001 fe14 	bl	8008d5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800713a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800713c:	e011      	b.n	8007162 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d012      	beq.n	800716c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3310      	adds	r3, #16
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fd74 	bl	8007c38 <xTaskRemoveFromEventList>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007156:	f000 feb1 	bl	8007ebc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	3b01      	subs	r3, #1
 800715e:	b2db      	uxtb	r3, r3
 8007160:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dce9      	bgt.n	800713e <prvUnlockQueue+0x60>
 800716a:	e000      	b.n	800716e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800716c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	22ff      	movs	r2, #255	@ 0xff
 8007172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007176:	f001 fe21 	bl	8008dbc <vPortExitCritical>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800718a:	f001 fde7 	bl	8008d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007192:	2b00      	cmp	r3, #0
 8007194:	d102      	bne.n	800719c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007196:	2301      	movs	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e001      	b.n	80071a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071a0:	f001 fe0c 	bl	8008dbc <vPortExitCritical>

	return xReturn;
 80071a4:	68fb      	ldr	r3, [r7, #12]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b6:	f001 fdd1 	bl	8008d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d102      	bne.n	80071cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071c6:	2301      	movs	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e001      	b.n	80071d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071d0:	f001 fdf4 	bl	8008dbc <vPortExitCritical>

	return xReturn;
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	e014      	b.n	800721a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071f0:	4a0e      	ldr	r2, [pc, #56]	@ (800722c <vQueueAddToRegistry+0x4c>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071fc:	490b      	ldr	r1, [pc, #44]	@ (800722c <vQueueAddToRegistry+0x4c>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007206:	4a09      	ldr	r2, [pc, #36]	@ (800722c <vQueueAddToRegistry+0x4c>)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4413      	add	r3, r2
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007212:	e006      	b.n	8007222 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b07      	cmp	r3, #7
 800721e:	d9e7      	bls.n	80071f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr
 800722c:	20001b60 	.word	0x20001b60

08007230 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	e016      	b.n	800726c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800723e:	4a10      	ldr	r2, [pc, #64]	@ (8007280 <vQueueUnregisterQueue+0x50>)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	429a      	cmp	r2, r3
 800724c:	d10b      	bne.n	8007266 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800724e:	4a0c      	ldr	r2, [pc, #48]	@ (8007280 <vQueueUnregisterQueue+0x50>)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2100      	movs	r1, #0
 8007254:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007258:	4a09      	ldr	r2, [pc, #36]	@ (8007280 <vQueueUnregisterQueue+0x50>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	4413      	add	r3, r2
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]
				break;
 8007264:	e006      	b.n	8007274 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b07      	cmp	r3, #7
 8007270:	d9e5      	bls.n	800723e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	20001b60 	.word	0x20001b60

08007284 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007294:	f001 fd62 	bl	8008d5c <vPortEnterCritical>
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800729e:	b25b      	sxtb	r3, r3
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d103      	bne.n	80072ae <vQueueWaitForMessageRestricted+0x2a>
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072b4:	b25b      	sxtb	r3, r3
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d103      	bne.n	80072c4 <vQueueWaitForMessageRestricted+0x40>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072c4:	f001 fd7a 	bl	8008dbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	3324      	adds	r3, #36	@ 0x24
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fc81 	bl	8007be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072de:	6978      	ldr	r0, [r7, #20]
 80072e0:	f7ff fefd 	bl	80070de <prvUnlockQueue>
	}
 80072e4:	bf00      	nop
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08e      	sub	sp, #56	@ 0x38
 80072f0:	af04      	add	r7, sp, #16
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	623b      	str	r3, [r7, #32]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10b      	bne.n	8007336 <xTaskCreateStatic+0x4a>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	61fb      	str	r3, [r7, #28]
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	e7fd      	b.n	8007332 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007336:	235c      	movs	r3, #92	@ 0x5c
 8007338:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b5c      	cmp	r3, #92	@ 0x5c
 800733e:	d00b      	beq.n	8007358 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	61bb      	str	r3, [r7, #24]
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007358:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01e      	beq.n	800739e <xTaskCreateStatic+0xb2>
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01b      	beq.n	800739e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800736e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	2202      	movs	r2, #2
 8007374:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007378:	2300      	movs	r3, #0
 800737a:	9303      	str	r3, [sp, #12]
 800737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737e:	9302      	str	r3, [sp, #8]
 8007380:	f107 0314 	add.w	r3, r7, #20
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f850 	bl	8007436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007396:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007398:	f000 f8de 	bl	8007558 <prvAddNewTaskToReadyList>
 800739c:	e001      	b.n	80073a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073a2:	697b      	ldr	r3, [r7, #20]
	}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3728      	adds	r7, #40	@ 0x28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08c      	sub	sp, #48	@ 0x30
 80073b0:	af04      	add	r7, sp, #16
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4613      	mov	r3, r2
 80073ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073bc:	88fb      	ldrh	r3, [r7, #6]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 fdcd 	bl	8008f60 <pvPortMalloc>
 80073c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00e      	beq.n	80073ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073ce:	205c      	movs	r0, #92	@ 0x5c
 80073d0:	f001 fdc6 	bl	8008f60 <pvPortMalloc>
 80073d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80073e2:	e005      	b.n	80073f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073e4:	6978      	ldr	r0, [r7, #20]
 80073e6:	f001 fe89 	bl	80090fc <vPortFree>
 80073ea:	e001      	b.n	80073f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d017      	beq.n	8007426 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073fe:	88fa      	ldrh	r2, [r7, #6]
 8007400:	2300      	movs	r3, #0
 8007402:	9303      	str	r3, [sp, #12]
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	9302      	str	r3, [sp, #8]
 8007408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f80e 	bl	8007436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800741a:	69f8      	ldr	r0, [r7, #28]
 800741c:	f000 f89c 	bl	8007558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007420:	2301      	movs	r3, #1
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	e002      	b.n	800742c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007426:	f04f 33ff 	mov.w	r3, #4294967295
 800742a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800742c:	69bb      	ldr	r3, [r7, #24]
	}
 800742e:	4618      	mov	r0, r3
 8007430:	3720      	adds	r7, #32
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b088      	sub	sp, #32
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
 8007442:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007446:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	461a      	mov	r2, r3
 800744e:	21a5      	movs	r1, #165	@ 0xa5
 8007450:	f001 ffbe 	bl	80093d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800745e:	3b01      	subs	r3, #1
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f023 0307 	bic.w	r3, r3, #7
 800746c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	617b      	str	r3, [r7, #20]
}
 800748a:	bf00      	nop
 800748c:	bf00      	nop
 800748e:	e7fd      	b.n	800748c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01f      	beq.n	80074d6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	e012      	b.n	80074c2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	7819      	ldrb	r1, [r3, #0]
 80074a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	3334      	adds	r3, #52	@ 0x34
 80074ac:	460a      	mov	r2, r1
 80074ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	3301      	adds	r3, #1
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b0f      	cmp	r3, #15
 80074c6:	d9e9      	bls.n	800749c <prvInitialiseNewTask+0x66>
 80074c8:	e000      	b.n	80074cc <prvInitialiseNewTask+0x96>
			{
				break;
 80074ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074d4:	e003      	b.n	80074de <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	2b37      	cmp	r3, #55	@ 0x37
 80074e2:	d901      	bls.n	80074e8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074e4:	2337      	movs	r3, #55	@ 0x37
 80074e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074f2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f6:	2200      	movs	r2, #0
 80074f8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	3304      	adds	r3, #4
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fe93 	bl	800622a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	3318      	adds	r3, #24
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fe8e 	bl	800622a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007512:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007516:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007522:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	2200      	movs	r2, #0
 8007528:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	68f9      	ldr	r1, [r7, #12]
 8007536:	69b8      	ldr	r0, [r7, #24]
 8007538:	f001 fb22 	bl	8008b80 <pxPortInitialiseStack>
 800753c:	4602      	mov	r2, r0
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800754e:	bf00      	nop
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007560:	f001 fbfc 	bl	8008d5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007564:	4b2d      	ldr	r3, [pc, #180]	@ (800761c <prvAddNewTaskToReadyList+0xc4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a2c      	ldr	r2, [pc, #176]	@ (800761c <prvAddNewTaskToReadyList+0xc4>)
 800756c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800756e:	4b2c      	ldr	r3, [pc, #176]	@ (8007620 <prvAddNewTaskToReadyList+0xc8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007576:	4a2a      	ldr	r2, [pc, #168]	@ (8007620 <prvAddNewTaskToReadyList+0xc8>)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800757c:	4b27      	ldr	r3, [pc, #156]	@ (800761c <prvAddNewTaskToReadyList+0xc4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d110      	bne.n	80075a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007584:	f000 fcbe 	bl	8007f04 <prvInitialiseTaskLists>
 8007588:	e00d      	b.n	80075a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800758a:	4b26      	ldr	r3, [pc, #152]	@ (8007624 <prvAddNewTaskToReadyList+0xcc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007592:	4b23      	ldr	r3, [pc, #140]	@ (8007620 <prvAddNewTaskToReadyList+0xc8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	429a      	cmp	r2, r3
 800759e:	d802      	bhi.n	80075a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007620 <prvAddNewTaskToReadyList+0xc8>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075a6:	4b20      	ldr	r3, [pc, #128]	@ (8007628 <prvAddNewTaskToReadyList+0xd0>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007628 <prvAddNewTaskToReadyList+0xd0>)
 80075ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007628 <prvAddNewTaskToReadyList+0xd0>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075bc:	4b1b      	ldr	r3, [pc, #108]	@ (800762c <prvAddNewTaskToReadyList+0xd4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d903      	bls.n	80075cc <prvAddNewTaskToReadyList+0x74>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	4a18      	ldr	r2, [pc, #96]	@ (800762c <prvAddNewTaskToReadyList+0xd4>)
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4a15      	ldr	r2, [pc, #84]	@ (8007630 <prvAddNewTaskToReadyList+0xd8>)
 80075da:	441a      	add	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fe2d 	bl	8006242 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075e8:	f001 fbe8 	bl	8008dbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <prvAddNewTaskToReadyList+0xcc>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00e      	beq.n	8007612 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007620 <prvAddNewTaskToReadyList+0xc8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	429a      	cmp	r2, r3
 8007600:	d207      	bcs.n	8007612 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007602:	4b0c      	ldr	r3, [pc, #48]	@ (8007634 <prvAddNewTaskToReadyList+0xdc>)
 8007604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20002074 	.word	0x20002074
 8007620:	20001ba0 	.word	0x20001ba0
 8007624:	20002080 	.word	0x20002080
 8007628:	20002090 	.word	0x20002090
 800762c:	2000207c 	.word	0x2000207c
 8007630:	20001ba4 	.word	0x20001ba4
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d018      	beq.n	800767c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800764a:	4b14      	ldr	r3, [pc, #80]	@ (800769c <vTaskDelay+0x64>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00b      	beq.n	800766a <vTaskDelay+0x32>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60bb      	str	r3, [r7, #8]
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop
 8007668:	e7fd      	b.n	8007666 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800766a:	f000 f883 	bl	8007774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800766e:	2100      	movs	r1, #0
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 feb9 	bl	80083e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007676:	f000 f88b 	bl	8007790 <xTaskResumeAll>
 800767a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d107      	bne.n	8007692 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007682:	4b07      	ldr	r3, [pc, #28]	@ (80076a0 <vTaskDelay+0x68>)
 8007684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	2000209c 	.word	0x2000209c
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	@ 0x28
 80076a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076b2:	463a      	mov	r2, r7
 80076b4:	1d39      	adds	r1, r7, #4
 80076b6:	f107 0308 	add.w	r3, r7, #8
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe faf2 	bl	8005ca4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	9202      	str	r2, [sp, #8]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2300      	movs	r3, #0
 80076d0:	460a      	mov	r2, r1
 80076d2:	4922      	ldr	r1, [pc, #136]	@ (800775c <vTaskStartScheduler+0xb8>)
 80076d4:	4822      	ldr	r0, [pc, #136]	@ (8007760 <vTaskStartScheduler+0xbc>)
 80076d6:	f7ff fe09 	bl	80072ec <xTaskCreateStatic>
 80076da:	4603      	mov	r3, r0
 80076dc:	4a21      	ldr	r2, [pc, #132]	@ (8007764 <vTaskStartScheduler+0xc0>)
 80076de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076e0:	4b20      	ldr	r3, [pc, #128]	@ (8007764 <vTaskStartScheduler+0xc0>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076e8:	2301      	movs	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e001      	b.n	80076f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d102      	bne.n	80076fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076f8:	f000 feca 	bl	8008490 <xTimerCreateTimerTask>
 80076fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d116      	bne.n	8007732 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	613b      	str	r3, [r7, #16]
}
 8007716:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007718:	4b13      	ldr	r3, [pc, #76]	@ (8007768 <vTaskStartScheduler+0xc4>)
 800771a:	f04f 32ff 	mov.w	r2, #4294967295
 800771e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007720:	4b12      	ldr	r3, [pc, #72]	@ (800776c <vTaskStartScheduler+0xc8>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007726:	4b12      	ldr	r3, [pc, #72]	@ (8007770 <vTaskStartScheduler+0xcc>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800772c:	f001 faa4 	bl	8008c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007730:	e00f      	b.n	8007752 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d10b      	bne.n	8007752 <vTaskStartScheduler+0xae>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	60fb      	str	r3, [r7, #12]
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <vTaskStartScheduler+0xaa>
}
 8007752:	bf00      	nop
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	08009f7c 	.word	0x08009f7c
 8007760:	08007ed5 	.word	0x08007ed5
 8007764:	20002098 	.word	0x20002098
 8007768:	20002094 	.word	0x20002094
 800776c:	20002080 	.word	0x20002080
 8007770:	20002078 	.word	0x20002078

08007774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007778:	4b04      	ldr	r3, [pc, #16]	@ (800778c <vTaskSuspendAll+0x18>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3301      	adds	r3, #1
 800777e:	4a03      	ldr	r2, [pc, #12]	@ (800778c <vTaskSuspendAll+0x18>)
 8007780:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007782:	bf00      	nop
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	2000209c 	.word	0x2000209c

08007790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800779e:	4b42      	ldr	r3, [pc, #264]	@ (80078a8 <xTaskResumeAll+0x118>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10b      	bne.n	80077be <xTaskResumeAll+0x2e>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	603b      	str	r3, [r7, #0]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077be:	f001 facd 	bl	8008d5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077c2:	4b39      	ldr	r3, [pc, #228]	@ (80078a8 <xTaskResumeAll+0x118>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	4a37      	ldr	r2, [pc, #220]	@ (80078a8 <xTaskResumeAll+0x118>)
 80077ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077cc:	4b36      	ldr	r3, [pc, #216]	@ (80078a8 <xTaskResumeAll+0x118>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d162      	bne.n	800789a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077d4:	4b35      	ldr	r3, [pc, #212]	@ (80078ac <xTaskResumeAll+0x11c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d05e      	beq.n	800789a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077dc:	e02f      	b.n	800783e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077de:	4b34      	ldr	r3, [pc, #208]	@ (80078b0 <xTaskResumeAll+0x120>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3318      	adds	r3, #24
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fd84 	bl	80062f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fe fd7f 	bl	80062f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	4b2d      	ldr	r3, [pc, #180]	@ (80078b4 <xTaskResumeAll+0x124>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d903      	bls.n	800780e <xTaskResumeAll+0x7e>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780a:	4a2a      	ldr	r2, [pc, #168]	@ (80078b4 <xTaskResumeAll+0x124>)
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4a27      	ldr	r2, [pc, #156]	@ (80078b8 <xTaskResumeAll+0x128>)
 800781c:	441a      	add	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3304      	adds	r3, #4
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f7fe fd0c 	bl	8006242 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782e:	4b23      	ldr	r3, [pc, #140]	@ (80078bc <xTaskResumeAll+0x12c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007834:	429a      	cmp	r2, r3
 8007836:	d302      	bcc.n	800783e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007838:	4b21      	ldr	r3, [pc, #132]	@ (80078c0 <xTaskResumeAll+0x130>)
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800783e:	4b1c      	ldr	r3, [pc, #112]	@ (80078b0 <xTaskResumeAll+0x120>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1cb      	bne.n	80077de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800784c:	f000 fbf8 	bl	8008040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007850:	4b1c      	ldr	r3, [pc, #112]	@ (80078c4 <xTaskResumeAll+0x134>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d010      	beq.n	800787e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800785c:	f000 f844 	bl	80078e8 <xTaskIncrementTick>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007866:	4b16      	ldr	r3, [pc, #88]	@ (80078c0 <xTaskResumeAll+0x130>)
 8007868:	2201      	movs	r2, #1
 800786a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3b01      	subs	r3, #1
 8007870:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1f1      	bne.n	800785c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007878:	4b12      	ldr	r3, [pc, #72]	@ (80078c4 <xTaskResumeAll+0x134>)
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800787e:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <xTaskResumeAll+0x130>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007886:	2301      	movs	r3, #1
 8007888:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800788a:	4b0f      	ldr	r3, [pc, #60]	@ (80078c8 <xTaskResumeAll+0x138>)
 800788c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800789a:	f001 fa8f 	bl	8008dbc <vPortExitCritical>

	return xAlreadyYielded;
 800789e:	68bb      	ldr	r3, [r7, #8]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	2000209c 	.word	0x2000209c
 80078ac:	20002074 	.word	0x20002074
 80078b0:	20002034 	.word	0x20002034
 80078b4:	2000207c 	.word	0x2000207c
 80078b8:	20001ba4 	.word	0x20001ba4
 80078bc:	20001ba0 	.word	0x20001ba0
 80078c0:	20002088 	.word	0x20002088
 80078c4:	20002084 	.word	0x20002084
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078d2:	4b04      	ldr	r3, [pc, #16]	@ (80078e4 <xTaskGetTickCount+0x18>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078d8:	687b      	ldr	r3, [r7, #4]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr
 80078e4:	20002078 	.word	0x20002078

080078e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f2:	4b4f      	ldr	r3, [pc, #316]	@ (8007a30 <xTaskIncrementTick+0x148>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f040 8090 	bne.w	8007a1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007a34 <xTaskIncrementTick+0x14c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007904:	4a4b      	ldr	r2, [pc, #300]	@ (8007a34 <xTaskIncrementTick+0x14c>)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d121      	bne.n	8007954 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007910:	4b49      	ldr	r3, [pc, #292]	@ (8007a38 <xTaskIncrementTick+0x150>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <xTaskIncrementTick+0x4a>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	603b      	str	r3, [r7, #0]
}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	e7fd      	b.n	800792e <xTaskIncrementTick+0x46>
 8007932:	4b41      	ldr	r3, [pc, #260]	@ (8007a38 <xTaskIncrementTick+0x150>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	4b40      	ldr	r3, [pc, #256]	@ (8007a3c <xTaskIncrementTick+0x154>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a3e      	ldr	r2, [pc, #248]	@ (8007a38 <xTaskIncrementTick+0x150>)
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	4a3e      	ldr	r2, [pc, #248]	@ (8007a3c <xTaskIncrementTick+0x154>)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	4b3e      	ldr	r3, [pc, #248]	@ (8007a40 <xTaskIncrementTick+0x158>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	4a3c      	ldr	r2, [pc, #240]	@ (8007a40 <xTaskIncrementTick+0x158>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	f000 fb76 	bl	8008040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007954:	4b3b      	ldr	r3, [pc, #236]	@ (8007a44 <xTaskIncrementTick+0x15c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	429a      	cmp	r2, r3
 800795c:	d349      	bcc.n	80079f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800795e:	4b36      	ldr	r3, [pc, #216]	@ (8007a38 <xTaskIncrementTick+0x150>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d104      	bne.n	8007972 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007968:	4b36      	ldr	r3, [pc, #216]	@ (8007a44 <xTaskIncrementTick+0x15c>)
 800796a:	f04f 32ff 	mov.w	r2, #4294967295
 800796e:	601a      	str	r2, [r3, #0]
					break;
 8007970:	e03f      	b.n	80079f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007972:	4b31      	ldr	r3, [pc, #196]	@ (8007a38 <xTaskIncrementTick+0x150>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	429a      	cmp	r2, r3
 8007988:	d203      	bcs.n	8007992 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800798a:	4a2e      	ldr	r2, [pc, #184]	@ (8007a44 <xTaskIncrementTick+0x15c>)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007990:	e02f      	b.n	80079f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3304      	adds	r3, #4
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fcae 	bl	80062f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	3318      	adds	r3, #24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe fca5 	bl	80062f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b2:	4b25      	ldr	r3, [pc, #148]	@ (8007a48 <xTaskIncrementTick+0x160>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d903      	bls.n	80079c2 <xTaskIncrementTick+0xda>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079be:	4a22      	ldr	r2, [pc, #136]	@ (8007a48 <xTaskIncrementTick+0x160>)
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4a1f      	ldr	r2, [pc, #124]	@ (8007a4c <xTaskIncrementTick+0x164>)
 80079d0:	441a      	add	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4619      	mov	r1, r3
 80079d8:	4610      	mov	r0, r2
 80079da:	f7fe fc32 	bl	8006242 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a50 <xTaskIncrementTick+0x168>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d3b8      	bcc.n	800795e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f0:	e7b5      	b.n	800795e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079f2:	4b17      	ldr	r3, [pc, #92]	@ (8007a50 <xTaskIncrementTick+0x168>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f8:	4914      	ldr	r1, [pc, #80]	@ (8007a4c <xTaskIncrementTick+0x164>)
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d901      	bls.n	8007a0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a0e:	4b11      	ldr	r3, [pc, #68]	@ (8007a54 <xTaskIncrementTick+0x16c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e004      	b.n	8007a26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a58 <xTaskIncrementTick+0x170>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3301      	adds	r3, #1
 8007a22:	4a0d      	ldr	r2, [pc, #52]	@ (8007a58 <xTaskIncrementTick+0x170>)
 8007a24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a26:	697b      	ldr	r3, [r7, #20]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	2000209c 	.word	0x2000209c
 8007a34:	20002078 	.word	0x20002078
 8007a38:	2000202c 	.word	0x2000202c
 8007a3c:	20002030 	.word	0x20002030
 8007a40:	2000208c 	.word	0x2000208c
 8007a44:	20002094 	.word	0x20002094
 8007a48:	2000207c 	.word	0x2000207c
 8007a4c:	20001ba4 	.word	0x20001ba4
 8007a50:	20001ba0 	.word	0x20001ba0
 8007a54:	20002088 	.word	0x20002088
 8007a58:	20002084 	.word	0x20002084

08007a5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a62:	4b28      	ldr	r3, [pc, #160]	@ (8007b04 <vTaskSwitchContext+0xa8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a6a:	4b27      	ldr	r3, [pc, #156]	@ (8007b08 <vTaskSwitchContext+0xac>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a70:	e042      	b.n	8007af8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007a72:	4b25      	ldr	r3, [pc, #148]	@ (8007b08 <vTaskSwitchContext+0xac>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a78:	4b24      	ldr	r3, [pc, #144]	@ (8007b0c <vTaskSwitchContext+0xb0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e011      	b.n	8007aa4 <vTaskSwitchContext+0x48>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <vTaskSwitchContext+0x42>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	607b      	str	r3, [r7, #4]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <vTaskSwitchContext+0x3e>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	491a      	ldr	r1, [pc, #104]	@ (8007b10 <vTaskSwitchContext+0xb4>)
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0e3      	beq.n	8007a80 <vTaskSwitchContext+0x24>
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4a13      	ldr	r2, [pc, #76]	@ (8007b10 <vTaskSwitchContext+0xb4>)
 8007ac4:	4413      	add	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d104      	bne.n	8007ae8 <vTaskSwitchContext+0x8c>
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	605a      	str	r2, [r3, #4]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	4a09      	ldr	r2, [pc, #36]	@ (8007b14 <vTaskSwitchContext+0xb8>)
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	4a06      	ldr	r2, [pc, #24]	@ (8007b0c <vTaskSwitchContext+0xb0>)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6013      	str	r3, [r2, #0]
}
 8007af8:	bf00      	nop
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	2000209c 	.word	0x2000209c
 8007b08:	20002088 	.word	0x20002088
 8007b0c:	2000207c 	.word	0x2000207c
 8007b10:	20001ba4 	.word	0x20001ba4
 8007b14:	20001ba0 	.word	0x20001ba0

08007b18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10b      	bne.n	8007b40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60fb      	str	r3, [r7, #12]
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b40:	4b07      	ldr	r3, [pc, #28]	@ (8007b60 <vTaskPlaceOnEventList+0x48>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3318      	adds	r3, #24
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fe fb9d 	bl	8006288 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b4e:	2101      	movs	r1, #1
 8007b50:	6838      	ldr	r0, [r7, #0]
 8007b52:	f000 fc49 	bl	80083e8 <prvAddCurrentTaskToDelayedList>
}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20001ba0 	.word	0x20001ba0

08007b64 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	617b      	str	r3, [r7, #20]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007b8e:	4b12      	ldr	r3, [pc, #72]	@ (8007bd8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	613b      	str	r3, [r7, #16]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007bae:	4b0b      	ldr	r3, [pc, #44]	@ (8007bdc <vTaskPlaceOnUnorderedEventList+0x78>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007bb8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bba:	4b08      	ldr	r3, [pc, #32]	@ (8007bdc <vTaskPlaceOnUnorderedEventList+0x78>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3318      	adds	r3, #24
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7fe fb3d 	bl	8006242 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bc8:	2101      	movs	r1, #1
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fc0c 	bl	80083e8 <prvAddCurrentTaskToDelayedList>
}
 8007bd0:	bf00      	nop
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	2000209c 	.word	0x2000209c
 8007bdc:	20001ba0 	.word	0x20001ba0

08007be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	617b      	str	r3, [r7, #20]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c34 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3318      	adds	r3, #24
 8007c10:	4619      	mov	r1, r3
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7fe fb15 	bl	8006242 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	68b8      	ldr	r0, [r7, #8]
 8007c28:	f000 fbde 	bl	80083e8 <prvAddCurrentTaskToDelayedList>
	}
 8007c2c:	bf00      	nop
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20001ba0 	.word	0x20001ba0

08007c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10b      	bne.n	8007c66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	60fb      	str	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	3318      	adds	r3, #24
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fb44 	bl	80062f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce8 <xTaskRemoveFromEventList+0xb0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d11d      	bne.n	8007cb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe fb3b 	bl	80062f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c86:	4b19      	ldr	r3, [pc, #100]	@ (8007cec <xTaskRemoveFromEventList+0xb4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d903      	bls.n	8007c96 <xTaskRemoveFromEventList+0x5e>
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c92:	4a16      	ldr	r2, [pc, #88]	@ (8007cec <xTaskRemoveFromEventList+0xb4>)
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4a13      	ldr	r2, [pc, #76]	@ (8007cf0 <xTaskRemoveFromEventList+0xb8>)
 8007ca4:	441a      	add	r2, r3
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4619      	mov	r1, r3
 8007cac:	4610      	mov	r0, r2
 8007cae:	f7fe fac8 	bl	8006242 <vListInsertEnd>
 8007cb2:	e005      	b.n	8007cc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	3318      	adds	r3, #24
 8007cb8:	4619      	mov	r1, r3
 8007cba:	480e      	ldr	r0, [pc, #56]	@ (8007cf4 <xTaskRemoveFromEventList+0xbc>)
 8007cbc:	f7fe fac1 	bl	8006242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf8 <xTaskRemoveFromEventList+0xc0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d905      	bls.n	8007cda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007cfc <xTaskRemoveFromEventList+0xc4>)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
 8007cd8:	e001      	b.n	8007cde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cde:	697b      	ldr	r3, [r7, #20]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	2000209c 	.word	0x2000209c
 8007cec:	2000207c 	.word	0x2000207c
 8007cf0:	20001ba4 	.word	0x20001ba4
 8007cf4:	20002034 	.word	0x20002034
 8007cf8:	20001ba0 	.word	0x20001ba0
 8007cfc:	20002088 	.word	0x20002088

08007d00 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007db4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	613b      	str	r3, [r7, #16]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10b      	bne.n	8007d58 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	60fb      	str	r3, [r7, #12]
}
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
 8007d56:	e7fd      	b.n	8007d54 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fe facd 	bl	80062f8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fac8 	bl	80062f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6c:	4b12      	ldr	r3, [pc, #72]	@ (8007db8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d903      	bls.n	8007d7c <vTaskRemoveFromUnorderedEventList+0x7c>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d78:	4a0f      	ldr	r2, [pc, #60]	@ (8007db8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4a0c      	ldr	r2, [pc, #48]	@ (8007dbc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007d8a:	441a      	add	r2, r3
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4619      	mov	r1, r3
 8007d92:	4610      	mov	r0, r2
 8007d94:	f7fe fa55 	bl	8006242 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d9c:	4b08      	ldr	r3, [pc, #32]	@ (8007dc0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d902      	bls.n	8007dac <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007da6:	4b07      	ldr	r3, [pc, #28]	@ (8007dc4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007da8:	2201      	movs	r2, #1
 8007daa:	601a      	str	r2, [r3, #0]
	}
}
 8007dac:	bf00      	nop
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	2000209c 	.word	0x2000209c
 8007db8:	2000207c 	.word	0x2000207c
 8007dbc:	20001ba4 	.word	0x20001ba4
 8007dc0:	20001ba0 	.word	0x20001ba0
 8007dc4:	20002088 	.word	0x20002088

08007dc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dd0:	4b06      	ldr	r3, [pc, #24]	@ (8007dec <vTaskInternalSetTimeOutState+0x24>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dd8:	4b05      	ldr	r3, [pc, #20]	@ (8007df0 <vTaskInternalSetTimeOutState+0x28>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	605a      	str	r2, [r3, #4]
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	2000208c 	.word	0x2000208c
 8007df0:	20002078 	.word	0x20002078

08007df4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10b      	bne.n	8007e1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	613b      	str	r3, [r7, #16]
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	60fb      	str	r3, [r7, #12]
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e3a:	f000 ff8f 	bl	8008d5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb4 <xTaskCheckForTimeOut+0xc0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	d102      	bne.n	8007e5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	e023      	b.n	8007ea6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4b15      	ldr	r3, [pc, #84]	@ (8007eb8 <xTaskCheckForTimeOut+0xc4>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d007      	beq.n	8007e7a <xTaskCheckForTimeOut+0x86>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d302      	bcc.n	8007e7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e74:	2301      	movs	r3, #1
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	e015      	b.n	8007ea6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d20b      	bcs.n	8007e9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff ff99 	bl	8007dc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	e004      	b.n	8007ea6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ea6:	f000 ff89 	bl	8008dbc <vPortExitCritical>

	return xReturn;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3720      	adds	r7, #32
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20002078 	.word	0x20002078
 8007eb8:	2000208c 	.word	0x2000208c

08007ebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ec0:	4b03      	ldr	r3, [pc, #12]	@ (8007ed0 <vTaskMissedYield+0x14>)
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bc80      	pop	{r7}
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20002088 	.word	0x20002088

08007ed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007edc:	f000 f852 	bl	8007f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ee0:	4b06      	ldr	r3, [pc, #24]	@ (8007efc <prvIdleTask+0x28>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d9f9      	bls.n	8007edc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ee8:	4b05      	ldr	r3, [pc, #20]	@ (8007f00 <prvIdleTask+0x2c>)
 8007eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ef8:	e7f0      	b.n	8007edc <prvIdleTask+0x8>
 8007efa:	bf00      	nop
 8007efc:	20001ba4 	.word	0x20001ba4
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
 8007f0e:	e00c      	b.n	8007f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4a12      	ldr	r2, [pc, #72]	@ (8007f64 <prvInitialiseTaskLists+0x60>)
 8007f1c:	4413      	add	r3, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe f964 	bl	80061ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3301      	adds	r3, #1
 8007f28:	607b      	str	r3, [r7, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b37      	cmp	r3, #55	@ 0x37
 8007f2e:	d9ef      	bls.n	8007f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f30:	480d      	ldr	r0, [pc, #52]	@ (8007f68 <prvInitialiseTaskLists+0x64>)
 8007f32:	f7fe f95b 	bl	80061ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f36:	480d      	ldr	r0, [pc, #52]	@ (8007f6c <prvInitialiseTaskLists+0x68>)
 8007f38:	f7fe f958 	bl	80061ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f3c:	480c      	ldr	r0, [pc, #48]	@ (8007f70 <prvInitialiseTaskLists+0x6c>)
 8007f3e:	f7fe f955 	bl	80061ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f42:	480c      	ldr	r0, [pc, #48]	@ (8007f74 <prvInitialiseTaskLists+0x70>)
 8007f44:	f7fe f952 	bl	80061ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f48:	480b      	ldr	r0, [pc, #44]	@ (8007f78 <prvInitialiseTaskLists+0x74>)
 8007f4a:	f7fe f94f 	bl	80061ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f7c <prvInitialiseTaskLists+0x78>)
 8007f50:	4a05      	ldr	r2, [pc, #20]	@ (8007f68 <prvInitialiseTaskLists+0x64>)
 8007f52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f54:	4b0a      	ldr	r3, [pc, #40]	@ (8007f80 <prvInitialiseTaskLists+0x7c>)
 8007f56:	4a05      	ldr	r2, [pc, #20]	@ (8007f6c <prvInitialiseTaskLists+0x68>)
 8007f58:	601a      	str	r2, [r3, #0]
}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20001ba4 	.word	0x20001ba4
 8007f68:	20002004 	.word	0x20002004
 8007f6c:	20002018 	.word	0x20002018
 8007f70:	20002034 	.word	0x20002034
 8007f74:	20002048 	.word	0x20002048
 8007f78:	20002060 	.word	0x20002060
 8007f7c:	2000202c 	.word	0x2000202c
 8007f80:	20002030 	.word	0x20002030

08007f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f8a:	e019      	b.n	8007fc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f8c:	f000 fee6 	bl	8008d5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f90:	4b10      	ldr	r3, [pc, #64]	@ (8007fd4 <prvCheckTasksWaitingTermination+0x50>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe f9ab 	bl	80062f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd8 <prvCheckTasksWaitingTermination+0x54>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8007fd8 <prvCheckTasksWaitingTermination+0x54>)
 8007faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fac:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <prvCheckTasksWaitingTermination+0x58>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8007fdc <prvCheckTasksWaitingTermination+0x58>)
 8007fb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fb6:	f000 ff01 	bl	8008dbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f810 	bl	8007fe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fc0:	4b06      	ldr	r3, [pc, #24]	@ (8007fdc <prvCheckTasksWaitingTermination+0x58>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e1      	bne.n	8007f8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20002048 	.word	0x20002048
 8007fd8:	20002074 	.word	0x20002074
 8007fdc:	2000205c 	.word	0x2000205c

08007fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d108      	bne.n	8008004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 f880 	bl	80090fc <vPortFree>
				vPortFree( pxTCB );
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 f87d 	bl	80090fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008002:	e019      	b.n	8008038 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800800a:	2b01      	cmp	r3, #1
 800800c:	d103      	bne.n	8008016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 f874 	bl	80090fc <vPortFree>
	}
 8008014:	e010      	b.n	8008038 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800801c:	2b02      	cmp	r3, #2
 800801e:	d00b      	beq.n	8008038 <prvDeleteTCB+0x58>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60fb      	str	r3, [r7, #12]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <prvDeleteTCB+0x54>
	}
 8008038:	bf00      	nop
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008046:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <prvResetNextTaskUnblockTime+0x38>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008050:	4b0a      	ldr	r3, [pc, #40]	@ (800807c <prvResetNextTaskUnblockTime+0x3c>)
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008058:	e008      	b.n	800806c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805a:	4b07      	ldr	r3, [pc, #28]	@ (8008078 <prvResetNextTaskUnblockTime+0x38>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4a04      	ldr	r2, [pc, #16]	@ (800807c <prvResetNextTaskUnblockTime+0x3c>)
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	2000202c 	.word	0x2000202c
 800807c:	20002094 	.word	0x20002094

08008080 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008086:	4b04      	ldr	r3, [pc, #16]	@ (8008098 <xTaskGetCurrentTaskHandle+0x18>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800808c:	687b      	ldr	r3, [r7, #4]
	}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr
 8008098:	20001ba0 	.word	0x20001ba0

0800809c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080a2:	4b0b      	ldr	r3, [pc, #44]	@ (80080d0 <xTaskGetSchedulerState+0x34>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d102      	bne.n	80080b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080aa:	2301      	movs	r3, #1
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	e008      	b.n	80080c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b0:	4b08      	ldr	r3, [pc, #32]	@ (80080d4 <xTaskGetSchedulerState+0x38>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d102      	bne.n	80080be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080b8:	2302      	movs	r3, #2
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	e001      	b.n	80080c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080c2:	687b      	ldr	r3, [r7, #4]
	}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20002080 	.word	0x20002080
 80080d4:	2000209c 	.word	0x2000209c

080080d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d051      	beq.n	8008192 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f2:	4b2a      	ldr	r3, [pc, #168]	@ (800819c <xTaskPriorityInherit+0xc4>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d241      	bcs.n	8008180 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	db06      	blt.n	8008112 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008104:	4b25      	ldr	r3, [pc, #148]	@ (800819c <xTaskPriorityInherit+0xc4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6959      	ldr	r1, [r3, #20]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4a1f      	ldr	r2, [pc, #124]	@ (80081a0 <xTaskPriorityInherit+0xc8>)
 8008124:	4413      	add	r3, r2
 8008126:	4299      	cmp	r1, r3
 8008128:	d122      	bne.n	8008170 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3304      	adds	r3, #4
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe f8e2 	bl	80062f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008134:	4b19      	ldr	r3, [pc, #100]	@ (800819c <xTaskPriorityInherit+0xc4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008142:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <xTaskPriorityInherit+0xcc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d903      	bls.n	8008152 <xTaskPriorityInherit+0x7a>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814e:	4a15      	ldr	r2, [pc, #84]	@ (80081a4 <xTaskPriorityInherit+0xcc>)
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4a10      	ldr	r2, [pc, #64]	@ (80081a0 <xTaskPriorityInherit+0xc8>)
 8008160:	441a      	add	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	3304      	adds	r3, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f7fe f86a 	bl	8006242 <vListInsertEnd>
 800816e:	e004      	b.n	800817a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008170:	4b0a      	ldr	r3, [pc, #40]	@ (800819c <xTaskPriorityInherit+0xc4>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800817a:	2301      	movs	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e008      	b.n	8008192 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <xTaskPriorityInherit+0xc4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818a:	429a      	cmp	r2, r3
 800818c:	d201      	bcs.n	8008192 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800818e:	2301      	movs	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008192:	68fb      	ldr	r3, [r7, #12]
	}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20001ba0 	.word	0x20001ba0
 80081a0:	20001ba4 	.word	0x20001ba4
 80081a4:	2000207c 	.word	0x2000207c

080081a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d058      	beq.n	8008270 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081be:	4b2f      	ldr	r3, [pc, #188]	@ (800827c <xTaskPriorityDisinherit+0xd4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d00b      	beq.n	80081e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	60fb      	str	r3, [r7, #12]
}
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	e7fd      	b.n	80081dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	60bb      	str	r3, [r7, #8]
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	e7fd      	b.n	80081fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008204:	1e5a      	subs	r2, r3, #1
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008212:	429a      	cmp	r2, r3
 8008214:	d02c      	beq.n	8008270 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821a:	2b00      	cmp	r3, #0
 800821c:	d128      	bne.n	8008270 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3304      	adds	r3, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe f868 	bl	80062f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008240:	4b0f      	ldr	r3, [pc, #60]	@ (8008280 <xTaskPriorityDisinherit+0xd8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	d903      	bls.n	8008250 <xTaskPriorityDisinherit+0xa8>
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	4a0c      	ldr	r2, [pc, #48]	@ (8008280 <xTaskPriorityDisinherit+0xd8>)
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4a09      	ldr	r2, [pc, #36]	@ (8008284 <xTaskPriorityDisinherit+0xdc>)
 800825e:	441a      	add	r2, r3
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	3304      	adds	r3, #4
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f7fd ffeb 	bl	8006242 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800826c:	2301      	movs	r3, #1
 800826e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008270:	697b      	ldr	r3, [r7, #20]
	}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20001ba0 	.word	0x20001ba0
 8008280:	2000207c 	.word	0x2000207c
 8008284:	20001ba4 	.word	0x20001ba4

08008288 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008296:	2301      	movs	r3, #1
 8008298:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d06c      	beq.n	800837a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10b      	bne.n	80082c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80082a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	60fb      	str	r3, [r7, #12]
}
 80082ba:	bf00      	nop
 80082bc:	bf00      	nop
 80082be:	e7fd      	b.n	80082bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d902      	bls.n	80082d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	e002      	b.n	80082d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	69fa      	ldr	r2, [r7, #28]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d04c      	beq.n	800837a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d147      	bne.n	800837a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082ea:	4b26      	ldr	r3, [pc, #152]	@ (8008384 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d10b      	bne.n	800830c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	60bb      	str	r3, [r7, #8]
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	e7fd      	b.n	8008308 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008310:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	db04      	blt.n	800832a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	6959      	ldr	r1, [r3, #20]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4a13      	ldr	r2, [pc, #76]	@ (8008388 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800833a:	4413      	add	r3, r2
 800833c:	4299      	cmp	r1, r3
 800833e:	d11c      	bne.n	800837a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	3304      	adds	r3, #4
 8008344:	4618      	mov	r0, r3
 8008346:	f7fd ffd7 	bl	80062f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800834e:	4b0f      	ldr	r3, [pc, #60]	@ (800838c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	429a      	cmp	r2, r3
 8008354:	d903      	bls.n	800835e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	4a0c      	ldr	r2, [pc, #48]	@ (800838c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4a07      	ldr	r2, [pc, #28]	@ (8008388 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800836c:	441a      	add	r2, r3
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	3304      	adds	r3, #4
 8008372:	4619      	mov	r1, r3
 8008374:	4610      	mov	r0, r2
 8008376:	f7fd ff64 	bl	8006242 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800837a:	bf00      	nop
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20001ba0 	.word	0x20001ba0
 8008388:	20001ba4 	.word	0x20001ba4
 800838c:	2000207c 	.word	0x2000207c

08008390 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008396:	4b09      	ldr	r3, [pc, #36]	@ (80083bc <uxTaskResetEventItemValue+0x2c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800839e:	4b07      	ldr	r3, [pc, #28]	@ (80083bc <uxTaskResetEventItemValue+0x2c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a4:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <uxTaskResetEventItemValue+0x2c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80083ac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80083ae:	687b      	ldr	r3, [r7, #4]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bc80      	pop	{r7}
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	20001ba0 	.word	0x20001ba0

080083c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083c4:	4b07      	ldr	r3, [pc, #28]	@ (80083e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d004      	beq.n	80083d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083d2:	3201      	adds	r2, #1
 80083d4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80083d6:	4b03      	ldr	r3, [pc, #12]	@ (80083e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083d8:	681b      	ldr	r3, [r3, #0]
	}
 80083da:	4618      	mov	r0, r3
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20001ba0 	.word	0x20001ba0

080083e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083f2:	4b21      	ldr	r3, [pc, #132]	@ (8008478 <prvAddCurrentTaskToDelayedList+0x90>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f8:	4b20      	ldr	r3, [pc, #128]	@ (800847c <prvAddCurrentTaskToDelayedList+0x94>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3304      	adds	r3, #4
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fd ff7a 	bl	80062f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840a:	d10a      	bne.n	8008422 <prvAddCurrentTaskToDelayedList+0x3a>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d007      	beq.n	8008422 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008412:	4b1a      	ldr	r3, [pc, #104]	@ (800847c <prvAddCurrentTaskToDelayedList+0x94>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4819      	ldr	r0, [pc, #100]	@ (8008480 <prvAddCurrentTaskToDelayedList+0x98>)
 800841c:	f7fd ff11 	bl	8006242 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008420:	e026      	b.n	8008470 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4413      	add	r3, r2
 8008428:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800842a:	4b14      	ldr	r3, [pc, #80]	@ (800847c <prvAddCurrentTaskToDelayedList+0x94>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	429a      	cmp	r2, r3
 8008438:	d209      	bcs.n	800844e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800843a:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <prvAddCurrentTaskToDelayedList+0x9c>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4b0f      	ldr	r3, [pc, #60]	@ (800847c <prvAddCurrentTaskToDelayedList+0x94>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7fd ff1e 	bl	8006288 <vListInsert>
}
 800844c:	e010      	b.n	8008470 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800844e:	4b0e      	ldr	r3, [pc, #56]	@ (8008488 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	4b0a      	ldr	r3, [pc, #40]	@ (800847c <prvAddCurrentTaskToDelayedList+0x94>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3304      	adds	r3, #4
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7fd ff14 	bl	8006288 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008460:	4b0a      	ldr	r3, [pc, #40]	@ (800848c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	429a      	cmp	r2, r3
 8008468:	d202      	bcs.n	8008470 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800846a:	4a08      	ldr	r2, [pc, #32]	@ (800848c <prvAddCurrentTaskToDelayedList+0xa4>)
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6013      	str	r3, [r2, #0]
}
 8008470:	bf00      	nop
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20002078 	.word	0x20002078
 800847c:	20001ba0 	.word	0x20001ba0
 8008480:	20002060 	.word	0x20002060
 8008484:	20002030 	.word	0x20002030
 8008488:	2000202c 	.word	0x2000202c
 800848c:	20002094 	.word	0x20002094

08008490 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08a      	sub	sp, #40	@ 0x28
 8008494:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008496:	2300      	movs	r3, #0
 8008498:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800849a:	f000 fb11 	bl	8008ac0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800849e:	4b1d      	ldr	r3, [pc, #116]	@ (8008514 <xTimerCreateTimerTask+0x84>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d021      	beq.n	80084ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084ae:	1d3a      	adds	r2, r7, #4
 80084b0:	f107 0108 	add.w	r1, r7, #8
 80084b4:	f107 030c 	add.w	r3, r7, #12
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fd fc0b 	bl	8005cd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	9202      	str	r2, [sp, #8]
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	2302      	movs	r3, #2
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	2300      	movs	r3, #0
 80084ce:	460a      	mov	r2, r1
 80084d0:	4911      	ldr	r1, [pc, #68]	@ (8008518 <xTimerCreateTimerTask+0x88>)
 80084d2:	4812      	ldr	r0, [pc, #72]	@ (800851c <xTimerCreateTimerTask+0x8c>)
 80084d4:	f7fe ff0a 	bl	80072ec <xTaskCreateStatic>
 80084d8:	4603      	mov	r3, r0
 80084da:	4a11      	ldr	r2, [pc, #68]	@ (8008520 <xTimerCreateTimerTask+0x90>)
 80084dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084de:	4b10      	ldr	r3, [pc, #64]	@ (8008520 <xTimerCreateTimerTask+0x90>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084e6:	2301      	movs	r3, #1
 80084e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10b      	bne.n	8008508 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	613b      	str	r3, [r7, #16]
}
 8008502:	bf00      	nop
 8008504:	bf00      	nop
 8008506:	e7fd      	b.n	8008504 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008508:	697b      	ldr	r3, [r7, #20]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	200020d0 	.word	0x200020d0
 8008518:	08009f84 	.word	0x08009f84
 800851c:	0800865d 	.word	0x0800865d
 8008520:	200020d4 	.word	0x200020d4

08008524 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	@ 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008532:	2300      	movs	r3, #0
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <xTimerGenericCommand+0x30>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	623b      	str	r3, [r7, #32]
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008554:	4b19      	ldr	r3, [pc, #100]	@ (80085bc <xTimerGenericCommand+0x98>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d02a      	beq.n	80085b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b05      	cmp	r3, #5
 800856c:	dc18      	bgt.n	80085a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800856e:	f7ff fd95 	bl	800809c <xTaskGetSchedulerState>
 8008572:	4603      	mov	r3, r0
 8008574:	2b02      	cmp	r3, #2
 8008576:	d109      	bne.n	800858c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008578:	4b10      	ldr	r3, [pc, #64]	@ (80085bc <xTimerGenericCommand+0x98>)
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	f107 0110 	add.w	r1, r7, #16
 8008580:	2300      	movs	r3, #0
 8008582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008584:	f7fe f94e 	bl	8006824 <xQueueGenericSend>
 8008588:	6278      	str	r0, [r7, #36]	@ 0x24
 800858a:	e012      	b.n	80085b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800858c:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <xTimerGenericCommand+0x98>)
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	f107 0110 	add.w	r1, r7, #16
 8008594:	2300      	movs	r3, #0
 8008596:	2200      	movs	r2, #0
 8008598:	f7fe f944 	bl	8006824 <xQueueGenericSend>
 800859c:	6278      	str	r0, [r7, #36]	@ 0x24
 800859e:	e008      	b.n	80085b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085a0:	4b06      	ldr	r3, [pc, #24]	@ (80085bc <xTimerGenericCommand+0x98>)
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	f107 0110 	add.w	r1, r7, #16
 80085a8:	2300      	movs	r3, #0
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	f7fe fa3c 	bl	8006a28 <xQueueGenericSendFromISR>
 80085b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3728      	adds	r7, #40	@ 0x28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	200020d0 	.word	0x200020d0

080085c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ca:	4b23      	ldr	r3, [pc, #140]	@ (8008658 <prvProcessExpiredTimer+0x98>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	3304      	adds	r3, #4
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fd fe8d 	bl	80062f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d023      	beq.n	8008634 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	18d1      	adds	r1, r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	6978      	ldr	r0, [r7, #20]
 80085fa:	f000 f8d3 	bl	80087a4 <prvInsertTimerInActiveList>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d020      	beq.n	8008646 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008604:	2300      	movs	r3, #0
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	2300      	movs	r3, #0
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	2100      	movs	r1, #0
 800860e:	6978      	ldr	r0, [r7, #20]
 8008610:	f7ff ff88 	bl	8008524 <xTimerGenericCommand>
 8008614:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d114      	bne.n	8008646 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	e7fd      	b.n	8008630 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	b2da      	uxtb	r2, r3
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	6978      	ldr	r0, [r7, #20]
 800864c:	4798      	blx	r3
}
 800864e:	bf00      	nop
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	200020c8 	.word	0x200020c8

0800865c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008664:	f107 0308 	add.w	r3, r7, #8
 8008668:	4618      	mov	r0, r3
 800866a:	f000 f859 	bl	8008720 <prvGetNextExpireTime>
 800866e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	4619      	mov	r1, r3
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 f805 	bl	8008684 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800867a:	f000 f8d5 	bl	8008828 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800867e:	bf00      	nop
 8008680:	e7f0      	b.n	8008664 <prvTimerTask+0x8>
	...

08008684 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800868e:	f7ff f871 	bl	8007774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008692:	f107 0308 	add.w	r3, r7, #8
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f864 	bl	8008764 <prvSampleTimeNow>
 800869c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d130      	bne.n	8008706 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <prvProcessTimerOrBlockTask+0x3c>
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d806      	bhi.n	80086c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086b2:	f7ff f86d 	bl	8007790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086b6:	68f9      	ldr	r1, [r7, #12]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff ff81 	bl	80085c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086be:	e024      	b.n	800870a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d008      	beq.n	80086d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086c6:	4b13      	ldr	r3, [pc, #76]	@ (8008714 <prvProcessTimerOrBlockTask+0x90>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <prvProcessTimerOrBlockTask+0x50>
 80086d0:	2301      	movs	r3, #1
 80086d2:	e000      	b.n	80086d6 <prvProcessTimerOrBlockTask+0x52>
 80086d4:	2300      	movs	r3, #0
 80086d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008718 <prvProcessTimerOrBlockTask+0x94>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	4619      	mov	r1, r3
 80086e6:	f7fe fdcd 	bl	8007284 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086ea:	f7ff f851 	bl	8007790 <xTaskResumeAll>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10a      	bne.n	800870a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086f4:	4b09      	ldr	r3, [pc, #36]	@ (800871c <prvProcessTimerOrBlockTask+0x98>)
 80086f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	f3bf 8f6f 	isb	sy
}
 8008704:	e001      	b.n	800870a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008706:	f7ff f843 	bl	8007790 <xTaskResumeAll>
}
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	200020cc 	.word	0x200020cc
 8008718:	200020d0 	.word	0x200020d0
 800871c:	e000ed04 	.word	0xe000ed04

08008720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008728:	4b0d      	ldr	r3, [pc, #52]	@ (8008760 <prvGetNextExpireTime+0x40>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <prvGetNextExpireTime+0x16>
 8008732:	2201      	movs	r2, #1
 8008734:	e000      	b.n	8008738 <prvGetNextExpireTime+0x18>
 8008736:	2200      	movs	r2, #0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d105      	bne.n	8008750 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008744:	4b06      	ldr	r3, [pc, #24]	@ (8008760 <prvGetNextExpireTime+0x40>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	e001      	b.n	8008754 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008754:	68fb      	ldr	r3, [r7, #12]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr
 8008760:	200020c8 	.word	0x200020c8

08008764 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800876c:	f7ff f8ae 	bl	80078cc <xTaskGetTickCount>
 8008770:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008772:	4b0b      	ldr	r3, [pc, #44]	@ (80087a0 <prvSampleTimeNow+0x3c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	429a      	cmp	r2, r3
 800877a:	d205      	bcs.n	8008788 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800877c:	f000 f93a 	bl	80089f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e002      	b.n	800878e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800878e:	4a04      	ldr	r2, [pc, #16]	@ (80087a0 <prvSampleTimeNow+0x3c>)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008794:	68fb      	ldr	r3, [r7, #12]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	200020d8 	.word	0x200020d8

080087a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d812      	bhi.n	80087f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d302      	bcc.n	80087de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087d8:	2301      	movs	r3, #1
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e01b      	b.n	8008816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087de:	4b10      	ldr	r3, [pc, #64]	@ (8008820 <prvInsertTimerInActiveList+0x7c>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f7fd fd4d 	bl	8006288 <vListInsert>
 80087ee:	e012      	b.n	8008816 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d206      	bcs.n	8008806 <prvInsertTimerInActiveList+0x62>
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d302      	bcc.n	8008806 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008800:	2301      	movs	r3, #1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	e007      	b.n	8008816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008806:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <prvInsertTimerInActiveList+0x80>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3304      	adds	r3, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f7fd fd39 	bl	8006288 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008816:	697b      	ldr	r3, [r7, #20]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	200020cc 	.word	0x200020cc
 8008824:	200020c8 	.word	0x200020c8

08008828 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	@ 0x38
 800882c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800882e:	e0ce      	b.n	80089ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	da19      	bge.n	800886a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008836:	1d3b      	adds	r3, r7, #4
 8008838:	3304      	adds	r3, #4
 800883a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800883c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	61fb      	str	r3, [r7, #28]
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	e7fd      	b.n	8008856 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800885a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008860:	6850      	ldr	r0, [r2, #4]
 8008862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008864:	6892      	ldr	r2, [r2, #8]
 8008866:	4611      	mov	r1, r2
 8008868:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f2c0 80ae 	blt.w	80089ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	3304      	adds	r3, #4
 8008882:	4618      	mov	r0, r3
 8008884:	f7fd fd38 	bl	80062f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008888:	463b      	mov	r3, r7
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff ff6a 	bl	8008764 <prvSampleTimeNow>
 8008890:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b09      	cmp	r3, #9
 8008896:	f200 8097 	bhi.w	80089c8 <prvProcessReceivedCommands+0x1a0>
 800889a:	a201      	add	r2, pc, #4	@ (adr r2, 80088a0 <prvProcessReceivedCommands+0x78>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088c9 	.word	0x080088c9
 80088a4:	080088c9 	.word	0x080088c9
 80088a8:	080088c9 	.word	0x080088c9
 80088ac:	0800893f 	.word	0x0800893f
 80088b0:	08008953 	.word	0x08008953
 80088b4:	0800899f 	.word	0x0800899f
 80088b8:	080088c9 	.word	0x080088c9
 80088bc:	080088c9 	.word	0x080088c9
 80088c0:	0800893f 	.word	0x0800893f
 80088c4:	08008953 	.word	0x08008953
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088ce:	f043 0301 	orr.w	r3, r3, #1
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	18d1      	adds	r1, r2, r3
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e8:	f7ff ff5c 	bl	80087a4 <prvInsertTimerInActiveList>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d06c      	beq.n	80089cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d061      	beq.n	80089cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	441a      	add	r2, r3
 8008910:	2300      	movs	r3, #0
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	2300      	movs	r3, #0
 8008916:	2100      	movs	r1, #0
 8008918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800891a:	f7ff fe03 	bl	8008524 <xTimerGenericCommand>
 800891e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d152      	bne.n	80089cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	61bb      	str	r3, [r7, #24]
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	e7fd      	b.n	800893a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800893e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008940:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008944:	f023 0301 	bic.w	r3, r3, #1
 8008948:	b2da      	uxtb	r2, r3
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008950:	e03d      	b.n	80089ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008958:	f043 0301 	orr.w	r3, r3, #1
 800895c:	b2da      	uxtb	r2, r3
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008968:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800896a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10b      	bne.n	800898a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	617b      	str	r3, [r7, #20]
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	e7fd      	b.n	8008986 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800898a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898c:	699a      	ldr	r2, [r3, #24]
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	18d1      	adds	r1, r2, r3
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008998:	f7ff ff04 	bl	80087a4 <prvInsertTimerInActiveList>
					break;
 800899c:	e017      	b.n	80089ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d103      	bne.n	80089b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80089ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089ae:	f000 fba5 	bl	80090fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089b2:	e00c      	b.n	80089ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089ba:	f023 0301 	bic.w	r3, r3, #1
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089c6:	e002      	b.n	80089ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80089c8:	bf00      	nop
 80089ca:	e000      	b.n	80089ce <prvProcessReceivedCommands+0x1a6>
					break;
 80089cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089ce:	4b08      	ldr	r3, [pc, #32]	@ (80089f0 <prvProcessReceivedCommands+0x1c8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	1d39      	adds	r1, r7, #4
 80089d4:	2200      	movs	r2, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe f8c4 	bl	8006b64 <xQueueReceive>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f47f af26 	bne.w	8008830 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	3730      	adds	r7, #48	@ 0x30
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	200020d0 	.word	0x200020d0

080089f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089fa:	e049      	b.n	8008a90 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089fc:	4b2e      	ldr	r3, [pc, #184]	@ (8008ab8 <prvSwitchTimerLists+0xc4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a06:	4b2c      	ldr	r3, [pc, #176]	@ (8008ab8 <prvSwitchTimerLists+0xc4>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fd fc6f 	bl	80062f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d02f      	beq.n	8008a90 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	4413      	add	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d90e      	bls.n	8008a60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ab8 <prvSwitchTimerLists+0xc4>)
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4619      	mov	r1, r3
 8008a58:	4610      	mov	r0, r2
 8008a5a:	f7fd fc15 	bl	8006288 <vListInsert>
 8008a5e:	e017      	b.n	8008a90 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a60:	2300      	movs	r3, #0
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f7ff fd5a 	bl	8008524 <xTimerGenericCommand>
 8008a70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10b      	bne.n	8008a90 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	603b      	str	r3, [r7, #0]
}
 8008a8a:	bf00      	nop
 8008a8c:	bf00      	nop
 8008a8e:	e7fd      	b.n	8008a8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a90:	4b09      	ldr	r3, [pc, #36]	@ (8008ab8 <prvSwitchTimerLists+0xc4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1b0      	bne.n	80089fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a9a:	4b07      	ldr	r3, [pc, #28]	@ (8008ab8 <prvSwitchTimerLists+0xc4>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008aa0:	4b06      	ldr	r3, [pc, #24]	@ (8008abc <prvSwitchTimerLists+0xc8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a04      	ldr	r2, [pc, #16]	@ (8008ab8 <prvSwitchTimerLists+0xc4>)
 8008aa6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008aa8:	4a04      	ldr	r2, [pc, #16]	@ (8008abc <prvSwitchTimerLists+0xc8>)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	6013      	str	r3, [r2, #0]
}
 8008aae:	bf00      	nop
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	200020c8 	.word	0x200020c8
 8008abc:	200020cc 	.word	0x200020cc

08008ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ac6:	f000 f949 	bl	8008d5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008aca:	4b15      	ldr	r3, [pc, #84]	@ (8008b20 <prvCheckForValidListAndQueue+0x60>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d120      	bne.n	8008b14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ad2:	4814      	ldr	r0, [pc, #80]	@ (8008b24 <prvCheckForValidListAndQueue+0x64>)
 8008ad4:	f7fd fb8a 	bl	80061ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ad8:	4813      	ldr	r0, [pc, #76]	@ (8008b28 <prvCheckForValidListAndQueue+0x68>)
 8008ada:	f7fd fb87 	bl	80061ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008ade:	4b13      	ldr	r3, [pc, #76]	@ (8008b2c <prvCheckForValidListAndQueue+0x6c>)
 8008ae0:	4a10      	ldr	r2, [pc, #64]	@ (8008b24 <prvCheckForValidListAndQueue+0x64>)
 8008ae2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ae4:	4b12      	ldr	r3, [pc, #72]	@ (8008b30 <prvCheckForValidListAndQueue+0x70>)
 8008ae6:	4a10      	ldr	r2, [pc, #64]	@ (8008b28 <prvCheckForValidListAndQueue+0x68>)
 8008ae8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008aea:	2300      	movs	r3, #0
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	4b11      	ldr	r3, [pc, #68]	@ (8008b34 <prvCheckForValidListAndQueue+0x74>)
 8008af0:	4a11      	ldr	r2, [pc, #68]	@ (8008b38 <prvCheckForValidListAndQueue+0x78>)
 8008af2:	2110      	movs	r1, #16
 8008af4:	200a      	movs	r0, #10
 8008af6:	f7fd fc93 	bl	8006420 <xQueueGenericCreateStatic>
 8008afa:	4603      	mov	r3, r0
 8008afc:	4a08      	ldr	r2, [pc, #32]	@ (8008b20 <prvCheckForValidListAndQueue+0x60>)
 8008afe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b00:	4b07      	ldr	r3, [pc, #28]	@ (8008b20 <prvCheckForValidListAndQueue+0x60>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b08:	4b05      	ldr	r3, [pc, #20]	@ (8008b20 <prvCheckForValidListAndQueue+0x60>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	490b      	ldr	r1, [pc, #44]	@ (8008b3c <prvCheckForValidListAndQueue+0x7c>)
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fb66 	bl	80071e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b14:	f000 f952 	bl	8008dbc <vPortExitCritical>
}
 8008b18:	bf00      	nop
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200020d0 	.word	0x200020d0
 8008b24:	200020a0 	.word	0x200020a0
 8008b28:	200020b4 	.word	0x200020b4
 8008b2c:	200020c8 	.word	0x200020c8
 8008b30:	200020cc 	.word	0x200020cc
 8008b34:	2000217c 	.word	0x2000217c
 8008b38:	200020dc 	.word	0x200020dc
 8008b3c:	08009f8c 	.word	0x08009f8c

08008b40 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08a      	sub	sp, #40	@ 0x28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008b4e:	f06f 0301 	mvn.w	r3, #1
 8008b52:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b60:	4b06      	ldr	r3, [pc, #24]	@ (8008b7c <xTimerPendFunctionCallFromISR+0x3c>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	f107 0114 	add.w	r1, r7, #20
 8008b68:	2300      	movs	r3, #0
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	f7fd ff5c 	bl	8006a28 <xQueueGenericSendFromISR>
 8008b70:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3728      	adds	r7, #40	@ 0x28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	200020d0 	.word	0x200020d0

08008b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f023 0201 	bic.w	r2, r3, #1
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3b04      	subs	r3, #4
 8008bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bb0:	4a08      	ldr	r2, [pc, #32]	@ (8008bd4 <pxPortInitialiseStack+0x54>)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3b14      	subs	r3, #20
 8008bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b20      	subs	r3, #32
 8008bc6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr
 8008bd4:	08008bd9 	.word	0x08008bd9

08008bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008be2:	4b12      	ldr	r3, [pc, #72]	@ (8008c2c <prvTaskExitError+0x54>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bea:	d00b      	beq.n	8008c04 <prvTaskExitError+0x2c>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	60fb      	str	r3, [r7, #12]
}
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	e7fd      	b.n	8008c00 <prvTaskExitError+0x28>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	60bb      	str	r3, [r7, #8]
}
 8008c16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c18:	bf00      	nop
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0fc      	beq.n	8008c1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc80      	pop	{r7}
 8008c2a:	4770      	bx	lr
 8008c2c:	2000000c 	.word	0x2000000c

08008c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c30:	4b07      	ldr	r3, [pc, #28]	@ (8008c50 <pxCurrentTCBConst2>)
 8008c32:	6819      	ldr	r1, [r3, #0]
 8008c34:	6808      	ldr	r0, [r1, #0]
 8008c36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c3a:	f380 8809 	msr	PSP, r0
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f380 8811 	msr	BASEPRI, r0
 8008c4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008c4e:	4770      	bx	lr

08008c50 <pxCurrentTCBConst2>:
 8008c50:	20001ba0 	.word	0x20001ba0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop

08008c58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008c58:	4806      	ldr	r0, [pc, #24]	@ (8008c74 <prvPortStartFirstTask+0x1c>)
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	6800      	ldr	r0, [r0, #0]
 8008c5e:	f380 8808 	msr	MSP, r0
 8008c62:	b662      	cpsie	i
 8008c64:	b661      	cpsie	f
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	df00      	svc	0
 8008c70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c72:	bf00      	nop
 8008c74:	e000ed08 	.word	0xe000ed08

08008c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c7e:	4b32      	ldr	r3, [pc, #200]	@ (8008d48 <xPortStartScheduler+0xd0>)
 8008c80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	22ff      	movs	r2, #255	@ 0xff
 8008c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8008d4c <xPortStartScheduler+0xd4>)
 8008ca4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8008d50 <xPortStartScheduler+0xd8>)
 8008ca8:	2207      	movs	r2, #7
 8008caa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cac:	e009      	b.n	8008cc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008cae:	4b28      	ldr	r3, [pc, #160]	@ (8008d50 <xPortStartScheduler+0xd8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	4a26      	ldr	r2, [pc, #152]	@ (8008d50 <xPortStartScheduler+0xd8>)
 8008cb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cca:	2b80      	cmp	r3, #128	@ 0x80
 8008ccc:	d0ef      	beq.n	8008cae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cce:	4b20      	ldr	r3, [pc, #128]	@ (8008d50 <xPortStartScheduler+0xd8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f1c3 0307 	rsb	r3, r3, #7
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d00b      	beq.n	8008cf2 <xPortStartScheduler+0x7a>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	60bb      	str	r3, [r7, #8]
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	e7fd      	b.n	8008cee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cf2:	4b17      	ldr	r3, [pc, #92]	@ (8008d50 <xPortStartScheduler+0xd8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	4a15      	ldr	r2, [pc, #84]	@ (8008d50 <xPortStartScheduler+0xd8>)
 8008cfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cfc:	4b14      	ldr	r3, [pc, #80]	@ (8008d50 <xPortStartScheduler+0xd8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d04:	4a12      	ldr	r2, [pc, #72]	@ (8008d50 <xPortStartScheduler+0xd8>)
 8008d06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d10:	4b10      	ldr	r3, [pc, #64]	@ (8008d54 <xPortStartScheduler+0xdc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a0f      	ldr	r2, [pc, #60]	@ (8008d54 <xPortStartScheduler+0xdc>)
 8008d16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d54 <xPortStartScheduler+0xdc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0c      	ldr	r2, [pc, #48]	@ (8008d54 <xPortStartScheduler+0xdc>)
 8008d22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d28:	f000 f8b8 	bl	8008e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d58 <xPortStartScheduler+0xe0>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d32:	f7ff ff91 	bl	8008c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d36:	f7fe fe91 	bl	8007a5c <vTaskSwitchContext>
	prvTaskExitError();
 8008d3a:	f7ff ff4d 	bl	8008bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	e000e400 	.word	0xe000e400
 8008d4c:	200021cc 	.word	0x200021cc
 8008d50:	200021d0 	.word	0x200021d0
 8008d54:	e000ed20 	.word	0xe000ed20
 8008d58:	2000000c 	.word	0x2000000c

08008d5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	607b      	str	r3, [r7, #4]
}
 8008d74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d76:	4b0f      	ldr	r3, [pc, #60]	@ (8008db4 <vPortEnterCritical+0x58>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8008db4 <vPortEnterCritical+0x58>)
 8008d7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d80:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <vPortEnterCritical+0x58>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d110      	bne.n	8008daa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d88:	4b0b      	ldr	r3, [pc, #44]	@ (8008db8 <vPortEnterCritical+0x5c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <vPortEnterCritical+0x4e>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	603b      	str	r3, [r7, #0]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <vPortEnterCritical+0x4a>
	}
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bc80      	pop	{r7}
 8008db2:	4770      	bx	lr
 8008db4:	2000000c 	.word	0x2000000c
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dc2:	4b12      	ldr	r3, [pc, #72]	@ (8008e0c <vPortExitCritical+0x50>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10b      	bne.n	8008de2 <vPortExitCritical+0x26>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	607b      	str	r3, [r7, #4]
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008de2:	4b0a      	ldr	r3, [pc, #40]	@ (8008e0c <vPortExitCritical+0x50>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	4a08      	ldr	r2, [pc, #32]	@ (8008e0c <vPortExitCritical+0x50>)
 8008dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dec:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <vPortExitCritical+0x50>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <vPortExitCritical+0x44>
 8008df4:	2300      	movs	r3, #0
 8008df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f383 8811 	msr	BASEPRI, r3
}
 8008dfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bc80      	pop	{r7}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	2000000c 	.word	0x2000000c

08008e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e10:	f3ef 8009 	mrs	r0, PSP
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	4b0d      	ldr	r3, [pc, #52]	@ (8008e50 <pxCurrentTCBConst>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e20:	6010      	str	r0, [r2, #0]
 8008e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008e26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e2a:	f380 8811 	msr	BASEPRI, r0
 8008e2e:	f7fe fe15 	bl	8007a5c <vTaskSwitchContext>
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f380 8811 	msr	BASEPRI, r0
 8008e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e3e:	6819      	ldr	r1, [r3, #0]
 8008e40:	6808      	ldr	r0, [r1, #0]
 8008e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e46:	f380 8809 	msr	PSP, r0
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	4770      	bx	lr

08008e50 <pxCurrentTCBConst>:
 8008e50:	20001ba0 	.word	0x20001ba0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e72:	f7fe fd39 	bl	80078e8 <xTaskIncrementTick>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e7c:	4b06      	ldr	r3, [pc, #24]	@ (8008e98 <xPortSysTickHandler+0x40>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f383 8811 	msr	BASEPRI, r3
}
 8008e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ecc <vPortSetupTimerInterrupt+0x30>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed0 <vPortSetupTimerInterrupt+0x34>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008eac:	4b09      	ldr	r3, [pc, #36]	@ (8008ed4 <vPortSetupTimerInterrupt+0x38>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a09      	ldr	r2, [pc, #36]	@ (8008ed8 <vPortSetupTimerInterrupt+0x3c>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	099b      	lsrs	r3, r3, #6
 8008eb8:	4a08      	ldr	r2, [pc, #32]	@ (8008edc <vPortSetupTimerInterrupt+0x40>)
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ebe:	4b03      	ldr	r3, [pc, #12]	@ (8008ecc <vPortSetupTimerInterrupt+0x30>)
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	e000e010 	.word	0xe000e010
 8008ed0:	e000e018 	.word	0xe000e018
 8008ed4:	20000000 	.word	0x20000000
 8008ed8:	10624dd3 	.word	0x10624dd3
 8008edc:	e000e014 	.word	0xe000e014

08008ee0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ee6:	f3ef 8305 	mrs	r3, IPSR
 8008eea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b0f      	cmp	r3, #15
 8008ef0:	d915      	bls.n	8008f1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ef2:	4a17      	ldr	r2, [pc, #92]	@ (8008f50 <vPortValidateInterruptPriority+0x70>)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008efc:	4b15      	ldr	r3, [pc, #84]	@ (8008f54 <vPortValidateInterruptPriority+0x74>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	7afa      	ldrb	r2, [r7, #11]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d20b      	bcs.n	8008f1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	607b      	str	r3, [r7, #4]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f58 <vPortValidateInterruptPriority+0x78>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f26:	4b0d      	ldr	r3, [pc, #52]	@ (8008f5c <vPortValidateInterruptPriority+0x7c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d90b      	bls.n	8008f46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	603b      	str	r3, [r7, #0]
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	e7fd      	b.n	8008f42 <vPortValidateInterruptPriority+0x62>
	}
 8008f46:	bf00      	nop
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bc80      	pop	{r7}
 8008f4e:	4770      	bx	lr
 8008f50:	e000e3f0 	.word	0xe000e3f0
 8008f54:	200021cc 	.word	0x200021cc
 8008f58:	e000ed0c 	.word	0xe000ed0c
 8008f5c:	200021d0 	.word	0x200021d0

08008f60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08a      	sub	sp, #40	@ 0x28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f6c:	f7fe fc02 	bl	8007774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f70:	4b5c      	ldr	r3, [pc, #368]	@ (80090e4 <pvPortMalloc+0x184>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f78:	f000 f924 	bl	80091c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80090e8 <pvPortMalloc+0x188>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4013      	ands	r3, r2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f040 8095 	bne.w	80090b4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d01e      	beq.n	8008fce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f90:	2208      	movs	r2, #8
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4413      	add	r3, r2
 8008f96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f003 0307 	and.w	r3, r3, #7
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d015      	beq.n	8008fce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f023 0307 	bic.w	r3, r3, #7
 8008fa8:	3308      	adds	r3, #8
 8008faa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <pvPortMalloc+0x6e>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	617b      	str	r3, [r7, #20]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d06f      	beq.n	80090b4 <pvPortMalloc+0x154>
 8008fd4:	4b45      	ldr	r3, [pc, #276]	@ (80090ec <pvPortMalloc+0x18c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d86a      	bhi.n	80090b4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fde:	4b44      	ldr	r3, [pc, #272]	@ (80090f0 <pvPortMalloc+0x190>)
 8008fe0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fe2:	4b43      	ldr	r3, [pc, #268]	@ (80090f0 <pvPortMalloc+0x190>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fe8:	e004      	b.n	8008ff4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d903      	bls.n	8009006 <pvPortMalloc+0xa6>
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1f1      	bne.n	8008fea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009006:	4b37      	ldr	r3, [pc, #220]	@ (80090e4 <pvPortMalloc+0x184>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800900c:	429a      	cmp	r2, r3
 800900e:	d051      	beq.n	80090b4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2208      	movs	r2, #8
 8009016:	4413      	add	r3, r2
 8009018:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	1ad2      	subs	r2, r2, r3
 800902a:	2308      	movs	r3, #8
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	429a      	cmp	r2, r3
 8009030:	d920      	bls.n	8009074 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4413      	add	r3, r2
 8009038:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f003 0307 	and.w	r3, r3, #7
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <pvPortMalloc+0xfc>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	613b      	str	r3, [r7, #16]
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	e7fd      	b.n	8009058 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	1ad2      	subs	r2, r2, r3
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800906e:	69b8      	ldr	r0, [r7, #24]
 8009070:	f000 f90a 	bl	8009288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009074:	4b1d      	ldr	r3, [pc, #116]	@ (80090ec <pvPortMalloc+0x18c>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	4a1b      	ldr	r2, [pc, #108]	@ (80090ec <pvPortMalloc+0x18c>)
 8009080:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009082:	4b1a      	ldr	r3, [pc, #104]	@ (80090ec <pvPortMalloc+0x18c>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b1b      	ldr	r3, [pc, #108]	@ (80090f4 <pvPortMalloc+0x194>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d203      	bcs.n	8009096 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800908e:	4b17      	ldr	r3, [pc, #92]	@ (80090ec <pvPortMalloc+0x18c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a18      	ldr	r2, [pc, #96]	@ (80090f4 <pvPortMalloc+0x194>)
 8009094:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	4b13      	ldr	r3, [pc, #76]	@ (80090e8 <pvPortMalloc+0x188>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	431a      	orrs	r2, r3
 80090a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a6:	2200      	movs	r2, #0
 80090a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090aa:	4b13      	ldr	r3, [pc, #76]	@ (80090f8 <pvPortMalloc+0x198>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3301      	adds	r3, #1
 80090b0:	4a11      	ldr	r2, [pc, #68]	@ (80090f8 <pvPortMalloc+0x198>)
 80090b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090b4:	f7fe fb6c 	bl	8007790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <pvPortMalloc+0x17a>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	60fb      	str	r3, [r7, #12]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <pvPortMalloc+0x176>
	return pvReturn;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3728      	adds	r7, #40	@ 0x28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20002ddc 	.word	0x20002ddc
 80090e8:	20002df0 	.word	0x20002df0
 80090ec:	20002de0 	.word	0x20002de0
 80090f0:	20002dd4 	.word	0x20002dd4
 80090f4:	20002de4 	.word	0x20002de4
 80090f8:	20002de8 	.word	0x20002de8

080090fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d04f      	beq.n	80091ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800910e:	2308      	movs	r3, #8
 8009110:	425b      	negs	r3, r3
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	4413      	add	r3, r2
 8009116:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	4b25      	ldr	r3, [pc, #148]	@ (80091b8 <vPortFree+0xbc>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4013      	ands	r3, r2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <vPortFree+0x46>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	60fb      	str	r3, [r7, #12]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00b      	beq.n	8009162 <vPortFree+0x66>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	60bb      	str	r3, [r7, #8]
}
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	e7fd      	b.n	800915e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	4b14      	ldr	r3, [pc, #80]	@ (80091b8 <vPortFree+0xbc>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4013      	ands	r3, r2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01e      	beq.n	80091ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d11a      	bne.n	80091ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	4b0e      	ldr	r3, [pc, #56]	@ (80091b8 <vPortFree+0xbc>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	43db      	mvns	r3, r3
 8009182:	401a      	ands	r2, r3
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009188:	f7fe faf4 	bl	8007774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	4b0a      	ldr	r3, [pc, #40]	@ (80091bc <vPortFree+0xc0>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4413      	add	r3, r2
 8009196:	4a09      	ldr	r2, [pc, #36]	@ (80091bc <vPortFree+0xc0>)
 8009198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800919a:	6938      	ldr	r0, [r7, #16]
 800919c:	f000 f874 	bl	8009288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091a0:	4b07      	ldr	r3, [pc, #28]	@ (80091c0 <vPortFree+0xc4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	4a06      	ldr	r2, [pc, #24]	@ (80091c0 <vPortFree+0xc4>)
 80091a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091aa:	f7fe faf1 	bl	8007790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091ae:	bf00      	nop
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20002df0 	.word	0x20002df0
 80091bc:	20002de0 	.word	0x20002de0
 80091c0:	20002dec 	.word	0x20002dec

080091c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80091ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091d0:	4b27      	ldr	r3, [pc, #156]	@ (8009270 <prvHeapInit+0xac>)
 80091d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00c      	beq.n	80091f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3307      	adds	r3, #7
 80091e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0307 	bic.w	r3, r3, #7
 80091ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009270 <prvHeapInit+0xac>)
 80091f4:	4413      	add	r3, r2
 80091f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009274 <prvHeapInit+0xb0>)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009202:	4b1c      	ldr	r3, [pc, #112]	@ (8009274 <prvHeapInit+0xb0>)
 8009204:	2200      	movs	r2, #0
 8009206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	4413      	add	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009210:	2208      	movs	r2, #8
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	1a9b      	subs	r3, r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0307 	bic.w	r3, r3, #7
 800921e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4a15      	ldr	r2, [pc, #84]	@ (8009278 <prvHeapInit+0xb4>)
 8009224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009226:	4b14      	ldr	r3, [pc, #80]	@ (8009278 <prvHeapInit+0xb4>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2200      	movs	r2, #0
 800922c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800922e:	4b12      	ldr	r3, [pc, #72]	@ (8009278 <prvHeapInit+0xb4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	1ad2      	subs	r2, r2, r3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009244:	4b0c      	ldr	r3, [pc, #48]	@ (8009278 <prvHeapInit+0xb4>)
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	4a0a      	ldr	r2, [pc, #40]	@ (800927c <prvHeapInit+0xb8>)
 8009252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	4a09      	ldr	r2, [pc, #36]	@ (8009280 <prvHeapInit+0xbc>)
 800925a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800925c:	4b09      	ldr	r3, [pc, #36]	@ (8009284 <prvHeapInit+0xc0>)
 800925e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009262:	601a      	str	r2, [r3, #0]
}
 8009264:	bf00      	nop
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	bc80      	pop	{r7}
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	200021d4 	.word	0x200021d4
 8009274:	20002dd4 	.word	0x20002dd4
 8009278:	20002ddc 	.word	0x20002ddc
 800927c:	20002de4 	.word	0x20002de4
 8009280:	20002de0 	.word	0x20002de0
 8009284:	20002df0 	.word	0x20002df0

08009288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009290:	4b27      	ldr	r3, [pc, #156]	@ (8009330 <prvInsertBlockIntoFreeList+0xa8>)
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	e002      	b.n	800929c <prvInsertBlockIntoFreeList+0x14>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d8f7      	bhi.n	8009296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	4413      	add	r3, r2
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d108      	bne.n	80092ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	441a      	add	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	441a      	add	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d118      	bne.n	8009310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	4b14      	ldr	r3, [pc, #80]	@ (8009334 <prvInsertBlockIntoFreeList+0xac>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d00d      	beq.n	8009306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	441a      	add	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	e008      	b.n	8009318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009306:	4b0b      	ldr	r3, [pc, #44]	@ (8009334 <prvInsertBlockIntoFreeList+0xac>)
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	e003      	b.n	8009318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d002      	beq.n	8009326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009326:	bf00      	nop
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr
 8009330:	20002dd4 	.word	0x20002dd4
 8009334:	20002ddc 	.word	0x20002ddc

08009338 <_vsniprintf_r>:
 8009338:	b530      	push	{r4, r5, lr}
 800933a:	4614      	mov	r4, r2
 800933c:	2c00      	cmp	r4, #0
 800933e:	4605      	mov	r5, r0
 8009340:	461a      	mov	r2, r3
 8009342:	b09b      	sub	sp, #108	@ 0x6c
 8009344:	da05      	bge.n	8009352 <_vsniprintf_r+0x1a>
 8009346:	238b      	movs	r3, #139	@ 0x8b
 8009348:	6003      	str	r3, [r0, #0]
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	b01b      	add	sp, #108	@ 0x6c
 8009350:	bd30      	pop	{r4, r5, pc}
 8009352:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009356:	f8ad 300c 	strh.w	r3, [sp, #12]
 800935a:	f04f 0300 	mov.w	r3, #0
 800935e:	9319      	str	r3, [sp, #100]	@ 0x64
 8009360:	bf0c      	ite	eq
 8009362:	4623      	moveq	r3, r4
 8009364:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009368:	9302      	str	r3, [sp, #8]
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009370:	9100      	str	r1, [sp, #0]
 8009372:	9104      	str	r1, [sp, #16]
 8009374:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009378:	4669      	mov	r1, sp
 800937a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800937c:	f000 f9bc 	bl	80096f8 <_svfiprintf_r>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	bfbc      	itt	lt
 8009384:	238b      	movlt	r3, #139	@ 0x8b
 8009386:	602b      	strlt	r3, [r5, #0]
 8009388:	2c00      	cmp	r4, #0
 800938a:	d0e0      	beq.n	800934e <_vsniprintf_r+0x16>
 800938c:	2200      	movs	r2, #0
 800938e:	9b00      	ldr	r3, [sp, #0]
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	e7dc      	b.n	800934e <_vsniprintf_r+0x16>

08009394 <vsniprintf>:
 8009394:	b507      	push	{r0, r1, r2, lr}
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	4613      	mov	r3, r2
 800939a:	460a      	mov	r2, r1
 800939c:	4601      	mov	r1, r0
 800939e:	4803      	ldr	r0, [pc, #12]	@ (80093ac <vsniprintf+0x18>)
 80093a0:	6800      	ldr	r0, [r0, #0]
 80093a2:	f7ff ffc9 	bl	8009338 <_vsniprintf_r>
 80093a6:	b003      	add	sp, #12
 80093a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80093ac:	20000010 	.word	0x20000010

080093b0 <memcmp>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	3901      	subs	r1, #1
 80093b4:	4402      	add	r2, r0
 80093b6:	4290      	cmp	r0, r2
 80093b8:	d101      	bne.n	80093be <memcmp+0xe>
 80093ba:	2000      	movs	r0, #0
 80093bc:	e005      	b.n	80093ca <memcmp+0x1a>
 80093be:	7803      	ldrb	r3, [r0, #0]
 80093c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	d001      	beq.n	80093cc <memcmp+0x1c>
 80093c8:	1b18      	subs	r0, r3, r4
 80093ca:	bd10      	pop	{r4, pc}
 80093cc:	3001      	adds	r0, #1
 80093ce:	e7f2      	b.n	80093b6 <memcmp+0x6>

080093d0 <memset>:
 80093d0:	4603      	mov	r3, r0
 80093d2:	4402      	add	r2, r0
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d100      	bne.n	80093da <memset+0xa>
 80093d8:	4770      	bx	lr
 80093da:	f803 1b01 	strb.w	r1, [r3], #1
 80093de:	e7f9      	b.n	80093d4 <memset+0x4>

080093e0 <__errno>:
 80093e0:	4b01      	ldr	r3, [pc, #4]	@ (80093e8 <__errno+0x8>)
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	20000010 	.word	0x20000010

080093ec <__libc_init_array>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	2600      	movs	r6, #0
 80093f0:	4d0c      	ldr	r5, [pc, #48]	@ (8009424 <__libc_init_array+0x38>)
 80093f2:	4c0d      	ldr	r4, [pc, #52]	@ (8009428 <__libc_init_array+0x3c>)
 80093f4:	1b64      	subs	r4, r4, r5
 80093f6:	10a4      	asrs	r4, r4, #2
 80093f8:	42a6      	cmp	r6, r4
 80093fa:	d109      	bne.n	8009410 <__libc_init_array+0x24>
 80093fc:	f000 fc76 	bl	8009cec <_init>
 8009400:	2600      	movs	r6, #0
 8009402:	4d0a      	ldr	r5, [pc, #40]	@ (800942c <__libc_init_array+0x40>)
 8009404:	4c0a      	ldr	r4, [pc, #40]	@ (8009430 <__libc_init_array+0x44>)
 8009406:	1b64      	subs	r4, r4, r5
 8009408:	10a4      	asrs	r4, r4, #2
 800940a:	42a6      	cmp	r6, r4
 800940c:	d105      	bne.n	800941a <__libc_init_array+0x2e>
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	f855 3b04 	ldr.w	r3, [r5], #4
 8009414:	4798      	blx	r3
 8009416:	3601      	adds	r6, #1
 8009418:	e7ee      	b.n	80093f8 <__libc_init_array+0xc>
 800941a:	f855 3b04 	ldr.w	r3, [r5], #4
 800941e:	4798      	blx	r3
 8009420:	3601      	adds	r6, #1
 8009422:	e7f2      	b.n	800940a <__libc_init_array+0x1e>
 8009424:	0800a2c4 	.word	0x0800a2c4
 8009428:	0800a2c4 	.word	0x0800a2c4
 800942c:	0800a2c4 	.word	0x0800a2c4
 8009430:	0800a2c8 	.word	0x0800a2c8

08009434 <__retarget_lock_acquire_recursive>:
 8009434:	4770      	bx	lr

08009436 <__retarget_lock_release_recursive>:
 8009436:	4770      	bx	lr

08009438 <memcpy>:
 8009438:	440a      	add	r2, r1
 800943a:	4291      	cmp	r1, r2
 800943c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009440:	d100      	bne.n	8009444 <memcpy+0xc>
 8009442:	4770      	bx	lr
 8009444:	b510      	push	{r4, lr}
 8009446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800944a:	4291      	cmp	r1, r2
 800944c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009450:	d1f9      	bne.n	8009446 <memcpy+0xe>
 8009452:	bd10      	pop	{r4, pc}

08009454 <_free_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4605      	mov	r5, r0
 8009458:	2900      	cmp	r1, #0
 800945a:	d040      	beq.n	80094de <_free_r+0x8a>
 800945c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009460:	1f0c      	subs	r4, r1, #4
 8009462:	2b00      	cmp	r3, #0
 8009464:	bfb8      	it	lt
 8009466:	18e4      	addlt	r4, r4, r3
 8009468:	f000 f8de 	bl	8009628 <__malloc_lock>
 800946c:	4a1c      	ldr	r2, [pc, #112]	@ (80094e0 <_free_r+0x8c>)
 800946e:	6813      	ldr	r3, [r2, #0]
 8009470:	b933      	cbnz	r3, 8009480 <_free_r+0x2c>
 8009472:	6063      	str	r3, [r4, #4]
 8009474:	6014      	str	r4, [r2, #0]
 8009476:	4628      	mov	r0, r5
 8009478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800947c:	f000 b8da 	b.w	8009634 <__malloc_unlock>
 8009480:	42a3      	cmp	r3, r4
 8009482:	d908      	bls.n	8009496 <_free_r+0x42>
 8009484:	6820      	ldr	r0, [r4, #0]
 8009486:	1821      	adds	r1, r4, r0
 8009488:	428b      	cmp	r3, r1
 800948a:	bf01      	itttt	eq
 800948c:	6819      	ldreq	r1, [r3, #0]
 800948e:	685b      	ldreq	r3, [r3, #4]
 8009490:	1809      	addeq	r1, r1, r0
 8009492:	6021      	streq	r1, [r4, #0]
 8009494:	e7ed      	b.n	8009472 <_free_r+0x1e>
 8009496:	461a      	mov	r2, r3
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	b10b      	cbz	r3, 80094a0 <_free_r+0x4c>
 800949c:	42a3      	cmp	r3, r4
 800949e:	d9fa      	bls.n	8009496 <_free_r+0x42>
 80094a0:	6811      	ldr	r1, [r2, #0]
 80094a2:	1850      	adds	r0, r2, r1
 80094a4:	42a0      	cmp	r0, r4
 80094a6:	d10b      	bne.n	80094c0 <_free_r+0x6c>
 80094a8:	6820      	ldr	r0, [r4, #0]
 80094aa:	4401      	add	r1, r0
 80094ac:	1850      	adds	r0, r2, r1
 80094ae:	4283      	cmp	r3, r0
 80094b0:	6011      	str	r1, [r2, #0]
 80094b2:	d1e0      	bne.n	8009476 <_free_r+0x22>
 80094b4:	6818      	ldr	r0, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	4408      	add	r0, r1
 80094ba:	6010      	str	r0, [r2, #0]
 80094bc:	6053      	str	r3, [r2, #4]
 80094be:	e7da      	b.n	8009476 <_free_r+0x22>
 80094c0:	d902      	bls.n	80094c8 <_free_r+0x74>
 80094c2:	230c      	movs	r3, #12
 80094c4:	602b      	str	r3, [r5, #0]
 80094c6:	e7d6      	b.n	8009476 <_free_r+0x22>
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	1821      	adds	r1, r4, r0
 80094cc:	428b      	cmp	r3, r1
 80094ce:	bf01      	itttt	eq
 80094d0:	6819      	ldreq	r1, [r3, #0]
 80094d2:	685b      	ldreq	r3, [r3, #4]
 80094d4:	1809      	addeq	r1, r1, r0
 80094d6:	6021      	streq	r1, [r4, #0]
 80094d8:	6063      	str	r3, [r4, #4]
 80094da:	6054      	str	r4, [r2, #4]
 80094dc:	e7cb      	b.n	8009476 <_free_r+0x22>
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	20002f38 	.word	0x20002f38

080094e4 <sbrk_aligned>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009524 <sbrk_aligned+0x40>)
 80094e8:	460c      	mov	r4, r1
 80094ea:	6831      	ldr	r1, [r6, #0]
 80094ec:	4605      	mov	r5, r0
 80094ee:	b911      	cbnz	r1, 80094f6 <sbrk_aligned+0x12>
 80094f0:	f000 fba8 	bl	8009c44 <_sbrk_r>
 80094f4:	6030      	str	r0, [r6, #0]
 80094f6:	4621      	mov	r1, r4
 80094f8:	4628      	mov	r0, r5
 80094fa:	f000 fba3 	bl	8009c44 <_sbrk_r>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d103      	bne.n	800950a <sbrk_aligned+0x26>
 8009502:	f04f 34ff 	mov.w	r4, #4294967295
 8009506:	4620      	mov	r0, r4
 8009508:	bd70      	pop	{r4, r5, r6, pc}
 800950a:	1cc4      	adds	r4, r0, #3
 800950c:	f024 0403 	bic.w	r4, r4, #3
 8009510:	42a0      	cmp	r0, r4
 8009512:	d0f8      	beq.n	8009506 <sbrk_aligned+0x22>
 8009514:	1a21      	subs	r1, r4, r0
 8009516:	4628      	mov	r0, r5
 8009518:	f000 fb94 	bl	8009c44 <_sbrk_r>
 800951c:	3001      	adds	r0, #1
 800951e:	d1f2      	bne.n	8009506 <sbrk_aligned+0x22>
 8009520:	e7ef      	b.n	8009502 <sbrk_aligned+0x1e>
 8009522:	bf00      	nop
 8009524:	20002f34 	.word	0x20002f34

08009528 <_malloc_r>:
 8009528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800952c:	1ccd      	adds	r5, r1, #3
 800952e:	f025 0503 	bic.w	r5, r5, #3
 8009532:	3508      	adds	r5, #8
 8009534:	2d0c      	cmp	r5, #12
 8009536:	bf38      	it	cc
 8009538:	250c      	movcc	r5, #12
 800953a:	2d00      	cmp	r5, #0
 800953c:	4606      	mov	r6, r0
 800953e:	db01      	blt.n	8009544 <_malloc_r+0x1c>
 8009540:	42a9      	cmp	r1, r5
 8009542:	d904      	bls.n	800954e <_malloc_r+0x26>
 8009544:	230c      	movs	r3, #12
 8009546:	6033      	str	r3, [r6, #0]
 8009548:	2000      	movs	r0, #0
 800954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009624 <_malloc_r+0xfc>
 8009552:	f000 f869 	bl	8009628 <__malloc_lock>
 8009556:	f8d8 3000 	ldr.w	r3, [r8]
 800955a:	461c      	mov	r4, r3
 800955c:	bb44      	cbnz	r4, 80095b0 <_malloc_r+0x88>
 800955e:	4629      	mov	r1, r5
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff ffbf 	bl	80094e4 <sbrk_aligned>
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	4604      	mov	r4, r0
 800956a:	d158      	bne.n	800961e <_malloc_r+0xf6>
 800956c:	f8d8 4000 	ldr.w	r4, [r8]
 8009570:	4627      	mov	r7, r4
 8009572:	2f00      	cmp	r7, #0
 8009574:	d143      	bne.n	80095fe <_malloc_r+0xd6>
 8009576:	2c00      	cmp	r4, #0
 8009578:	d04b      	beq.n	8009612 <_malloc_r+0xea>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	4639      	mov	r1, r7
 800957e:	4630      	mov	r0, r6
 8009580:	eb04 0903 	add.w	r9, r4, r3
 8009584:	f000 fb5e 	bl	8009c44 <_sbrk_r>
 8009588:	4581      	cmp	r9, r0
 800958a:	d142      	bne.n	8009612 <_malloc_r+0xea>
 800958c:	6821      	ldr	r1, [r4, #0]
 800958e:	4630      	mov	r0, r6
 8009590:	1a6d      	subs	r5, r5, r1
 8009592:	4629      	mov	r1, r5
 8009594:	f7ff ffa6 	bl	80094e4 <sbrk_aligned>
 8009598:	3001      	adds	r0, #1
 800959a:	d03a      	beq.n	8009612 <_malloc_r+0xea>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	442b      	add	r3, r5
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	f8d8 3000 	ldr.w	r3, [r8]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	bb62      	cbnz	r2, 8009604 <_malloc_r+0xdc>
 80095aa:	f8c8 7000 	str.w	r7, [r8]
 80095ae:	e00f      	b.n	80095d0 <_malloc_r+0xa8>
 80095b0:	6822      	ldr	r2, [r4, #0]
 80095b2:	1b52      	subs	r2, r2, r5
 80095b4:	d420      	bmi.n	80095f8 <_malloc_r+0xd0>
 80095b6:	2a0b      	cmp	r2, #11
 80095b8:	d917      	bls.n	80095ea <_malloc_r+0xc2>
 80095ba:	1961      	adds	r1, r4, r5
 80095bc:	42a3      	cmp	r3, r4
 80095be:	6025      	str	r5, [r4, #0]
 80095c0:	bf18      	it	ne
 80095c2:	6059      	strne	r1, [r3, #4]
 80095c4:	6863      	ldr	r3, [r4, #4]
 80095c6:	bf08      	it	eq
 80095c8:	f8c8 1000 	streq.w	r1, [r8]
 80095cc:	5162      	str	r2, [r4, r5]
 80095ce:	604b      	str	r3, [r1, #4]
 80095d0:	4630      	mov	r0, r6
 80095d2:	f000 f82f 	bl	8009634 <__malloc_unlock>
 80095d6:	f104 000b 	add.w	r0, r4, #11
 80095da:	1d23      	adds	r3, r4, #4
 80095dc:	f020 0007 	bic.w	r0, r0, #7
 80095e0:	1ac2      	subs	r2, r0, r3
 80095e2:	bf1c      	itt	ne
 80095e4:	1a1b      	subne	r3, r3, r0
 80095e6:	50a3      	strne	r3, [r4, r2]
 80095e8:	e7af      	b.n	800954a <_malloc_r+0x22>
 80095ea:	6862      	ldr	r2, [r4, #4]
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	bf0c      	ite	eq
 80095f0:	f8c8 2000 	streq.w	r2, [r8]
 80095f4:	605a      	strne	r2, [r3, #4]
 80095f6:	e7eb      	b.n	80095d0 <_malloc_r+0xa8>
 80095f8:	4623      	mov	r3, r4
 80095fa:	6864      	ldr	r4, [r4, #4]
 80095fc:	e7ae      	b.n	800955c <_malloc_r+0x34>
 80095fe:	463c      	mov	r4, r7
 8009600:	687f      	ldr	r7, [r7, #4]
 8009602:	e7b6      	b.n	8009572 <_malloc_r+0x4a>
 8009604:	461a      	mov	r2, r3
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	42a3      	cmp	r3, r4
 800960a:	d1fb      	bne.n	8009604 <_malloc_r+0xdc>
 800960c:	2300      	movs	r3, #0
 800960e:	6053      	str	r3, [r2, #4]
 8009610:	e7de      	b.n	80095d0 <_malloc_r+0xa8>
 8009612:	230c      	movs	r3, #12
 8009614:	4630      	mov	r0, r6
 8009616:	6033      	str	r3, [r6, #0]
 8009618:	f000 f80c 	bl	8009634 <__malloc_unlock>
 800961c:	e794      	b.n	8009548 <_malloc_r+0x20>
 800961e:	6005      	str	r5, [r0, #0]
 8009620:	e7d6      	b.n	80095d0 <_malloc_r+0xa8>
 8009622:	bf00      	nop
 8009624:	20002f38 	.word	0x20002f38

08009628 <__malloc_lock>:
 8009628:	4801      	ldr	r0, [pc, #4]	@ (8009630 <__malloc_lock+0x8>)
 800962a:	f7ff bf03 	b.w	8009434 <__retarget_lock_acquire_recursive>
 800962e:	bf00      	nop
 8009630:	20002f30 	.word	0x20002f30

08009634 <__malloc_unlock>:
 8009634:	4801      	ldr	r0, [pc, #4]	@ (800963c <__malloc_unlock+0x8>)
 8009636:	f7ff befe 	b.w	8009436 <__retarget_lock_release_recursive>
 800963a:	bf00      	nop
 800963c:	20002f30 	.word	0x20002f30

08009640 <__ssputs_r>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	461f      	mov	r7, r3
 8009646:	688e      	ldr	r6, [r1, #8]
 8009648:	4682      	mov	sl, r0
 800964a:	42be      	cmp	r6, r7
 800964c:	460c      	mov	r4, r1
 800964e:	4690      	mov	r8, r2
 8009650:	680b      	ldr	r3, [r1, #0]
 8009652:	d82d      	bhi.n	80096b0 <__ssputs_r+0x70>
 8009654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009658:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800965c:	d026      	beq.n	80096ac <__ssputs_r+0x6c>
 800965e:	6965      	ldr	r5, [r4, #20]
 8009660:	6909      	ldr	r1, [r1, #16]
 8009662:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009666:	eba3 0901 	sub.w	r9, r3, r1
 800966a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800966e:	1c7b      	adds	r3, r7, #1
 8009670:	444b      	add	r3, r9
 8009672:	106d      	asrs	r5, r5, #1
 8009674:	429d      	cmp	r5, r3
 8009676:	bf38      	it	cc
 8009678:	461d      	movcc	r5, r3
 800967a:	0553      	lsls	r3, r2, #21
 800967c:	d527      	bpl.n	80096ce <__ssputs_r+0x8e>
 800967e:	4629      	mov	r1, r5
 8009680:	f7ff ff52 	bl	8009528 <_malloc_r>
 8009684:	4606      	mov	r6, r0
 8009686:	b360      	cbz	r0, 80096e2 <__ssputs_r+0xa2>
 8009688:	464a      	mov	r2, r9
 800968a:	6921      	ldr	r1, [r4, #16]
 800968c:	f7ff fed4 	bl	8009438 <memcpy>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	6126      	str	r6, [r4, #16]
 800969e:	444e      	add	r6, r9
 80096a0:	6026      	str	r6, [r4, #0]
 80096a2:	463e      	mov	r6, r7
 80096a4:	6165      	str	r5, [r4, #20]
 80096a6:	eba5 0509 	sub.w	r5, r5, r9
 80096aa:	60a5      	str	r5, [r4, #8]
 80096ac:	42be      	cmp	r6, r7
 80096ae:	d900      	bls.n	80096b2 <__ssputs_r+0x72>
 80096b0:	463e      	mov	r6, r7
 80096b2:	4632      	mov	r2, r6
 80096b4:	4641      	mov	r1, r8
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	f000 faaa 	bl	8009c10 <memmove>
 80096bc:	2000      	movs	r0, #0
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	1b9b      	subs	r3, r3, r6
 80096c2:	60a3      	str	r3, [r4, #8]
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	4433      	add	r3, r6
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ce:	462a      	mov	r2, r5
 80096d0:	f000 fad6 	bl	8009c80 <_realloc_r>
 80096d4:	4606      	mov	r6, r0
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d1e0      	bne.n	800969c <__ssputs_r+0x5c>
 80096da:	4650      	mov	r0, sl
 80096dc:	6921      	ldr	r1, [r4, #16]
 80096de:	f7ff feb9 	bl	8009454 <_free_r>
 80096e2:	230c      	movs	r3, #12
 80096e4:	f8ca 3000 	str.w	r3, [sl]
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	f04f 30ff 	mov.w	r0, #4294967295
 80096ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096f2:	81a3      	strh	r3, [r4, #12]
 80096f4:	e7e9      	b.n	80096ca <__ssputs_r+0x8a>
	...

080096f8 <_svfiprintf_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	4698      	mov	r8, r3
 80096fe:	898b      	ldrh	r3, [r1, #12]
 8009700:	4607      	mov	r7, r0
 8009702:	061b      	lsls	r3, r3, #24
 8009704:	460d      	mov	r5, r1
 8009706:	4614      	mov	r4, r2
 8009708:	b09d      	sub	sp, #116	@ 0x74
 800970a:	d510      	bpl.n	800972e <_svfiprintf_r+0x36>
 800970c:	690b      	ldr	r3, [r1, #16]
 800970e:	b973      	cbnz	r3, 800972e <_svfiprintf_r+0x36>
 8009710:	2140      	movs	r1, #64	@ 0x40
 8009712:	f7ff ff09 	bl	8009528 <_malloc_r>
 8009716:	6028      	str	r0, [r5, #0]
 8009718:	6128      	str	r0, [r5, #16]
 800971a:	b930      	cbnz	r0, 800972a <_svfiprintf_r+0x32>
 800971c:	230c      	movs	r3, #12
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	b01d      	add	sp, #116	@ 0x74
 8009726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972a:	2340      	movs	r3, #64	@ 0x40
 800972c:	616b      	str	r3, [r5, #20]
 800972e:	2300      	movs	r3, #0
 8009730:	9309      	str	r3, [sp, #36]	@ 0x24
 8009732:	2320      	movs	r3, #32
 8009734:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009738:	2330      	movs	r3, #48	@ 0x30
 800973a:	f04f 0901 	mov.w	r9, #1
 800973e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009742:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80098dc <_svfiprintf_r+0x1e4>
 8009746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800974a:	4623      	mov	r3, r4
 800974c:	469a      	mov	sl, r3
 800974e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009752:	b10a      	cbz	r2, 8009758 <_svfiprintf_r+0x60>
 8009754:	2a25      	cmp	r2, #37	@ 0x25
 8009756:	d1f9      	bne.n	800974c <_svfiprintf_r+0x54>
 8009758:	ebba 0b04 	subs.w	fp, sl, r4
 800975c:	d00b      	beq.n	8009776 <_svfiprintf_r+0x7e>
 800975e:	465b      	mov	r3, fp
 8009760:	4622      	mov	r2, r4
 8009762:	4629      	mov	r1, r5
 8009764:	4638      	mov	r0, r7
 8009766:	f7ff ff6b 	bl	8009640 <__ssputs_r>
 800976a:	3001      	adds	r0, #1
 800976c:	f000 80a7 	beq.w	80098be <_svfiprintf_r+0x1c6>
 8009770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009772:	445a      	add	r2, fp
 8009774:	9209      	str	r2, [sp, #36]	@ 0x24
 8009776:	f89a 3000 	ldrb.w	r3, [sl]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 809f 	beq.w	80098be <_svfiprintf_r+0x1c6>
 8009780:	2300      	movs	r3, #0
 8009782:	f04f 32ff 	mov.w	r2, #4294967295
 8009786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800978a:	f10a 0a01 	add.w	sl, sl, #1
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	9307      	str	r3, [sp, #28]
 8009792:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009796:	931a      	str	r3, [sp, #104]	@ 0x68
 8009798:	4654      	mov	r4, sl
 800979a:	2205      	movs	r2, #5
 800979c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a0:	484e      	ldr	r0, [pc, #312]	@ (80098dc <_svfiprintf_r+0x1e4>)
 80097a2:	f000 fa5f 	bl	8009c64 <memchr>
 80097a6:	9a04      	ldr	r2, [sp, #16]
 80097a8:	b9d8      	cbnz	r0, 80097e2 <_svfiprintf_r+0xea>
 80097aa:	06d0      	lsls	r0, r2, #27
 80097ac:	bf44      	itt	mi
 80097ae:	2320      	movmi	r3, #32
 80097b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097b4:	0711      	lsls	r1, r2, #28
 80097b6:	bf44      	itt	mi
 80097b8:	232b      	movmi	r3, #43	@ 0x2b
 80097ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097be:	f89a 3000 	ldrb.w	r3, [sl]
 80097c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c4:	d015      	beq.n	80097f2 <_svfiprintf_r+0xfa>
 80097c6:	4654      	mov	r4, sl
 80097c8:	2000      	movs	r0, #0
 80097ca:	f04f 0c0a 	mov.w	ip, #10
 80097ce:	9a07      	ldr	r2, [sp, #28]
 80097d0:	4621      	mov	r1, r4
 80097d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d6:	3b30      	subs	r3, #48	@ 0x30
 80097d8:	2b09      	cmp	r3, #9
 80097da:	d94b      	bls.n	8009874 <_svfiprintf_r+0x17c>
 80097dc:	b1b0      	cbz	r0, 800980c <_svfiprintf_r+0x114>
 80097de:	9207      	str	r2, [sp, #28]
 80097e0:	e014      	b.n	800980c <_svfiprintf_r+0x114>
 80097e2:	eba0 0308 	sub.w	r3, r0, r8
 80097e6:	fa09 f303 	lsl.w	r3, r9, r3
 80097ea:	4313      	orrs	r3, r2
 80097ec:	46a2      	mov	sl, r4
 80097ee:	9304      	str	r3, [sp, #16]
 80097f0:	e7d2      	b.n	8009798 <_svfiprintf_r+0xa0>
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	1d19      	adds	r1, r3, #4
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	9103      	str	r1, [sp, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	bfbb      	ittet	lt
 80097fe:	425b      	neglt	r3, r3
 8009800:	f042 0202 	orrlt.w	r2, r2, #2
 8009804:	9307      	strge	r3, [sp, #28]
 8009806:	9307      	strlt	r3, [sp, #28]
 8009808:	bfb8      	it	lt
 800980a:	9204      	strlt	r2, [sp, #16]
 800980c:	7823      	ldrb	r3, [r4, #0]
 800980e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009810:	d10a      	bne.n	8009828 <_svfiprintf_r+0x130>
 8009812:	7863      	ldrb	r3, [r4, #1]
 8009814:	2b2a      	cmp	r3, #42	@ 0x2a
 8009816:	d132      	bne.n	800987e <_svfiprintf_r+0x186>
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	3402      	adds	r4, #2
 800981c:	1d1a      	adds	r2, r3, #4
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	9203      	str	r2, [sp, #12]
 8009822:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80098e0 <_svfiprintf_r+0x1e8>
 800982c:	2203      	movs	r2, #3
 800982e:	4650      	mov	r0, sl
 8009830:	7821      	ldrb	r1, [r4, #0]
 8009832:	f000 fa17 	bl	8009c64 <memchr>
 8009836:	b138      	cbz	r0, 8009848 <_svfiprintf_r+0x150>
 8009838:	2240      	movs	r2, #64	@ 0x40
 800983a:	9b04      	ldr	r3, [sp, #16]
 800983c:	eba0 000a 	sub.w	r0, r0, sl
 8009840:	4082      	lsls	r2, r0
 8009842:	4313      	orrs	r3, r2
 8009844:	3401      	adds	r4, #1
 8009846:	9304      	str	r3, [sp, #16]
 8009848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984c:	2206      	movs	r2, #6
 800984e:	4825      	ldr	r0, [pc, #148]	@ (80098e4 <_svfiprintf_r+0x1ec>)
 8009850:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009854:	f000 fa06 	bl	8009c64 <memchr>
 8009858:	2800      	cmp	r0, #0
 800985a:	d036      	beq.n	80098ca <_svfiprintf_r+0x1d2>
 800985c:	4b22      	ldr	r3, [pc, #136]	@ (80098e8 <_svfiprintf_r+0x1f0>)
 800985e:	bb1b      	cbnz	r3, 80098a8 <_svfiprintf_r+0x1b0>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	3307      	adds	r3, #7
 8009864:	f023 0307 	bic.w	r3, r3, #7
 8009868:	3308      	adds	r3, #8
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986e:	4433      	add	r3, r6
 8009870:	9309      	str	r3, [sp, #36]	@ 0x24
 8009872:	e76a      	b.n	800974a <_svfiprintf_r+0x52>
 8009874:	460c      	mov	r4, r1
 8009876:	2001      	movs	r0, #1
 8009878:	fb0c 3202 	mla	r2, ip, r2, r3
 800987c:	e7a8      	b.n	80097d0 <_svfiprintf_r+0xd8>
 800987e:	2300      	movs	r3, #0
 8009880:	f04f 0c0a 	mov.w	ip, #10
 8009884:	4619      	mov	r1, r3
 8009886:	3401      	adds	r4, #1
 8009888:	9305      	str	r3, [sp, #20]
 800988a:	4620      	mov	r0, r4
 800988c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009890:	3a30      	subs	r2, #48	@ 0x30
 8009892:	2a09      	cmp	r2, #9
 8009894:	d903      	bls.n	800989e <_svfiprintf_r+0x1a6>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0c6      	beq.n	8009828 <_svfiprintf_r+0x130>
 800989a:	9105      	str	r1, [sp, #20]
 800989c:	e7c4      	b.n	8009828 <_svfiprintf_r+0x130>
 800989e:	4604      	mov	r4, r0
 80098a0:	2301      	movs	r3, #1
 80098a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a6:	e7f0      	b.n	800988a <_svfiprintf_r+0x192>
 80098a8:	ab03      	add	r3, sp, #12
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	462a      	mov	r2, r5
 80098ae:	4638      	mov	r0, r7
 80098b0:	4b0e      	ldr	r3, [pc, #56]	@ (80098ec <_svfiprintf_r+0x1f4>)
 80098b2:	a904      	add	r1, sp, #16
 80098b4:	f3af 8000 	nop.w
 80098b8:	1c42      	adds	r2, r0, #1
 80098ba:	4606      	mov	r6, r0
 80098bc:	d1d6      	bne.n	800986c <_svfiprintf_r+0x174>
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	065b      	lsls	r3, r3, #25
 80098c2:	f53f af2d 	bmi.w	8009720 <_svfiprintf_r+0x28>
 80098c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098c8:	e72c      	b.n	8009724 <_svfiprintf_r+0x2c>
 80098ca:	ab03      	add	r3, sp, #12
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	462a      	mov	r2, r5
 80098d0:	4638      	mov	r0, r7
 80098d2:	4b06      	ldr	r3, [pc, #24]	@ (80098ec <_svfiprintf_r+0x1f4>)
 80098d4:	a904      	add	r1, sp, #16
 80098d6:	f000 f87d 	bl	80099d4 <_printf_i>
 80098da:	e7ed      	b.n	80098b8 <_svfiprintf_r+0x1c0>
 80098dc:	0800a286 	.word	0x0800a286
 80098e0:	0800a28c 	.word	0x0800a28c
 80098e4:	0800a290 	.word	0x0800a290
 80098e8:	00000000 	.word	0x00000000
 80098ec:	08009641 	.word	0x08009641

080098f0 <_printf_common>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	4616      	mov	r6, r2
 80098f6:	4698      	mov	r8, r3
 80098f8:	688a      	ldr	r2, [r1, #8]
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	4607      	mov	r7, r0
 80098fe:	4293      	cmp	r3, r2
 8009900:	bfb8      	it	lt
 8009902:	4613      	movlt	r3, r2
 8009904:	6033      	str	r3, [r6, #0]
 8009906:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800990a:	460c      	mov	r4, r1
 800990c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009910:	b10a      	cbz	r2, 8009916 <_printf_common+0x26>
 8009912:	3301      	adds	r3, #1
 8009914:	6033      	str	r3, [r6, #0]
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	0699      	lsls	r1, r3, #26
 800991a:	bf42      	ittt	mi
 800991c:	6833      	ldrmi	r3, [r6, #0]
 800991e:	3302      	addmi	r3, #2
 8009920:	6033      	strmi	r3, [r6, #0]
 8009922:	6825      	ldr	r5, [r4, #0]
 8009924:	f015 0506 	ands.w	r5, r5, #6
 8009928:	d106      	bne.n	8009938 <_printf_common+0x48>
 800992a:	f104 0a19 	add.w	sl, r4, #25
 800992e:	68e3      	ldr	r3, [r4, #12]
 8009930:	6832      	ldr	r2, [r6, #0]
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	42ab      	cmp	r3, r5
 8009936:	dc2b      	bgt.n	8009990 <_printf_common+0xa0>
 8009938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800993c:	6822      	ldr	r2, [r4, #0]
 800993e:	3b00      	subs	r3, #0
 8009940:	bf18      	it	ne
 8009942:	2301      	movne	r3, #1
 8009944:	0692      	lsls	r2, r2, #26
 8009946:	d430      	bmi.n	80099aa <_printf_common+0xba>
 8009948:	4641      	mov	r1, r8
 800994a:	4638      	mov	r0, r7
 800994c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009950:	47c8      	blx	r9
 8009952:	3001      	adds	r0, #1
 8009954:	d023      	beq.n	800999e <_printf_common+0xae>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	6922      	ldr	r2, [r4, #16]
 800995a:	f003 0306 	and.w	r3, r3, #6
 800995e:	2b04      	cmp	r3, #4
 8009960:	bf14      	ite	ne
 8009962:	2500      	movne	r5, #0
 8009964:	6833      	ldreq	r3, [r6, #0]
 8009966:	f04f 0600 	mov.w	r6, #0
 800996a:	bf08      	it	eq
 800996c:	68e5      	ldreq	r5, [r4, #12]
 800996e:	f104 041a 	add.w	r4, r4, #26
 8009972:	bf08      	it	eq
 8009974:	1aed      	subeq	r5, r5, r3
 8009976:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800997a:	bf08      	it	eq
 800997c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009980:	4293      	cmp	r3, r2
 8009982:	bfc4      	itt	gt
 8009984:	1a9b      	subgt	r3, r3, r2
 8009986:	18ed      	addgt	r5, r5, r3
 8009988:	42b5      	cmp	r5, r6
 800998a:	d11a      	bne.n	80099c2 <_printf_common+0xd2>
 800998c:	2000      	movs	r0, #0
 800998e:	e008      	b.n	80099a2 <_printf_common+0xb2>
 8009990:	2301      	movs	r3, #1
 8009992:	4652      	mov	r2, sl
 8009994:	4641      	mov	r1, r8
 8009996:	4638      	mov	r0, r7
 8009998:	47c8      	blx	r9
 800999a:	3001      	adds	r0, #1
 800999c:	d103      	bne.n	80099a6 <_printf_common+0xb6>
 800999e:	f04f 30ff 	mov.w	r0, #4294967295
 80099a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a6:	3501      	adds	r5, #1
 80099a8:	e7c1      	b.n	800992e <_printf_common+0x3e>
 80099aa:	2030      	movs	r0, #48	@ 0x30
 80099ac:	18e1      	adds	r1, r4, r3
 80099ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099b8:	4422      	add	r2, r4
 80099ba:	3302      	adds	r3, #2
 80099bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099c0:	e7c2      	b.n	8009948 <_printf_common+0x58>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4622      	mov	r2, r4
 80099c6:	4641      	mov	r1, r8
 80099c8:	4638      	mov	r0, r7
 80099ca:	47c8      	blx	r9
 80099cc:	3001      	adds	r0, #1
 80099ce:	d0e6      	beq.n	800999e <_printf_common+0xae>
 80099d0:	3601      	adds	r6, #1
 80099d2:	e7d9      	b.n	8009988 <_printf_common+0x98>

080099d4 <_printf_i>:
 80099d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	7e0f      	ldrb	r7, [r1, #24]
 80099da:	4691      	mov	r9, r2
 80099dc:	2f78      	cmp	r7, #120	@ 0x78
 80099de:	4680      	mov	r8, r0
 80099e0:	460c      	mov	r4, r1
 80099e2:	469a      	mov	sl, r3
 80099e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099ea:	d807      	bhi.n	80099fc <_printf_i+0x28>
 80099ec:	2f62      	cmp	r7, #98	@ 0x62
 80099ee:	d80a      	bhi.n	8009a06 <_printf_i+0x32>
 80099f0:	2f00      	cmp	r7, #0
 80099f2:	f000 80d1 	beq.w	8009b98 <_printf_i+0x1c4>
 80099f6:	2f58      	cmp	r7, #88	@ 0x58
 80099f8:	f000 80b8 	beq.w	8009b6c <_printf_i+0x198>
 80099fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a04:	e03a      	b.n	8009a7c <_printf_i+0xa8>
 8009a06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a0a:	2b15      	cmp	r3, #21
 8009a0c:	d8f6      	bhi.n	80099fc <_printf_i+0x28>
 8009a0e:	a101      	add	r1, pc, #4	@ (adr r1, 8009a14 <_printf_i+0x40>)
 8009a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a14:	08009a6d 	.word	0x08009a6d
 8009a18:	08009a81 	.word	0x08009a81
 8009a1c:	080099fd 	.word	0x080099fd
 8009a20:	080099fd 	.word	0x080099fd
 8009a24:	080099fd 	.word	0x080099fd
 8009a28:	080099fd 	.word	0x080099fd
 8009a2c:	08009a81 	.word	0x08009a81
 8009a30:	080099fd 	.word	0x080099fd
 8009a34:	080099fd 	.word	0x080099fd
 8009a38:	080099fd 	.word	0x080099fd
 8009a3c:	080099fd 	.word	0x080099fd
 8009a40:	08009b7f 	.word	0x08009b7f
 8009a44:	08009aab 	.word	0x08009aab
 8009a48:	08009b39 	.word	0x08009b39
 8009a4c:	080099fd 	.word	0x080099fd
 8009a50:	080099fd 	.word	0x080099fd
 8009a54:	08009ba1 	.word	0x08009ba1
 8009a58:	080099fd 	.word	0x080099fd
 8009a5c:	08009aab 	.word	0x08009aab
 8009a60:	080099fd 	.word	0x080099fd
 8009a64:	080099fd 	.word	0x080099fd
 8009a68:	08009b41 	.word	0x08009b41
 8009a6c:	6833      	ldr	r3, [r6, #0]
 8009a6e:	1d1a      	adds	r2, r3, #4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6032      	str	r2, [r6, #0]
 8009a74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e09c      	b.n	8009bba <_printf_i+0x1e6>
 8009a80:	6833      	ldr	r3, [r6, #0]
 8009a82:	6820      	ldr	r0, [r4, #0]
 8009a84:	1d19      	adds	r1, r3, #4
 8009a86:	6031      	str	r1, [r6, #0]
 8009a88:	0606      	lsls	r6, r0, #24
 8009a8a:	d501      	bpl.n	8009a90 <_printf_i+0xbc>
 8009a8c:	681d      	ldr	r5, [r3, #0]
 8009a8e:	e003      	b.n	8009a98 <_printf_i+0xc4>
 8009a90:	0645      	lsls	r5, r0, #25
 8009a92:	d5fb      	bpl.n	8009a8c <_printf_i+0xb8>
 8009a94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	da03      	bge.n	8009aa4 <_printf_i+0xd0>
 8009a9c:	232d      	movs	r3, #45	@ 0x2d
 8009a9e:	426d      	negs	r5, r5
 8009aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aa4:	230a      	movs	r3, #10
 8009aa6:	4858      	ldr	r0, [pc, #352]	@ (8009c08 <_printf_i+0x234>)
 8009aa8:	e011      	b.n	8009ace <_printf_i+0xfa>
 8009aaa:	6821      	ldr	r1, [r4, #0]
 8009aac:	6833      	ldr	r3, [r6, #0]
 8009aae:	0608      	lsls	r0, r1, #24
 8009ab0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ab4:	d402      	bmi.n	8009abc <_printf_i+0xe8>
 8009ab6:	0649      	lsls	r1, r1, #25
 8009ab8:	bf48      	it	mi
 8009aba:	b2ad      	uxthmi	r5, r5
 8009abc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009abe:	6033      	str	r3, [r6, #0]
 8009ac0:	bf14      	ite	ne
 8009ac2:	230a      	movne	r3, #10
 8009ac4:	2308      	moveq	r3, #8
 8009ac6:	4850      	ldr	r0, [pc, #320]	@ (8009c08 <_printf_i+0x234>)
 8009ac8:	2100      	movs	r1, #0
 8009aca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ace:	6866      	ldr	r6, [r4, #4]
 8009ad0:	2e00      	cmp	r6, #0
 8009ad2:	60a6      	str	r6, [r4, #8]
 8009ad4:	db05      	blt.n	8009ae2 <_printf_i+0x10e>
 8009ad6:	6821      	ldr	r1, [r4, #0]
 8009ad8:	432e      	orrs	r6, r5
 8009ada:	f021 0104 	bic.w	r1, r1, #4
 8009ade:	6021      	str	r1, [r4, #0]
 8009ae0:	d04b      	beq.n	8009b7a <_printf_i+0x1a6>
 8009ae2:	4616      	mov	r6, r2
 8009ae4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ae8:	fb03 5711 	mls	r7, r3, r1, r5
 8009aec:	5dc7      	ldrb	r7, [r0, r7]
 8009aee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009af2:	462f      	mov	r7, r5
 8009af4:	42bb      	cmp	r3, r7
 8009af6:	460d      	mov	r5, r1
 8009af8:	d9f4      	bls.n	8009ae4 <_printf_i+0x110>
 8009afa:	2b08      	cmp	r3, #8
 8009afc:	d10b      	bne.n	8009b16 <_printf_i+0x142>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	07df      	lsls	r7, r3, #31
 8009b02:	d508      	bpl.n	8009b16 <_printf_i+0x142>
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	6861      	ldr	r1, [r4, #4]
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	bfde      	ittt	le
 8009b0c:	2330      	movle	r3, #48	@ 0x30
 8009b0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b16:	1b92      	subs	r2, r2, r6
 8009b18:	6122      	str	r2, [r4, #16]
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	4640      	mov	r0, r8
 8009b20:	f8cd a000 	str.w	sl, [sp]
 8009b24:	aa03      	add	r2, sp, #12
 8009b26:	f7ff fee3 	bl	80098f0 <_printf_common>
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	d14a      	bne.n	8009bc4 <_printf_i+0x1f0>
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b32:	b004      	add	sp, #16
 8009b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	f043 0320 	orr.w	r3, r3, #32
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	2778      	movs	r7, #120	@ 0x78
 8009b42:	4832      	ldr	r0, [pc, #200]	@ (8009c0c <_printf_i+0x238>)
 8009b44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	6831      	ldr	r1, [r6, #0]
 8009b4c:	061f      	lsls	r7, r3, #24
 8009b4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b52:	d402      	bmi.n	8009b5a <_printf_i+0x186>
 8009b54:	065f      	lsls	r7, r3, #25
 8009b56:	bf48      	it	mi
 8009b58:	b2ad      	uxthmi	r5, r5
 8009b5a:	6031      	str	r1, [r6, #0]
 8009b5c:	07d9      	lsls	r1, r3, #31
 8009b5e:	bf44      	itt	mi
 8009b60:	f043 0320 	orrmi.w	r3, r3, #32
 8009b64:	6023      	strmi	r3, [r4, #0]
 8009b66:	b11d      	cbz	r5, 8009b70 <_printf_i+0x19c>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	e7ad      	b.n	8009ac8 <_printf_i+0xf4>
 8009b6c:	4826      	ldr	r0, [pc, #152]	@ (8009c08 <_printf_i+0x234>)
 8009b6e:	e7e9      	b.n	8009b44 <_printf_i+0x170>
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	f023 0320 	bic.w	r3, r3, #32
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	e7f6      	b.n	8009b68 <_printf_i+0x194>
 8009b7a:	4616      	mov	r6, r2
 8009b7c:	e7bd      	b.n	8009afa <_printf_i+0x126>
 8009b7e:	6833      	ldr	r3, [r6, #0]
 8009b80:	6825      	ldr	r5, [r4, #0]
 8009b82:	1d18      	adds	r0, r3, #4
 8009b84:	6961      	ldr	r1, [r4, #20]
 8009b86:	6030      	str	r0, [r6, #0]
 8009b88:	062e      	lsls	r6, r5, #24
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	d501      	bpl.n	8009b92 <_printf_i+0x1be>
 8009b8e:	6019      	str	r1, [r3, #0]
 8009b90:	e002      	b.n	8009b98 <_printf_i+0x1c4>
 8009b92:	0668      	lsls	r0, r5, #25
 8009b94:	d5fb      	bpl.n	8009b8e <_printf_i+0x1ba>
 8009b96:	8019      	strh	r1, [r3, #0]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4616      	mov	r6, r2
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	e7bc      	b.n	8009b1a <_printf_i+0x146>
 8009ba0:	6833      	ldr	r3, [r6, #0]
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	1d1a      	adds	r2, r3, #4
 8009ba6:	6032      	str	r2, [r6, #0]
 8009ba8:	681e      	ldr	r6, [r3, #0]
 8009baa:	6862      	ldr	r2, [r4, #4]
 8009bac:	4630      	mov	r0, r6
 8009bae:	f000 f859 	bl	8009c64 <memchr>
 8009bb2:	b108      	cbz	r0, 8009bb8 <_printf_i+0x1e4>
 8009bb4:	1b80      	subs	r0, r0, r6
 8009bb6:	6060      	str	r0, [r4, #4]
 8009bb8:	6863      	ldr	r3, [r4, #4]
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bc2:	e7aa      	b.n	8009b1a <_printf_i+0x146>
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	4640      	mov	r0, r8
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	47d0      	blx	sl
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d0ad      	beq.n	8009b2e <_printf_i+0x15a>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	079b      	lsls	r3, r3, #30
 8009bd6:	d413      	bmi.n	8009c00 <_printf_i+0x22c>
 8009bd8:	68e0      	ldr	r0, [r4, #12]
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	4298      	cmp	r0, r3
 8009bde:	bfb8      	it	lt
 8009be0:	4618      	movlt	r0, r3
 8009be2:	e7a6      	b.n	8009b32 <_printf_i+0x15e>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4632      	mov	r2, r6
 8009be8:	4649      	mov	r1, r9
 8009bea:	4640      	mov	r0, r8
 8009bec:	47d0      	blx	sl
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d09d      	beq.n	8009b2e <_printf_i+0x15a>
 8009bf2:	3501      	adds	r5, #1
 8009bf4:	68e3      	ldr	r3, [r4, #12]
 8009bf6:	9903      	ldr	r1, [sp, #12]
 8009bf8:	1a5b      	subs	r3, r3, r1
 8009bfa:	42ab      	cmp	r3, r5
 8009bfc:	dcf2      	bgt.n	8009be4 <_printf_i+0x210>
 8009bfe:	e7eb      	b.n	8009bd8 <_printf_i+0x204>
 8009c00:	2500      	movs	r5, #0
 8009c02:	f104 0619 	add.w	r6, r4, #25
 8009c06:	e7f5      	b.n	8009bf4 <_printf_i+0x220>
 8009c08:	0800a297 	.word	0x0800a297
 8009c0c:	0800a2a8 	.word	0x0800a2a8

08009c10 <memmove>:
 8009c10:	4288      	cmp	r0, r1
 8009c12:	b510      	push	{r4, lr}
 8009c14:	eb01 0402 	add.w	r4, r1, r2
 8009c18:	d902      	bls.n	8009c20 <memmove+0x10>
 8009c1a:	4284      	cmp	r4, r0
 8009c1c:	4623      	mov	r3, r4
 8009c1e:	d807      	bhi.n	8009c30 <memmove+0x20>
 8009c20:	1e43      	subs	r3, r0, #1
 8009c22:	42a1      	cmp	r1, r4
 8009c24:	d008      	beq.n	8009c38 <memmove+0x28>
 8009c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c2e:	e7f8      	b.n	8009c22 <memmove+0x12>
 8009c30:	4601      	mov	r1, r0
 8009c32:	4402      	add	r2, r0
 8009c34:	428a      	cmp	r2, r1
 8009c36:	d100      	bne.n	8009c3a <memmove+0x2a>
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c42:	e7f7      	b.n	8009c34 <memmove+0x24>

08009c44 <_sbrk_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	2300      	movs	r3, #0
 8009c48:	4d05      	ldr	r5, [pc, #20]	@ (8009c60 <_sbrk_r+0x1c>)
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	f7f9 fa04 	bl	800305c <_sbrk>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d102      	bne.n	8009c5e <_sbrk_r+0x1a>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	b103      	cbz	r3, 8009c5e <_sbrk_r+0x1a>
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	20002f2c 	.word	0x20002f2c

08009c64 <memchr>:
 8009c64:	4603      	mov	r3, r0
 8009c66:	b510      	push	{r4, lr}
 8009c68:	b2c9      	uxtb	r1, r1
 8009c6a:	4402      	add	r2, r0
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	d101      	bne.n	8009c76 <memchr+0x12>
 8009c72:	2000      	movs	r0, #0
 8009c74:	e003      	b.n	8009c7e <memchr+0x1a>
 8009c76:	7804      	ldrb	r4, [r0, #0]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	428c      	cmp	r4, r1
 8009c7c:	d1f6      	bne.n	8009c6c <memchr+0x8>
 8009c7e:	bd10      	pop	{r4, pc}

08009c80 <_realloc_r>:
 8009c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c84:	4607      	mov	r7, r0
 8009c86:	4614      	mov	r4, r2
 8009c88:	460d      	mov	r5, r1
 8009c8a:	b921      	cbnz	r1, 8009c96 <_realloc_r+0x16>
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c92:	f7ff bc49 	b.w	8009528 <_malloc_r>
 8009c96:	b92a      	cbnz	r2, 8009ca4 <_realloc_r+0x24>
 8009c98:	f7ff fbdc 	bl	8009454 <_free_r>
 8009c9c:	4625      	mov	r5, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca4:	f000 f81a 	bl	8009cdc <_malloc_usable_size_r>
 8009ca8:	4284      	cmp	r4, r0
 8009caa:	4606      	mov	r6, r0
 8009cac:	d802      	bhi.n	8009cb4 <_realloc_r+0x34>
 8009cae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cb2:	d8f4      	bhi.n	8009c9e <_realloc_r+0x1e>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f7ff fc36 	bl	8009528 <_malloc_r>
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	b908      	cbnz	r0, 8009cc4 <_realloc_r+0x44>
 8009cc0:	4645      	mov	r5, r8
 8009cc2:	e7ec      	b.n	8009c9e <_realloc_r+0x1e>
 8009cc4:	42b4      	cmp	r4, r6
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	bf28      	it	cs
 8009ccc:	4632      	movcs	r2, r6
 8009cce:	f7ff fbb3 	bl	8009438 <memcpy>
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	f7ff fbbd 	bl	8009454 <_free_r>
 8009cda:	e7f1      	b.n	8009cc0 <_realloc_r+0x40>

08009cdc <_malloc_usable_size_r>:
 8009cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ce0:	1f18      	subs	r0, r3, #4
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bfbc      	itt	lt
 8009ce6:	580b      	ldrlt	r3, [r1, r0]
 8009ce8:	18c0      	addlt	r0, r0, r3
 8009cea:	4770      	bx	lr

08009cec <_init>:
 8009cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cee:	bf00      	nop
 8009cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf2:	bc08      	pop	{r3}
 8009cf4:	469e      	mov	lr, r3
 8009cf6:	4770      	bx	lr

08009cf8 <_fini>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr
